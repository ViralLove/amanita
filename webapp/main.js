let currentWallet = null;
let walletCreated = false;
let seedVisible = false;
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è Telegram API
let telegramAPIAvailable = false;
// –§–ª–∞–≥ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–∞–π—Ç–∞
let inviteVerified = false;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
let localization = {};
let currentLanguage = 'ru'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π
const { mode, invite_verified, order_id, discount_tokens, address, language } = getParameters();


console.log("üîç –°–∫—Ä–∏–ø—Ç main.js –∑–∞–≥—Ä—É–∂–µ–Ω");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ alert
function showNotification(message, type = 'info', duration = 5000) {
  logIfAvailable(`–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${message} (—Ç–∏–ø: ${type})`);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const container = document.getElementById('notifications-container');
  if (!container) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π alert
    alert(message);
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  let icon = '';
  switch (type) {
    case 'success':
      icon = '‚úÖ';
      break;
    case 'error':
      icon = '‚ùå';
      break;
    case 'warning':
      icon = '‚ö†Ô∏è';
      break;
    default:
      icon = '‚ÑπÔ∏è';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notification.innerHTML = `
    <div class="notification-content">
      <div class="notification-icon">${icon}</div>
      <div class="notification-message">${message}</div>
    </div>
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  container.appendChild(notification);
  
  // –î–µ–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º—ã–º —Å –ø–æ–º–æ—â—å—é CSS-–∞–Ω–∏–º–∞—Ü–∏–∏
  setTimeout(() => {
    notification.classList.add('visible');
  }, 10);
  
  // –ó–∞–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  setTimeout(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    notification.classList.add('fading');
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
    setTimeout(() => {
      notification.remove();
    }, 500); // 500ms - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ fadeOut
  }, duration);
  
  return notification;
}

function getParameters() {
  const params = {};

  // –ò–∑ URL
  const urlParams = new URLSearchParams(window.location.search);
  ['mode', 'language', 'invite_verified', 'order_id', 'tx_type', 'discount_tokens', 'address', 'source'].forEach(key => {
    if (urlParams.has(key)) {
      const value = urlParams.get(key);
      params[key] = (value === 'true') ? true : (value === 'false') ? false : value;
      logIfAvailable(`URL-–ø–∞—Ä–∞–º–µ—Ç—Ä ${key} = ${params[key]}`);
    }
  });

  // –ò–∑ Telegram initData
  if (window.Telegram?.WebApp?.initDataUnsafe?.start_param) {
    const startParam = window.Telegram.WebApp.initDataUnsafe.start_param;
    const pairs = startParam.split('&');
    pairs.forEach(pair => {
      const [key, value] = pair.split('=');
      if (key && value && !(key in params)) {
        params[key] = (value === 'true') ? true : (value === 'false') ? false : value;
        logIfAvailable(`start_param: ${key} = ${params[key]}`);
      }
    });
  }

  logIfAvailable("üå± –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: " + JSON.stringify(params));

  return params;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω–¥–µ–∫—Å–Ω—ã–º —Ñ–∞–π–ª–æ–º
function logIfAvailable(message, isError = false) {
  console.log(message);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
  const timestamp = new Date().toLocaleTimeString();
  const formattedMessage = `[${timestamp}] ${message}`;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤ debug-panel
  const logElem = document.getElementById('init-log');
  if (logElem) {
    const line = document.createElement('div');
    line.textContent = formattedMessage;
    if (isError) {
      line.style.color = '#ff6b6b';
    }
    logElem.appendChild(line);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    logElem.scrollTop = logElem.scrollHeight;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Telegram API
function inspectTelegramAPI() {
  const info = {
    windowHasTelegram: typeof window.Telegram !== 'undefined',
    telegramAPIAvailable: telegramAPIAvailable,
    navigatorAppVersion: navigator.appVersion,
    userAgent: navigator.userAgent,
    windowInnerWidth: window.innerWidth,
    windowInnerHeight: window.innerHeight,
    timestamp: new Date().toISOString()
  };
  
  if (window.Telegram && Telegram.WebApp && typeof window.Telegram !== 'undefined') {
    info.hasWebApp = typeof window.Telegram.WebApp !== 'undefined';
    
    if (info.hasWebApp) {
      info.webAppVersion = window.Telegram.WebApp.version;
      info.webAppPlatform = window.Telegram.WebApp.platform;
      info.webAppColorScheme = window.Telegram.WebApp.colorScheme;
      info.hasSendData = typeof window.Telegram.WebApp.sendData === 'function';
    }
  }
  
  console.log("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ Telegram API:", JSON.stringify(info, null, 2));
  return info;
}

window.addEventListener("DOMContentLoaded", async () => {
  console.log("üîÑ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω");
  logIfAvailable("üîÑ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∏–Ω-–ø–∞–¥–∞
  loadImages();
  logIfAvailable("üñºÔ∏è –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∏–Ω-–ø–∞–¥–∞");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
  if (window.Telegram && Telegram.WebApp) {
    console.log("üì± Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω");
    console.log("üìä WebApp –¥–∞–Ω–Ω—ã–µ:", {
      initData: window.Telegram.WebApp.initData,
      version: window.Telegram.WebApp.version,
      platform: window.Telegram.WebApp.platform
    });

    try {
    Telegram.WebApp.ready();
      telegramAPIAvailable = true;
      Telegram.WebApp.expand();
      logIfAvailable("‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp:", err);
      logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp: ${err.message}`, true);
      telegramAPIAvailable = false;
    }
  } else {
    console.warn("‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram?");
    logIfAvailable("‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram?", true);
    telegramAPIAvailable = false;
  }

  logIfAvailable("üå± –Ø–∑—ã–∫: " + language);

  const preferredLanguage = localStorage.getItem('preferredLanguage') || language || 'ru';
  await loadLocalization(preferredLanguage);
  updateUIWithLocalization();

  attachUIHandlers();
  handleInitialView();
});


// === Telegram WebApp Init ===
function initTelegramAPI() {
  logIfAvailable("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp API");
  if (window.Telegram && Telegram.WebApp) {
    logIfAvailable("‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω");
    telegramAPIAvailable = true;
    
    try {
      logIfAvailable("–í—ã–∑—ã–≤–∞–µ–º Telegram.WebApp.ready()");
    Telegram.WebApp.ready();
      logIfAvailable("–í—ã–∑—ã–≤–∞–µ–º Telegram.WebApp.expand()");
    Telegram.WebApp.expand(); // optional
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ sendData
      if (typeof Telegram.WebApp.sendData === 'function') {
        logIfAvailable("‚úÖ –ú–µ—Ç–æ–¥ Telegram.WebApp.sendData –¥–æ—Å—Ç—É–ø–µ–Ω");
      } else {
        logIfAvailable("‚ö†Ô∏è –ú–µ—Ç–æ–¥ Telegram.WebApp.sendData –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω", true);
      }
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è mainButton –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      if (Telegram.WebApp.MainButton) {
        logIfAvailable("‚úÖ Telegram.WebApp.MainButton –¥–æ—Å—Ç—É–ø–µ–Ω");
        Telegram.WebApp.MainButton.onClick(function() {
          logIfAvailable("MainButton –±—ã–ª –Ω–∞–∂–∞—Ç");
        });
      } else {
        logIfAvailable("‚ö†Ô∏è Telegram.WebApp.MainButton –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    } catch (err) {
      logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp API: ${err.message}`, true);
    }
  } else {
    logIfAvailable("‚ö†Ô∏è Telegram WebApp API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ Telegram", true);
    telegramAPIAvailable = false;
  }
}

// === Attach button handlers ===
function attachUIHandlers() {
  logIfAvailable("–ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º");
  
  const createBtn = document.getElementById('create-btn');
  const restoreBtn = document.getElementById('restore-btn');
  const restoreConfirmBtn = document.getElementById('restore-confirm-btn');
  const revealSeedBtn = document.getElementById('reveal-seed-btn');
  const backToStartBtn = document.getElementById('back-to-start-btn');
  const clearWalletBtn = document.getElementById('clear-wallet-btn');
  const confirmWalletBtn = document.getElementById('btn_confirm_wallet');
  const copySeedBtn = document.getElementById('copy-seed-btn');
  
  if (!createBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ create-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!restoreBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ restore-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!restoreConfirmBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ restore-confirm-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!revealSeedBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ reveal-seed-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!backToStartBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ back-to-start-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!clearWalletBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ clear-wallet-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!confirmWalletBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ btn_confirm_wallet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  if (!copySeedBtn) logIfAvailable("‚ùå –ö–Ω–æ–ø–∫–∞ copy-seed-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", true);
  
  if (createBtn) {
    logIfAvailable("‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞");
    createBtn.onclick = function(e) {
      logIfAvailable("üëÜ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–∞—Ç–∞");
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram API –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
      logIfAvailable("–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è:");
      const apiState = inspectTelegramAPI();
      
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
      if (typeof ethers === 'undefined') {
        logIfAvailable("‚ùå ethers.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", true);
        showNotification("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ethers.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "error");
        return;
      }
      handleCreateWallet();
    };
  }
  
  if (restoreBtn) restoreBtn.onclick = showRestoreScreen;
  if (restoreConfirmBtn) restoreConfirmBtn.onclick = handleRestoreWallet;
  if (revealSeedBtn) revealSeedBtn.onclick = toggleSeedVisibility;
  if (backToStartBtn) backToStartBtn.onclick = () => switchView('start-screen');
  if (copySeedBtn) copySeedBtn.onclick = copySeedPhrase;
  
  if (confirmWalletBtn) {
    confirmWalletBtn.onclick = function() {
      switchView('setup-pin-screen');
      currentPinInput = [];
      firstPinEntry = "";
      pinStep = "firstEntry";
      updatePinTexts(t('setup_pin_title'), t('setup_pin_description'));
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º
  if (clearWalletBtn) {
    clearWalletBtn.onclick = clearWallet;
  }
  
}

// === Check if wallet already exists in storage ===
function checkExistingWallet() {
  const stored = localStorage.getItem('seedEncrypted');
  if (stored) {
    logIfAvailable("üíæ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫");
    viewWallet();
  } else {
    logIfAvailable("üîç –ö–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ mode");
    // handleInitialView() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ DOMContentLoaded
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–∞–π—Ç–∞
function handleInitialView() {

  logIfAvailable("üå± –†–µ–∂–∏–º: " + mode);
  logIfAvailable("üå± –ò–Ω–≤–∞–π—Ç: " + invite_verified);

  if (mode === 'recovery_only') {
    logIfAvailable("üåÄ –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, recovery_only)");
    switchView('restore-screen');
    return;
  }

  if (mode === 'create_new' && invite_verified === true) {
    logIfAvailable("üß™ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...");
    handleCreateWallet();
    return;
  }

  if (mode === 'view_seed') {
    handleViewSeed();
    return;
  }

  if (mode === 'sign_tx') {
    handleSignTransaction();
    return;
  }

  switchView('start-screen'); // fallback
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
function clearWallet(nextScreen) {
  logIfAvailable("üîÑ –ó–∞–ø—É—â–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞");
  
  try {
    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    localStorage.removeItem('seedEncrypted');
    localStorage.removeItem('wallet_address');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    currentWallet = null;
    walletCreated = false;
    seedVisible = false;
    
    logIfAvailable("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    
    if (nextScreen) {
      switchView(nextScreen);
    }
  } catch (err) {
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: ${err.message}`, true);
    showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫: ${err.message}`, "error");
  }
}

// === Wallet Creation ===
function handleCreateWallet() {
  logIfAvailable("üß™ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...");

  clearWallet();
  
  try {
    switchView('loading-screen');
    document.getElementById('loading-text').textContent = t('loading_create');
    
    if (typeof ethers === 'undefined') {
      throw new Error(t('error_ethers_not_loaded'));
    }
    
    logIfAvailable("–°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ ethers.Wallet.createRandom()");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞
    if (typeof ethers.Wallet === 'undefined') {
      throw new Error("ethers.Wallet –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
    }
    
    if (typeof ethers.Wallet.createRandom !== 'function') {
      throw new Error("ethers.Wallet.createRandom –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π");
    }
    
    logIfAvailable("–ü—Ä–æ–≤–µ—Ä–∫–∞ API ethers —É—Å–ø–µ—à–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫...");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
      try {
        logIfAvailable("–í—ã–∑—ã–≤–∞–µ–º ethers.Wallet.createRandom()");
  const wallet = ethers.Wallet.createRandom();
        logIfAvailable(`‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${wallet.address}`);
        
        // –í ethers.js v5.x mnemonic —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å —Ñ—Ä–∞–∑–æ–π –≤ —Å–≤–æ–π—Å—Ç–≤–µ phrase
        const mnemonicPhrase = wallet.mnemonic && wallet.mnemonic.phrase ? wallet.mnemonic.phrase : "–û—à–∏–±–∫–∞: —Ñ—Ä–∞–∑–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞";
        
  currentWallet = {
    address: wallet.address,
          mnemonic: mnemonicPhrase,
    privateKey: wallet.privateKey,
    restored: false
  };

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∞–¥—Ä–µ—Å–æ–º –∏ –º–Ω–µ–º–æ–Ω–∏–∫–æ–π
        const mnemonicElem = document.getElementById('wallet-mnemonic');
        const addressElem = document.getElementById('wallet-address');
        
        if (mnemonicElem) {
        mnemonicElem.value = mnemonicPhrase;
          logIfAvailable("‚úÖ –ú–Ω–µ–º–æ–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞");
        } else {
          logIfAvailable("‚ùå –≠–ª–µ–º–µ–Ω—Ç wallet-mnemonic –Ω–µ –Ω–∞–π–¥–µ–Ω!", true);
        }

        if (addressElem) {
          addressElem.textContent = wallet.address;
          logIfAvailable("‚úÖ –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        } else {
          logIfAvailable("‚ùå –≠–ª–µ–º–µ–Ω—Ç wallet-address –Ω–µ –Ω–∞–π–¥–µ–Ω!", true);
        }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–¥-—Ñ—Ä–∞–∑–æ–π
      const revealBtn = document.getElementById('reveal-seed-btn');
        if (revealBtn) {
          revealBtn.style.display = 'block';
          logIfAvailable("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏–¥-—Ñ—Ä–∞–∑—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        }

        showNotification(t('account_created_success'), "success");
        logIfAvailable("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        switchView('seed-screen');
      } catch (err) {
        logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: ${err.message}`, true);
        showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: ${err.message}`, "error");
        switchView('start-screen');
      }
    }, 500);
  } catch (err) {
    logIfAvailable(`‚ùå ${t('error_wallet_creation')}: ${err.message}`, true);
    showNotification(`${t('error_wallet_creation')}: ${err.message}`, "error");
    switchView('start-screen');
  }
}

// === Wallet Restoration (—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π PIN) ===
function handleRestoreWallet() {
  logIfAvailable("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º—É—Ö–æ–º–æ—Ä–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞");
  const mnemonic = document.getElementById('mnemonic-input').value.trim();
  const error = document.getElementById('restore-error');
  error.textContent = "";
  error.classList.add('hidden');

  if (!mnemonic) {
    logIfAvailable("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å–∏–¥-—Ñ—Ä–∞–∑–∞ (–º—É—Ö–æ–º–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å)", true);
    error.textContent = t("restore_missing_seed");
    error.classList.remove('hidden');
    return;
  }

  try {
    switchView('loading-screen');
    document.getElementById('loading-text').textContent = t('loading_restore');

    if (typeof ethers === 'undefined') {
      throw new Error(t('error_no_ethers'));
    }

    logIfAvailable("üå± –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–∏–¥-—Ñ—Ä–∞–∑—ã...");

    setTimeout(() => {
      try {
        const wallet = ethers.Wallet.fromMnemonic(mnemonic);
        logIfAvailable(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${wallet.address.substring(0, 10)}...`);

    currentWallet = {
      address: wallet.address,
          mnemonic: mnemonic, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–≤–µ–¥–µ–Ω–Ω—É—é –º–Ω–µ–º–æ–Ω–∏–∫—É
          privateKey: wallet.privateKey,
          restored: true     // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        };

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Å–∏–¥-—Ñ—Ä–∞–∑—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PIN
        logIfAvailable("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ —Å–∏–¥-—Ñ—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PIN.");
        switchView('setup-pin-screen');
        currentPinInput = [];
        firstPinEntry = "";
        pinStep = "firstEntry";
        updatePinTexts(t('setup_pin_title'), t('setup_pin_description'));

      } catch (err) {
        logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∏–¥-—Ñ—Ä–∞–∑—ã –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: ${err.message}`, true);
        const restoreErrorElem = document.getElementById('restore-error');
        if(restoreErrorElem){
            restoreErrorElem.textContent = t("restore_invalid_seed") + " (" + err.message + ")";
            restoreErrorElem.classList.remove('hidden');
        }
        switchView('restore-screen');
      }
    }, 500);

  } catch (err) {
    logIfAvailable(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, ethers –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω): ${err.message}`, true);
    const restoreErrorElem = document.getElementById('restore-error'); 
    if(restoreErrorElem) {
        restoreErrorElem.textContent = t("restore_general_error") + " (" + err.message + ")"; 
        restoreErrorElem.classList.remove('hidden');
    }
    switchView('restore-screen');
  }
}

// === Show wallet info UI ===
function viewWallet() {
  logIfAvailable("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ");
  try {
    const addressElem = document.getElementById('wallet-address');
    const mnemonicElem = document.getElementById('wallet-mnemonic');
    
    if (!addressElem) {
      logIfAvailable("–≠–ª–µ–º–µ–Ω—Ç wallet-address –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
      return;
    }
    if (!mnemonicElem) {
      logIfAvailable("–≠–ª–µ–º–µ–Ω—Ç wallet-mnemonic –Ω–µ –Ω–∞–π–¥–µ–Ω", true);
      return;
    }
    
    if (!currentWallet) {
      logIfAvailable("–û—à–∏–±–∫–∞: currentWallet –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", true);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!currentWallet.address) {
      logIfAvailable("–û—à–∏–±–∫–∞: currentWallet.address –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", true);
      return;
    }
    
    addressElem.textContent = currentWallet.address;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑–µ
    if (currentWallet.mnemonic) {
      mnemonicElem.value = seedVisible
    ? currentWallet.mnemonic
    : "******** ******** ******** ******** ******** ********";

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–¥-—Ñ—Ä–∞–∑–æ–π
      const revealBtn = document.getElementById('reveal-seed-btn');
      if (revealBtn) revealBtn.style.display = 'block';
    } else {
      // –ï—Å–ª–∏ —Å–∏–¥-—Ñ—Ä–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      mnemonicElem.value = t("error_seed_unavailable");
      mnemonicElem.classList.add('error');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —Å–∏–¥-—Ñ—Ä–∞–∑—ã
      const revealBtn = document.getElementById('reveal-seed-btn');
      if (revealBtn) revealBtn.style.display = 'none';
    }

    switchView('seed-screen');
    logIfAvailable("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞");
  } catch (err) {
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ: ${err.message}`, true);
  }
}

// === Toggle mnemonic visibility ===
function toggleSeedVisibility() {
  logIfAvailable("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–∏–¥-—Ñ—Ä–∞–∑—ã");
  seedVisible = !seedVisible;
  const seedElem = document.getElementById('wallet-mnemonic');
  
  if (!currentWallet || !currentWallet.mnemonic) {
    logIfAvailable("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏–¥-—Ñ—Ä–∞–∑—É - –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", true);
    showNotification(t("error_seed_unavailable"), "warning");
    if (seedElem) seedElem.value = t("error_seed_unavailable"); 
    return;
  }
  
  if (seedElem) { 
    seedElem.value = seedVisible
    ? currentWallet.mnemonic
    : "******** ******** ******** ******** ******** ********";
      
    if (seedVisible) {
      logIfAvailable("‚ö†Ô∏è –°–∏–¥-—Ñ—Ä–∞–∑–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç", true);
      showNotification(t("seed_visible_warning"), "warning");
    } else {
      showNotification(t("seed_hidden"), "success");
    }
  } else {
    logIfAvailable("Error: wallet-mnemonic element not found during toggleSeedVisibility", true);
  }
}

// === –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º—É—Ö–æ–º–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ===
function copySeedPhrase() {
  logIfAvailable("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É—Ö–æ–º–æ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
  const seedElem = document.getElementById('wallet-mnemonic');
  
  if (!currentWallet || !currentWallet.mnemonic) {
    logIfAvailable("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º—É—Ö–æ–º–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å - –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", true);
    showNotification(t("error_seed_unavailable"), "error");
    return;
  }
  
  if (!seedElem) {
    logIfAvailable("Error: wallet-mnemonic element not found during copySeedPhrase", true);
    showNotification(t("error_internal_ui"), "error"); // –û–±—â–∞—è –æ—à–∏–±–∫–∞ UI
    return;
  }

  try {
    const wasSeedVisible = seedVisible;
    
    if (!wasSeedVisible) {
      if (seedElem) seedElem.value = currentWallet.mnemonic;
    }
    
    navigator.clipboard.writeText(currentWallet.mnemonic)
      .then(() => {
        logIfAvailable("‚úÖ –ú—É—Ö–æ–º–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
        showNotification(t("copy_seed_success"), "success");
        
        if (!wasSeedVisible) {
          if (seedElem) seedElem.value = 
            "******** ******** ******** ******** ******** ********";
        }
      })
      .catch(err => {
        logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: ${err.message}`, true);
        showNotification(t("copy_seed_error") + ": " + err.message, "error");
      });
  } catch (err) {
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –º—É—Ö–æ–º–æ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: ${err.message}`, true);
    showNotification(t("copy_seed_error") + ": " + err.message, "error");
  }
}

// === View seed ===
function handleViewSeed() {
  logIfAvailable("üå± –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏–¥-—Ñ—Ä–∞–∑—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–≤–æ–¥ PIN");
  switchView("setup-pin-screen");
  updatePinTexts(t("pin_enter_to_view_seed"), t("pin_enter_to_view_seed_description")); 
  currentPinInput = [];
  firstPinEntry = ""; 
  pinStep = "unlockSeed"; 
  logIfAvailable(`üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω pinStep = "unlockSeed"`);
}

// === Sign transaction ===
function handleSignTransaction() {
  const urlParams = new URLSearchParams(window.location.search);
  const orderId = urlParams.get("order_id") || "ORDER";
  const txType = urlParams.get("tx_type") || "generic";
  const amount = urlParams.get("discount_tokens") || "0";
  const address = urlParams.get("address") || "";

  document.getElementById("tx-order-id").textContent = orderId;
  document.getElementById("tx-token-amount").textContent = amount;
  document.getElementById("sign-submit-btn").addEventListener("click", () => {
    const pin = document.getElementById("sign-pin-input").value;
    const encrypted = localStorage.getItem("seedEncrypted");

    if (!encrypted) {
      showNotification(t("error_local_access"), "warning");
      return;
    }
    try {
      const decoded = atob(encrypted);
      const [phrase, savedPin] = decoded.split("::");
      if (savedPin !== pin) {
        showNotification(t("error_wrong_pin"), "error");
        return;
      }
      const wallet = ethers.Wallet.fromMnemonic(phrase);
      const message = `SIGN_AMANITA_ORDER:${orderId}:${amount}`;
      wallet.signMessage(message).then(signature => {
        const payload = JSON.stringify({
          event: "tx_signed",
          signature,
          address: wallet.address,
          order_id: orderId,
          tx_type: txType
        });
        window.Telegram.WebApp.sendData(payload);
      }).catch(err => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏:", err);
        showNotification(t("sign_error_signing"), "error");
      });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", e);
      showNotification(t("error_verify_format"), "error");
    }
  });
  switchView("sign-screen");
}

// ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN =====
function saveWalletWithPin(mnemonic, pin, nextScreen) {
  console.log(`üîê –í—ã–∑–æ–≤ saveWalletWithPin, PIN: ${pin.replace(/./g, '*')}, —ç–∫—Ä–∞–Ω: ${nextScreen}`);
  try {
    // –®–∏—Ñ—Ä—É–µ–º —Å–∏–¥ + PIN
    console.log(`üîë –ù–∞—á–∞–ª–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–∏–¥-—Ñ—Ä–∞–∑—ã –∏ PIN`);
    const encrypted = btoa(`${mnemonic}::${pin}`);
    console.log(`üíæ –ó–∞–ø–∏—Å—å –≤ localStorage, –¥–ª–∏–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${encrypted.length}`);
    localStorage.setItem("seedEncrypted", encrypted);
    logIfAvailable("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –≤ localStorage");

    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã (–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    if (currentWallet && currentWallet.address) {
      console.log(`üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: ${currentWallet.address.substring(0, 8)}...`);
      localStorage.setItem("wallet_address", currentWallet.address);
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
    }

    console.log(`üèÅ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ walletCreated = true`);
    walletCreated = true;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –±–æ—Ç –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (walletCreated) {
      const sent = sendAddressToBot();
      if (!sent) {
        logIfAvailable("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –±–æ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–∫—Ä–∞–Ω –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    const targetScreen = document.getElementById(nextScreen);
    if (targetScreen) {
      console.log(`‚úÖ –≠–∫—Ä–∞–Ω ${nextScreen} –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º`);
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
      console.log(`üîÄ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: ${nextScreen}`);
      switchView(nextScreen);
      logIfAvailable("üå± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PIN –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω: " + nextScreen);
    } else {
      console.error(`‚ùå –≠–∫—Ä–∞–Ω ${nextScreen} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM!`);
      console.error(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã: ${Array.from(document.querySelectorAll('.view')).map(el => el.id).join(', ')}`);
      showNotification("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —ç–∫—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
      // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
      switchView('start-screen');
    }
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PIN: ${e.message}`);
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PIN: ${e.message}`, true);
    showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PIN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "error");
  }
}

// ===== PIN-–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –ª–æ–≥–∏–∫–∞ –≤–≤–æ–¥–∞ =====
let currentPinInput = [];
let firstPinEntry = "";
let pinStep = "firstEntry"; // –ª–∏–±–æ "firstEntry" –ª–∏–±–æ "confirmEntry"

// –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
window.addEventListener('DOMContentLoaded', () => {
  console.log(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º—É—Ö–æ–º–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫`);
  const setupPinScreen = document.getElementById('setup-pin-screen');
  if (setupPinScreen) {
    const mushroomButtons = setupPinScreen.querySelectorAll(".mushroom-key");
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${mushroomButtons.length} –º—É—Ö–æ–º–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN`);

    mushroomButtons.forEach((btn, index) => {
      const key = btn.getAttribute("data-key");
      console.log(`üîÑ –ö–Ω–æ–ø–∫–∞ #${index + 1} –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN: data-key="${key}"`);
      
      btn.addEventListener("click", (e) => {
        console.log(`üëÜ –ö–ª–∏–∫ –ø–æ –º—É—Ö–æ–º–æ—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–µ —Å –∫–ª—é—á–æ–º: ${key} (—ç–∫—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN)`);
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–æ–¥
        if (document.getElementById('setup-pin-screen').style.display === 'block') {
          handlePinInput(key);
        } else {
          console.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PIN-–≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ–≥–¥–∞ —ç–∫—Ä–∞–Ω setup-pin-screen –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.");
        }
      });
    });
  } else {
    console.error('‚ùå –≠–∫—Ä–∞–Ω setup-pin-screen –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã PIN');
  }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –º—É—Ö–æ–º–æ—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
function handlePinInput(key) {
  console.log(`üîë –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å key=${key}, —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥: [${currentPinInput.join(',')}]`);
  const activeSetupPinScreen = document.getElementById('setup-pin-screen');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–∫—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN –≤–∏–¥–∏–º
  if (activeSetupPinScreen && activeSetupPinScreen.style.display === 'block') {
    const dots = activeSetupPinScreen.querySelectorAll(".pin-dot");

    if (!dots || dots.length === 0) {
      console.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã .pin-dot –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ setup-pin-screen.");
      return;
    }

    if (key === "backspace") {
      console.log("üîô –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã PIN");
      currentPinInput.pop();
    } else if (key === "confirm") { // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç.–∫. –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ submit
      // console.log(`üîê –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–ª–∏–Ω–∞ PIN: ${currentPinInput.length}`);
      // if (currentPinInput.length === 5) {
      //   console.log("‚úÖ –î–ª–∏–Ω–∞ PIN = 5, –≤—ã–∑—ã–≤–∞–µ–º processPinEntry()");
      //   processPinEntry();
      // } else {
      //   console.log(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ PIN: ${currentPinInput.length}, —Ç—Ä–µ–±—É–µ—Ç—Å—è 5 —Ü–∏—Ñ—Ä`);
      //   showNotification(t("error_pin_length_generic") || "–í–≤–µ–¥–∏—Ç–µ 5 —Ü–∏—Ñ—Ä PIN-–∫–æ–¥–∞", "warning");
      // }
      console.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'confirm' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'");
    } else if (currentPinInput.length < 5 && /^[0-9]$/.test(key)) {
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–∏—Ñ—Ä–∞ ${key}, –Ω–æ–≤–∞—è –¥–ª–∏–Ω–∞: ${currentPinInput.length + 1}`);
      currentPinInput.push(key);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫
    dots.forEach((dot, index) => {
      dot.classList.toggle("filled", index < currentPinInput.length);
    });
    console.log(`üîµ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—á–∫–∏ PIN (${currentPinInput.length}/5)`);

    // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ 5 —Ü–∏—Ñ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º processPinEntry
    if (currentPinInput.length === 5) {
      console.log("‚úÖ –í–≤–µ–¥–µ–Ω–æ 5 —Ü–∏—Ñ—Ä PIN, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º processPinEntry()");
      processPinEntry();
    }
  } else {
    console.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PIN-–≤–≤–æ–¥, –∫–æ–≥–¥–∞ —ç–∫—Ä–∞–Ω setup-pin-screen –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ PIN –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "OK"
function processPinEntry() {
  const enteredPin = currentPinInput.join("");
  logIfAvailable(`üîÑ [PIN] –ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è processPinEntry(), —ç—Ç–∞–ø: ${pinStep}`);

  if (pinStep === "firstEntry") {
    logIfAvailable("ü•á [PIN] –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ PIN —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–≤–æ–¥—É");
    firstPinEntry = enteredPin;
    currentPinInput = [];
    pinStep = "confirmEntry";
    updatePinTitle(t("pin_confirm_title"));
  } else if (pinStep === "confirmEntry") {
    logIfAvailable("üîç [PIN] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è PIN-–∫–æ–¥–æ–≤");
    if (enteredPin === firstPinEntry) {
      logIfAvailable("‚úÖ [PIN] PIN-–∫–æ–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
      
      if (currentWallet && currentWallet.mnemonic) {
        logIfAvailable("üíº [WALLET] –ö–æ—à–µ–ª—ë–∫ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –ª–æ–∫–∞–ª—å–Ω–æ
        logIfAvailable("üíæ [STEP 1/4] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –ª–æ–∫–∞–ª—å–Ω–æ");
        saveWalletWithPin(currentWallet.mnemonic, enteredPin, "success-screen");
        
        // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º success screen
        logIfAvailable("üéâ [STEP 2/4] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ success screen");
        switchView("success-screen");
        
        // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        logIfAvailable("‚ú® [STEP 3/4] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ");
        showNotification(t("pin_set_success"), "success");

        // 4. –õ–æ–≥–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö
        logIfAvailable("üì§ [STEP 4/4] –ì–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É");
        logIfAvailable(`üîê [DEBUG] walletCreated = ${walletCreated}`);
        logIfAvailable(`üîê [DEBUG] dataWasSent = ${window.dataWasSent}`);

      } else {
        logIfAvailable("‚ùå [ERROR] –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç currentWallet –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç mnemonic", true);
        showNotification(t("error_wallet_data_unavailable_on_pin_confirm"), "error");
      }
    } else {
      logIfAvailable("‚ö†Ô∏è [PIN] PIN-–∫–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–º—É –≤–≤–æ–¥—É");
      showNotification(t("error_pin_mismatch"), "error");
      currentPinInput = [];
      firstPinEntry = "";
      pinStep = "firstEntry";
      updatePinTexts(t('setup_pin_title'), t('setup_pin_description')); 
    }
  } else if (pinStep === "unlockSeed") {
    console.log(`üîë –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∏–¥-—Ñ—Ä–∞–∑—É —Å PIN: ${enteredPin.replace(/./g, '*')}`);
    const encrypted = localStorage.getItem("seedEncrypted");

    if (!encrypted) {
      console.error("‚ùå –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage –¥–ª—è unlockSeed");
      showNotification(t("error_no_wallet_for_pin_unlock"), "error"); // "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. PIN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."
      pinStep = "firstEntry"; 
      updatePinTexts(t('setup_pin_title'), t('setup_pin_description'));
      currentPinInput = []; 
      return;
    }
    try {
      const decoded = atob(encrypted);
      const [phrase, savedPin] = decoded.split("::");

      if (savedPin === enteredPin) {
        console.log("‚úÖ PIN –≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–¥-—Ñ—Ä–∞–∑—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ #seed-screen");
        
        const storedAddress = localStorage.getItem("wallet_address");
        currentWallet = { 
            mnemonic: phrase, 
            address: storedAddress || "" 
        };
        seedVisible = true; 

        const seedScreenMnemonicElem = document.getElementById('wallet-mnemonic');
        const seedScreenAddressElem = document.getElementById('wallet-address');
        const btnConfirmWallet = document.getElementById('btn_confirm_wallet');
        const revealSeedBtn = document.getElementById('reveal-seed-btn');
        const copySeedBtn = document.getElementById('copy-seed-btn');

        if (seedScreenMnemonicElem) {
          seedScreenMnemonicElem.value = phrase; 
        } else {
          console.error("‚ùå –≠–ª–µ–º–µ–Ω—Ç #wallet-mnemonic –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ seed-screen!");
        }
        
        if (seedScreenAddressElem && currentWallet.address) {
          seedScreenAddressElem.textContent = currentWallet.address; 
        }

        if (btnConfirmWallet) btnConfirmWallet.style.display = 'none'; 
        if (revealSeedBtn) revealSeedBtn.style.display = 'inline-block'; 
        if (copySeedBtn) copySeedBtn.style.display = 'inline-block';   

        switchView("seed-screen"); 
        logIfAvailable("üëÄ –°–∏–¥-—Ñ—Ä–∞–∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –Ω–∞ 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ —ç–∫—Ä–∞–Ω–µ #seed-screen");
        
        setTimeout(() => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –µ—â–µ —ç–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–¥-—Ñ—Ä–∞–∑—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è
          const currentVisibleSeedScreen = document.getElementById('seed-screen');
          if (currentVisibleSeedScreen && currentVisibleSeedScreen.style.display === 'block') { 
            if (seedScreenMnemonicElem) seedScreenMnemonicElem.value = ""; 
            if (seedScreenAddressElem) seedScreenAddressElem.textContent = ""; 
            
            currentWallet = null; 
            seedVisible = false;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø –∑–∞–ø–∏—Å–∞–ª(–∞)", –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–ª—è –±—É–¥—É—â–∏—Ö —Ü–∏–∫–ª–æ–≤
            const btnConfirmWalletForRestore = document.getElementById('btn_confirm_wallet');
            if (btnConfirmWalletForRestore) btnConfirmWalletForRestore.style.display = 'block'; 

            logIfAvailable("üôà –°–∏–¥-—Ñ—Ä–∞–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ...");
            if (window.Telegram && Telegram.WebApp && typeof Telegram.WebApp.close === 'function') {
              Telegram.WebApp.close();
            } else {
              console.log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–¥-—Ñ—Ä–∞–∑—ã. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∑–∞–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É –≤—Ä—É—á–Ω—É—é.");
              window.close(); // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
            }
          } else {
            logIfAvailable("–û–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–¥-—Ñ—Ä–∞–∑—ã —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, –æ—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è.");
          }
        }, 20000);
        
      } else {
        console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–¥-—Ñ—Ä–∞–∑—ã");
        showNotification(t("error_wrong_pin_for_view"), "error"); 
        currentPinInput = []; 
        // –Ø–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏
        const activeSetupPinScreen = document.getElementById('setup-pin-screen');
        if (activeSetupPinScreen && activeSetupPinScreen.style.display === 'block') {
            const dots = activeSetupPinScreen.querySelectorAll(".pin-dot");
            if (dots && dots.length > 0) {
                dots.forEach(dot => dot.classList.remove("filled"));
            }
        }
        updatePinTexts(t("pin_enter_to_view_seed_retry"), t("pin_enter_to_view_seed_description")); 
      }
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Å–∏–¥-—Ñ—Ä–∞–∑—ã –¥–ª—è unlockSeed:", e);
      showNotification(t("error_decryption_failed_view_seed"), "error"); // "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–∏–¥-—Ñ—Ä–∞–∑—ã."
      currentPinInput = [];
      // –Ø–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏
      const activeSetupPinScreen = document.getElementById('setup-pin-screen');
      if (activeSetupPinScreen && activeSetupPinScreen.style.display === 'block') {
          const dots = activeSetupPinScreen.querySelectorAll(".pin-dot");
          if (dots && dots.length > 0) {
              dots.forEach(dot => dot.classList.remove("filled"));
          }
      }
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏, –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–±—â–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN –∏–ª–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
      pinStep = "firstEntry"; 
      updatePinTexts(t('setup_pin_title'), t('setup_pin_description'));
    }
  }

  // –°–±—Ä–æ—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫
  const setupPinScreenDots = document.querySelectorAll("#setup-pin-screen .pin-dot");
  if (pinStep === "unlockSeed") {
    // –ï—Å–ª–∏ —ç—Ç–æ —ç—Ç–∞–ø unlockSeed –∏ PIN –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º, —Ç–æ—á–∫–∏ —É–∂–µ –æ—á–∏—â–µ–Ω—ã –≤—ã—à–µ.
    // –ï—Å–ª–∏ PIN –±—ã–ª –≤–µ—Ä–Ω—ã–º, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω, –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—á–µ–∫ –Ω–∞ setup-pin-screen —É–∂–µ –Ω–µ –≤–∞–∂–Ω–æ.
    // –ü–æ—ç—Ç–æ–º—É –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å —Ç–æ—á–∫–∞–º–∏ –∑–¥–µ—Å—å.
    if (enteredPin === firstPinEntry) { // –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ –¥–ª—è unlockSeed, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å savedPin === enteredPin
        // –ï—Å–ª–∏ PIN –≤–µ—Ä–Ω—ã–π (–∏–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥), —Ç–æ –º–æ–∂–Ω–æ –∏ –æ—á–∏—Å—Ç–∏—Ç—å, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if (setupPinScreenDots.length > 0) {
            setupPinScreenDots.forEach(dot => dot.classList.remove("filled"));
            console.log("üîÑ –¢–æ—á–∫–∏ PIN —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ unlockSeed (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π).");
        }
    }
  } else {
    // –î–ª—è —ç—Ç–∞–ø–æ–≤ firstEntry –∏ confirmEntry (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è PIN-–∫–æ–¥–æ–≤)
    if (setupPinScreenDots.length > 0) {
        setupPinScreenDots.forEach(dot => dot.classList.remove("filled"));
        console.log("üîÑ –¢–æ—á–∫–∏ PIN —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ firstEntry/confirmEntry.");
    } else {
        console.warn("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã .pin-dot –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ setup-pin-screen –ø—Ä–∏ –æ–±—â–µ–º —Å–±—Ä–æ—Å–µ —Ç–æ—á–µ–∫.");
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
function updatePinTitle(text) {
  console.log(`üî§ –í—ã–∑–æ–≤ updatePinTitle —Å —Ç–µ–∫—Å—Ç–æ–º: "${text}"`);
  const title = document.getElementById("pin-entry-title");
  if (title) {
    title.textContent = text;
    console.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${text}"`);
  } else {
    console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID "pin-entry-title" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ PIN
function updatePinTexts(titleText, descriptionText) {
  console.log(`üî§ –í—ã–∑–æ–≤ updatePinTexts: –ó–∞–≥–æ–ª–æ–≤–æ–∫="${titleText}", –û–ø–∏—Å–∞–Ω–∏–µ="${descriptionText}"`);
  const titleEl = document.getElementById("pin-entry-title");
  const descriptionEl = document.getElementById("pin-setup-description");

  if (titleEl) {
    titleEl.textContent = titleText;
    console.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${titleText}"`);
  } else {
    console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID "pin-entry-title" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  if (descriptionEl) {
    descriptionEl.textContent = descriptionText;
    console.log(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ PIN –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: "${descriptionText}"`);
  } else {
    console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID "pin-setup-description" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
}

// === Send address to Telegram Bot ===
function sendAddressToBot() {
  logIfAvailable("üì§ [SEND] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –≤ –±–æ—Ç");
  try {
    if (!currentWallet || !currentWallet.address) {
      logIfAvailable("‚ùå [SEND] –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", true);
      throw new Error("–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }
    
    if (!window.Telegram?.WebApp) {
      logIfAvailable("‚ùå [SEND] –û—à–∏–±–∫–∞: Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", true);
      throw new Error("Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    }

    const webAppQueryId = window.Telegram.WebApp.initDataUnsafe?.query_id;
    if (!webAppQueryId) {
      logIfAvailable("‚ÑπÔ∏è [SEND] query_id –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π sendData");
      const payload = {
          event: walletCreated && currentWallet?.restored ? "restored_access" : "created_access",
          address: currentWallet.address
      };
      logIfAvailable(`üì§ [SEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(payload)}`);
      window.Telegram.WebApp.sendData(JSON.stringify(payload));
      logIfAvailable("‚úÖ [SEND] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ sendData");
      } else {
      logIfAvailable(`‚ÑπÔ∏è [SEND] –ù–∞–π–¥–µ–Ω query_id: ${webAppQueryId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ`);
      const payload = {
        event: walletCreated && currentWallet?.restored ? "restored_access" : "created_access",
        address: currentWallet.address,
        query_id: webAppQueryId
      };
      logIfAvailable(`üì§ [SEND] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(payload)}`);
      window.Telegram.WebApp.sendData(JSON.stringify(payload));
      logIfAvailable("‚úÖ [SEND] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å query_id");
    }

    logIfAvailable(`üìä [DEBUG] WebApp initData: ${window.Telegram.WebApp.initData}`);
    logIfAvailable(`üìä [DEBUG] WebApp version: ${window.Telegram.WebApp.version}`);
    
    return true;
  } catch (err) {
    logIfAvailable(`‚ùå [SEND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${err.message}`, true);
    showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç: ${err.message}`, "error");
    return false;
  }
}

// === UI routing ===
function showRestoreScreen() {
  console.log("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è");
  switchView('restore-screen');
}

// === Utility: view switcher ===
function switchView(viewId) {
  console.log(`üîÑ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è switchView —Å ID: "${viewId}"`);
  
  const all = [
    'start-screen',
    'seed-screen',
    'restore-screen',
    'loading-screen',
    'unlock-screen',
    'view-screen',
    'sign-screen',
    'seed-screen',
    'setup-pin-screen',
    'success-screen'
  ];

  console.log(`üìã –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã: ${all.join(', ')}`);
  all.forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      el.style.display = 'none';
      console.log(`üôà –°–∫—Ä—ã—Ç —ç–∫—Ä–∞–Ω: ${id}`);
    } else {
      console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∫—Ä—ã—Ç—å`);
    }
  });

  // –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ recovery
  console.log(`üîç –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–≤ switchView): ${mode || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  if (viewId === 'start-screen' && (mode === 'recovery' || mode === 'recovery_only')) {
    console.warn(`‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ ${mode}`);
    logIfAvailable(`‚ùå –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ ${mode}`);
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ recovery/recovery_only –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å start-screen, 
    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º restore-screen –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    const fallbackView = document.getElementById('restore-screen');
    if (fallbackView) {
        fallbackView.style.display = 'block';
        logIfAvailable(`üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω: restore-screen –≤–º–µ—Å—Ç–æ start-screen –≤ —Ä–µ–∂–∏–º–µ ${mode}`);
    }
    return; // –í–∞–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–∫–∞–∑–∞—Ç—å viewId, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª start-screen
  }

  const view = document.getElementById(viewId);
  if (view) {
    console.log(`üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω: ${viewId}`);
    view.style.display = 'block';
    logIfAvailable(`üîÅ –ü–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω: ${viewId}`);
  } else {
    console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å ID "${viewId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∞–∑–∞—Ç—å`);
    console.warn(`[WebApp] ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç view ${viewId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
}

// === –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ ===
function verifyWalletDataIntegrity() {
  logIfAvailable("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞");
  try {
    if (!currentWallet) {
      logIfAvailable("‚ùå –û–±—ä–µ–∫—Ç currentWallet –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", true);
      showNotification(t('wallet_data_not_found'), "error");
      return false;
    }
    
    if (!currentWallet.address) {
      logIfAvailable("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞", true);
      showNotification(t('wallet_no_address'), "error");
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ –∏–º–µ—Ç—å –¥–ª–∏–Ω—É 42 —Å–∏–º–≤–æ–ª–∞)
    if (!currentWallet.address.startsWith('0x') || currentWallet.address.length !== 42) {
      logIfAvailable("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞", true);
      showNotification(t('wallet_invalid_address'), "warning");
      return false;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
    if (currentWallet.privateKey) {
      if (!currentWallet.privateKey.startsWith('0x') || currentWallet.privateKey.length !== 66) {
        logIfAvailable("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞", true);
        showNotification(t('wallet_invalid_key'), "warning");
        return false;
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 –∏–ª–∏ 24)
    if (currentWallet.mnemonic) {
      const wordCount = currentWallet.mnemonic.trim().split(/\s+/).length;
      if (wordCount !== 12 && wordCount !== 24) {
        logIfAvailable(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Ñ—Ä–∞–∑–µ: ${wordCount}`, true);
        showNotification(t('wallet_invalid_mnemonic'), "warning");
        return false;
      }
    }
    
    logIfAvailable("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏");
    return true;
  } catch (err) {
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞: ${err.message}`, true);
    showNotification(t('wallet_verify_error'), "error");
    return false;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
function encryptData(data, password) {
  try {
    // –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MVP - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ production –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è
    const dataString = JSON.stringify(data);
    // XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–∞–∑–æ–≤–æ–π –∑–∞—â–∏—Ç—ã
    let encrypted = '';
    for (let i = 0; i < dataString.length; i++) {
      encrypted += String.fromCharCode(dataString.charCodeAt(i) ^ password.charCodeAt(i % password.length));
    }
    return btoa(encrypted); // Base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  } catch (err) {
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, true);
    return null;
  }
}

function decryptData(encryptedData, password) {
  try {
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const encryptedString = atob(encryptedData); // –ò–∑ Base64
    let decrypted = '';
    for (let i = 0; i < encryptedString.length; i++) {
      decrypted += String.fromCharCode(encryptedString.charCodeAt(i) ^ password.charCodeAt(i % password.length));
    }
    return JSON.parse(decrypted);
  } catch (err) {
    logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, true);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
async function loadLocalization(language = 'ru') {
  try {
    const response = await fetch(`localization/${language}.json`);
    if (!response.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é: ${response.status}`);
    localization = await response.json();
    currentLanguage = language;
    console.log(`‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${language}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    return false;
  }
}

// === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
function loadImages() {
  const images = [
    'amanita_key_1.png',
    'amanita_key_2.png',
    'amanita_key_3.png',
    'amanita_key_4.png',
    'amanita_key_5.png',
    'amanita_key_6.png',
    'amanita_key_7.png',
    'amanita_key_8.png',
    'amanita_key_9.png',
    'amanita_key_0.png',
    'amanita_key_back.png',
    'star.png'
  ];

  images.forEach(image => {
    const img = new Image();
    img.src = `assets/${image}`;
    img.onload = () => logIfAvailable(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image}`);
    img.onerror = () => logIfAvailable(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${image}`, true);
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–∞–Ω–∞–ª–æ–≥ loc.t –∏–∑ –±–æ—Ç–∞)
function t(key, ...params) {
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  const text = localization[key] || key;
  
  // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
  if (!params || params.length === 0) return text;
  
  // –ó–∞–º–µ–Ω—è–µ–º {0}, {1}, {2}... –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  return text.replace(/\{(\d+)\}/g, (match, index) => {
    const paramIndex = parseInt(index);
    return params[paramIndex] !== undefined ? params[paramIndex] : match;
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è placeholder –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö
function updatePlaceholders() {
  // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-l10n-placeholder
  document.querySelectorAll('[data-l10n-placeholder]').forEach(element => {
    const key = element.getAttribute('data-l10n-placeholder');
    if (key) {
      element.placeholder = t(key);
    }
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è placeholder –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const signPinInput = document.getElementById('sign-pin-input');
  if (signPinInput && !signPinInput.hasAttribute('data-l10n-placeholder')) {
    signPinInput.placeholder = t('sign_pin_placeholder');
  }
  
  // –£–±—Ä–∞–ª–∏ unlockPinInput, —Ç.–∫. —ç–∫—Ä–∞–Ω unlock-screen –±—ã–ª —É–¥–∞–ª–µ–Ω/–∑–∞–º–µ–Ω–µ–Ω –Ω–∞ setup-pin-screen –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–¥–∞
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateUIWithLocalization, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function updateUIWithLocalization() {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-l10n
  document.querySelectorAll('[data-l10n]').forEach(element => {
    const key = element.getAttribute('data-l10n');
    if (key) {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º textContent
      // –î–ª—è –∫–Ω–æ–ø–æ–∫ –ª–æ–≥–∏–∫–∞ —Å–ª–æ–∂–Ω–µ–µ –∏–∑-–∑–∞ –∏–∫–æ–Ω–æ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ updateButtonTexts
      if (element.tagName !== 'BUTTON' && !element.classList.contains('shaman-button') && !element.classList.contains('button-secondary')) {
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ input –∏ –Ω–µ textarea, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–µ—Ä–µ—Ç—å placeholder
        if (element.tagName !== 'INPUT' && element.tagName !== 'TEXTAREA') {
            element.textContent = t(key);
        }
      }
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤ –∫–Ω–æ–ø–∫–∞—Ö
  updateButtonTexts();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
  updatePlaceholders();

  // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω - —ç—Ç–æ —ç–∫—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PIN,
  // –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —à–∞–≥–æ–º (pinStep)
  const setupPinScreen = document.getElementById('setup-pin-screen');
  if (setupPinScreen && setupPinScreen.style.display === 'block') {
    if (pinStep === 'firstEntry') {
      updatePinTexts(t('setup_pin_title'), t('setup_pin_description'));
    } else if (pinStep === 'confirmEntry') {
      updatePinTexts(t('pin_confirm_title'), t('setup_pin_description')); // –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è "–ø—Ä–∏–¥—É–º–∞–π—Ç–µ", –Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ"
    } else if (pinStep === 'unlockSeed') {
      // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
      const currentTitle = document.getElementById('pin-entry-title').textContent;
      if (currentTitle === t('pin_enter_to_view_seed_retry')) {
         updatePinTexts(t('pin_enter_to_view_seed_retry'), t('pin_enter_to_view_seed_description'));
      } else {
         updatePinTexts(t('pin_enter_to_view_seed'), t('pin_enter_to_view_seed_description'));
      }
    }
  }
}

function updateButtonTexts() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –≤ –∫–Ω–æ–ø–∫–∞—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∫–æ–Ω–æ–∫
  const buttonUpdates = [
    { id: 'create-btn', key: 'btn_create_wallet', icon: 'üÜï' },
    { id: 'restore-btn', key: 'btn_restore_wallet', icon: 'üîÑ' },
    { id: 'reveal-seed-btn', key: 'btn_reveal_seed', icon: 'üëÅÔ∏è' },
    { id: 'copy-seed-btn', key: 'btn_copy_seed', icon: 'üìã' },
    { id: 'btn_confirm_wallet', key: 'btn_confirm_wallet', icon: '‚úÖ' },
    { id: 'restore-confirm-btn', key: 'btn_restore_wallet', icon: '‚úÖ' }, // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –∫–ª—é—á, —á—Ç–æ –∏ restore-btn
    { id: 'back-to-start-btn', key: 'btn_back', icon: '‚¨ÖÔ∏è' },
    // { id: 'clear-wallet-btn', key: 'btn_delete_wallet', icon: 'üóëÔ∏è' }, // —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç –≤ HTML —Å–µ–π—á–∞—Å
    { id: 'setup-pin-submit-btn', key: 'setup_pin_submit_btn', icon: 'üîê'},
    { id: 'sign-submit-btn', key: 'btn_sign_submit', icon: '‚úçÔ∏è' },
    // { id: 'unlock-submit-btn', key: 'unlock_btn', icon: 'üîì' }, // —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç –≤ HTML —Å–µ–π—á–∞—Å
    // { id: 'change-lang-btn', key: 'btn_change_lang', icon: 'üåê' }, // —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç –≤ HTML —Å–µ–π—á–∞—Å
    { id: 'finish-btn', key: 'success_btn', icon: '‚úÖ' }
  ];

  buttonUpdates.forEach(update => {
    const button = document.getElementById(update.id);
    if (!button) return;
    
    let iconSpan = button.querySelector('.icon');
    if (!iconSpan && update.icon) { // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
      iconSpan = document.createElement('span');
      iconSpan.className = 'icon';
      button.prepend(iconSpan); // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –Ω–∞—á–∞–ª–æ –∫–Ω–æ–ø–∫–∏
    }
    
    if (iconSpan && update.icon) {
      iconSpan.textContent = update.icon + ' '; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏
    } else if (iconSpan && !update.icon) { // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ span –µ—Å—Ç—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        iconSpan.remove();
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–º .icon
    Array.from(button.childNodes).forEach(node => {
        if (node.nodeType === Node.TEXT_NODE || (node.nodeType === Node.ELEMENT_NODE && !node.classList.contains('icon'))) {
            button.removeChild(node);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    const textNode = document.createTextNode(t(update.key));
    if (iconSpan && update.icon) { // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–µ
        button.appendChild(textNode);
    } else { // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–æ (–∏–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∏–∫–æ–Ω–∫–∏)
        button.prepend(textNode);
    }
  });
}

async function changeLanguage(language) {
  if (await loadLocalization(language)) {
    updateUIWithLocalization();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
    localStorage.setItem('preferredLanguage', language);
    return true;
  }
  return false;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞)
// document.getElementById('change-lang-btn').addEventListener('click', () => {
//   const newLang = currentLanguage === 'ru' ? 'en' : 'ru';
//   changeLanguage(newLang);
// });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ó–∞–≤–µ—Ä—à–∏—Ç—å/–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
const finishBtn = document.getElementById('finish-btn');
if (finishBtn) {
    finishBtn.addEventListener('click', async () => {
      try {
        logIfAvailable("üîÑ [FINISH] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥'");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram WebApp
        const webAppState = {
          available: !!window.Telegram?.WebApp,
          version: window.Telegram?.WebApp?.version,
          initDataUnsafe: window.Telegram?.WebApp?.initDataUnsafe,
          hasMainButton: !!window.Telegram?.WebApp?.MainButton,
          hasSendData: typeof window.Telegram?.WebApp?.sendData === 'function'
        };
        logIfAvailable(`üìä [FINISH] –°–æ—Å—Ç–æ—è–Ω–∏–µ WebApp: ${JSON.stringify(webAppState)}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        if (walletCreated && !window.dataWasSent) {
          logIfAvailable("üì§ [FINISH] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç (–æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)");
          const sent = sendAddressToBot();
          if (sent) {
            window.dataWasSent = true;
            logIfAvailable("‚úÖ [FINISH] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
      } else {
            logIfAvailable("‚ùå [FINISH] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", true);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –±–æ—Ç");
          }
        } else {
          logIfAvailable(`‚ÑπÔ∏è [FINISH] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö: walletCreated=${walletCreated}, dataWasSent=${window.dataWasSent}`);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        logIfAvailable("‚è≥ [FINISH] –ñ–¥–µ–º 300–º—Å");
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        // TODO: –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ –ü–ï–†–ï–î –†–ï–õ–ò–ó–û–ú - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π –±–ª–æ–∫ –∫–æ–¥–∞:
        /*
        if (window.Telegram?.WebApp?.close) {
          window.Telegram.WebApp.close();
        } else {
          window.close();
        }
        */
        logIfAvailable("üö´ [FINISH] –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");
        showNotification("–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏", "info");
        logIfAvailable("‚úÖ [FINISH] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");
      } catch (err) {
        logIfAvailable(`‚ùå [FINISH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: ${err.message}`, true);
        showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "error");
      }
    });
}