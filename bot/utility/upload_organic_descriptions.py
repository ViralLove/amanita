import json
import logging
import os
from typing import Dict
from bot.services.core.ipfs_factory import IPFSFactory
import traceback
import argparse
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def setup_logging(level=logging.INFO):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(level)
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –º–æ–¥—É–ª—è
    logger.setLevel(level)

def parse_args():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ IPFS')
    parser.add_argument('-v', '--verbose', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('-s', '--silent', action='store_true', help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--log-cli-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                      help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    return parser.parse_args()

def get_file_name(item_data: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    base_name = item_data.get('id', '').lower()
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    base_name = base_name.replace(' ', '_').replace('√ó', 'x')
    # –ï—Å–ª–∏ scientific_name –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º id
    if not base_name:
        base_name = item_data.get('id', 'unknown')
    return f"biounit_{base_name}_description.json"

class ProductDescriptionUploader:
    def __init__(self, descriptions_path: str, mapping_path: str):
        self.storage = IPFSFactory().get_storage()
        self.descriptions_path = descriptions_path
        self.mapping_path = mapping_path
        
    def load_descriptions(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ {self.descriptions_path}")
            with open(self.descriptions_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
                items = data.get('organic_items', {})
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(items)} –æ–ø–∏—Å–∞–Ω–∏–π")
                return items
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.descriptions_path}")
            raise
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Ñ–∞–π–ª–µ –æ–ø–∏—Å–∞–Ω–∏–π: {e}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ–ø–∏—Å–∞–Ω–∏–π: {e}")
            raise

    def save_mapping(self, mapping: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ CID-product_id –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(self.mapping_path), exist_ok=True)
            
            with open(self.mapping_path, 'w', encoding='utf-8') as file:
                json.dump(mapping, file, ensure_ascii=False, indent=2)
            logger.info(f"–ú–∞–ø–ø–∏–Ω–≥ CID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.mapping_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
            raise

    def upload_descriptions(self) -> Dict[str, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ IPFS –∏ —Å–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ CID
        
        Returns:
            Dict[str, str]: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ biounit_id -> cid
        """
        organic_items = self.load_descriptions()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(organic_items)} –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        cid_mapping = {}

        for item_id, item_data in organic_items.items():
            try:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ item_id: {item_id}")
                logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {json.dumps(item_data, ensure_ascii=False, indent=2)}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                json_data = json.dumps(item_data, ensure_ascii=False, indent=2)
                logger.debug(f"–†–∞–∑–º–µ—Ä JSON –¥–∞–Ω–Ω—ã—Ö: {len(json_data)} –±–∞–π—Ç")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                file_name = get_file_name(item_data)
                logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {file_name}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ IPFS —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ IPFS –¥–ª—è {item_id}")
                cid = self.storage.upload_file(json_data, file_name=file_name)
                logger.info(f"‚òÄÔ∏è –£—Ä–∞! –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –ø—Ä–æ—Ä–æ—Å–ª–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω! {item_id}, –ø–æ–ª—É—á–µ–Ω CID: {cid}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π CID
                if not cid or len(cid) < 10:
                    logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CID –¥–ª—è {item_id}: {cid}")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥
                cid_mapping[item_id] = {
                    "cid": cid,
                    "file_name": file_name
                }
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥: {item_id} -> {cid} ({file_name})")
                
            except Exception as e:
                logger.error(f"üò± –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –µ–¥–∏–Ω–∏—Ü—ã {item_id}: {e}")
                logger.error(f"Stacktrace: {traceback.format_exc()}")
                continue

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        logger.info(f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(cid_mapping)} –∏–∑ {len(organic_items)}")
        self.save_mapping(cid_mapping)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        return {
            item_id: info["cid"]
            for item_id, info in cid_mapping.items()
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.log_cli_level:
        level = getattr(logging, args.log_cli_level)
    elif args.verbose:
        level = logging.DEBUG
    elif args.silent:
        level = logging.WARNING
    else:
        level = logging.INFO
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(level)
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–ø–∏—Å–∞–Ω–∏–π –≤ IPFS")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—É—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ main
    descriptions_path = os.path.join("bot", "catalog", "organic_descriptions.json")
    mapping_path = os.path.join("bot", "catalog", "organic_cid_mapping.json")
    
    uploader = ProductDescriptionUploader(descriptions_path, mapping_path)
    uploader.upload_descriptions()
    logger.info("‚ú® –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def process_organic_descriptions(
    descriptions_json: str,
    output_mapping_json: str
) -> Dict[str, str]:
    """
    –§–∞—Å–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–π –±–∏–æ–µ–¥–∏–Ω–∏—Ü –≤ IPFS
    
    Args:
        descriptions_json: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        output_mapping_json: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ CID'–æ–≤
        
    Returns:
        Dict[str, str]: –ú–∞–ø–ø–∏–Ω–≥ biounit_id –∏ –∏—Ö CID'–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
    uploader = ProductDescriptionUploader(descriptions_json, output_mapping_json)
    return uploader.upload_descriptions()

if __name__ == "__main__":
    main()
