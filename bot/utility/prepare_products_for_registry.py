import os
import json
from pathlib import Path
from datetime import datetime
from bot.services.ipfs_factory import IPFSFactory
from typing import List, Dict
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def prepare_registry_data(
    input_json: Path,
    output_dir: Path,
    output_registry_json: Path
) -> List[Dict]:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä
    
    Args:
        input_json: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ UX-–¥–∞–Ω–Ω—ã–º–∏
        output_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤
        output_registry_json: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä
    """
    if not input_json.exists():
        logger.error("‚ùå –§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_json}")

    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    output_dir.mkdir(parents=True, exist_ok=True)
    output_registry_json.parent.mkdir(parents=True, exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    with open(input_json, "r", encoding="utf-8") as f:
        products_data = json.load(f)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IPFS –∫–ª–∏–µ–Ω—Ç
    uploader = IPFSFactory().get_storage()

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    contract_upload_data = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
    for idx, product in enumerate(products_data, start=1):
        product_id = product.get("id")
        if not product_id:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç #{idx} –±–µ–∑ ID ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!")
            continue

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª
        product_filename = output_dir / f"{product_id}.json"
        with open(product_filename, "w", encoding="utf-8") as pf:
            json.dump(product, pf, ensure_ascii=False, indent=2)
        
        logger.info(f"‚òÄÔ∏è –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {product_filename}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –≤ IPFS
        try:
            logger.info(f"üî• –ó–∞–≥—Ä—É–∂–∞–µ–º {product_filename} –≤ IPFS")
            cid = uploader.upload_file(str(product_filename))
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {product_id}: {cid}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {product_id}: {e}")
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        contract_entry = {
            "id": product_id,
            "ipfsCID": cid,
            "active": True
        }
        contract_upload_data.append(contract_entry)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π JSON
    with open(output_registry_json, "w", encoding="utf-8") as outf:
        json.dump(contract_upload_data, outf, ensure_ascii=False, indent=2)

    logger.info("\nüéâ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç!")
    logger.info(f"üìù –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {output_registry_json}")
    
    return contract_upload_data

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—É—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ main
    input_json = Path("bot/catalog/active_catalog.json")
    output_dir = Path("bot/catalog/product_jsons")
    output_registry_json = Path("bot/catalog/product_registry_upload_data.json")
    
    prepare_registry_data(input_json, output_dir, output_registry_json)

def process_registry_preparation(
    catalog_json: str,
    output_dir: str,
    output_registry_json: str
) -> List[Dict]:
    """
    –§–∞—Å–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Ä–µ–µ—Å—Ç—Ä
    
    Args:
        catalog_json: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
        output_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤
        output_registry_json: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞—Å–∞–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
    )
    
    return prepare_registry_data(
        input_json=Path(catalog_json),
        output_dir=Path(output_dir),
        output_registry_json=Path(output_registry_json)
    )

if __name__ == "__main__":
    main()
