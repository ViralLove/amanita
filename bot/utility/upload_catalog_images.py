import os
import json
import csv
from pathlib import Path
import time
from typing import Dict, Optional
import mimetypes
import logging
from dotenv import load_dotenv

#from services.ar_weave import ArWeaveUploader
from bot.services.ipfs_factory import IPFSFactory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path="bot/.env")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –∏–∑ .env
CATALOG_DIR = os.getenv("CATALOG_DIR", "bot/catalog")
LOGS_DIR = os.getenv("LOGS_DIR", "bot/catalog")
METRICS_DIR = os.getenv("METRICS_DIR", "metrics")

def validate_file(file_path: Path) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        size = file_path.stat().st_size
        if size > 50 * 1024 * 1024:  # 50MB
            return f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {size} –±–∞–π—Ç"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞
        mime_type, _ = mimetypes.guess_type(str(file_path))
        if not mime_type or not mime_type.startswith('image/'):
            return f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {mime_type}"
            
        return None
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}"

def upload_images(
    image_dir: Path,
    json_log_path: Path,
    csv_log_path: Path,
    logger: logging.Logger
) -> Dict[str, Dict]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ IPFS
    
    Args:
        image_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        json_log_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –ª–æ–≥–∞
        csv_log_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –ª–æ–≥–∞
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
    Returns:
        Dict[str, Dict]: –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    """
    start_time = time.time()
    total_size = 0
    processed_files = 0
    failed_files = 0
    upload_log: Dict[str, Dict] = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not image_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {image_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return upload_log

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    json_log_path.parent.mkdir(parents=True, exist_ok=True)
    csv_log_path.parent.mkdir(parents=True, exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    uploader = IPFSFactory().get_storage()
    logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫: {uploader.__class__.__name__}")

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    files = list(image_dir.iterdir())
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files)}")

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ
    for file_path in files:
        if not file_path.is_file():
            continue
            
        file_start_time = time.time()
        file_info = {
            "size": 0,
            "mime_type": None,
            "status": "failed",
            "error": None,
            "upload_time": 0,
            "cid": None
        }

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            file_size = file_path.stat().st_size
            file_info["size"] = file_size
            total_size += file_size
            
            mime_type, _ = mimetypes.guess_type(str(file_path))
            file_info["mime_type"] = mime_type
            
            error = validate_file(file_path)
            if error:
                file_info["error"] = error
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ {file_path.name}: {error}")
                failed_files += 1
                continue

            logger.info(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º {file_path.name} (—Ä–∞–∑–º–µ—Ä: {file_size/1024:.1f}KB, —Ç–∏–ø: {mime_type})")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                cid = uploader.upload_file(str(file_path))
            upload_time = time.time() - file_start_time
            
            file_info.update({
                "status": "success",
                "upload_time": upload_time,
                "cid": cid
            })
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {file_path.name} -> {cid} –∑–∞ {upload_time:.1f}—Å")
            processed_files += 1

            except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}"
            file_info["error"] = error_msg
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path.name}: {error_msg}")
            failed_files += 1
            
        finally:
            upload_log[file_path.name] = file_info

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥ –≤ JSON
    with open(json_log_path, "w", encoding="utf-8") as f:
        json.dump(upload_log, f, ensure_ascii=False, indent=2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –ª–æ–≥ –≤ CSV –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    with open(csv_log_path, "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["File Name", "CID", "Status", "Size (bytes)", "Upload Time (s)"])
        for file_name, info in upload_log.items():
            writer.writerow([
                file_name,
                info.get("cid", ""),
                info["status"],
                info["size"],
                f"{info.get('upload_time', 0):.1f}"
            ])

    total_time = time.time() - start_time
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "="*50)
    logger.info("üìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {processed_files} —Ñ–∞–π–ª–æ–≤")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {failed_files}")
    logger.info(f"üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size/1024/1024:.1f}MB")
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
    logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {(total_size/1024/1024)/total_time:.1f}MB/s")
    logger.info("="*50)
    
    return upload_log

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    image_dir = Path(CATALOG_DIR)
    json_log_path = Path(LOGS_DIR) / "images_upload_log.json"
    csv_log_path = Path(LOGS_DIR) / "images_upload_log.csv"
    
    upload_log = upload_images(image_dir, json_log_path, csv_log_path, logger)
    
    logger.info("üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:")
    logger.info(f"   - {json_log_path}")
    logger.info(f"   - {csv_log_path}")
    logger.info(f"   - {Path(LOGS_DIR) / 'upload_catalog.log'}")

def process_catalog_images(images_dir: str, output_json: str, log_json: str, log_csv: str) -> Dict[str, str]:
    """
    –§–∞—Å–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ IPFS
    
    Args:
        images_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        output_json: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ CID'–æ–≤
        log_json: –ü—É—Ç—å –¥–ª—è JSON –ª–æ–≥–∞
        log_csv: –ü—É—Ç—å –¥–ª—è CSV –ª–æ–≥–∞
        
    Returns:
        Dict[str, str]: –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö CID'–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞—Å–∞–¥–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    local_logger = logging.getLogger(__name__ + ".facade")
    local_logger.setLevel(logging.INFO)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    upload_log = upload_images(
        image_dir=Path(images_dir),
        json_log_path=Path(log_json),
        csv_log_path=Path(log_csv),
        logger=local_logger
    )
    
    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞
    cid_mapping = {
        filename: info["cid"]
        for filename, info in upload_log.items()
        if info["status"] == "success" and info["cid"]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ CID'–æ–≤
    with open(output_json, "w", encoding="utf-8") as f:
        json.dump(cid_mapping, f, ensure_ascii=False, indent=2)
    
    return cid_mapping

if __name__ == "__main__":
    main()
