import csv
import json
import os
from typing import Dict, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def load_image_cids(mapping_path: str) -> Dict[str, str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏—Ö CID
    
    Args:
        mapping_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
    """
    try:
        with open(mapping_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        logger.error(f"üò± –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return {}

def load_description_cids(mapping_path: str) -> Dict[str, str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ biounit_id –∏ –∏—Ö CID –æ–ø–∏—Å–∞–Ω–∏–π
    
    Args:
        mapping_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
    """
    try:
        with open(mapping_path, 'r', encoding='utf-8') as file:
            mapping = json.load(file)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å biounit_id -> cid
            return {biounit_id: data["cid"] for biounit_id, data in mapping.items()}
    except Exception as e:
        logger.error(f"üò± –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–ø–ø–∏–Ω–≥–∞ –æ–ø–∏—Å–∞–Ω–∏–π: {e}")
        return {}

def parse_prices(prices_str: str) -> List[Dict]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–∞–º–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    result = []
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    price_variants = prices_str.split(';')
    
    for price_var in price_variants:
        price_var = price_var.strip()
        if not price_var:
            continue
            
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–µ–Ω—ã
        components = price_var.split('|')
        if len(components) != 4:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price_var}")
            continue
            
        amount, unit, price, currency = components
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if unit.lower() in ['g', 'gram', '–≥—Ä']:
            price_dict = {
                "weight": amount,
                "weight_unit": "g",
                "price": price,
                "currency": currency
            }
        elif unit.lower() in ['ml', '–º–ª']:
            price_dict = {
                "volume": amount,
                "volume_unit": "ml",
                "price": price,
                "currency": currency
            }
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {unit}")
            continue
            
        result.append(price_dict)
    
    return result

def convert_catalog_to_json(
    csv_path: str,
    images_mapping_path: str,
    descriptions_mapping_path: str,
    output_path: str
) -> List[Dict]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CSV –∫–∞—Ç–∞–ª–æ–≥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç
    
    Args:
        csv_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
        images_mapping_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º CID'–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        descriptions_mapping_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º CID'–æ–≤ –æ–ø–∏—Å–∞–Ω–∏–π
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –∫–∞—Ç–∞–ª–æ–≥–∞
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
    image_cids = load_image_cids(images_mapping_path)
    description_cids = load_description_cids(descriptions_mapping_path)
    catalog_items = []

    try:
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        with open(csv_path, 'r', encoding='utf-8') as file:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º BOM –µ—Å–ª–∏ –µ—Å—Ç—å
            content = file.read()
            if content.startswith('\ufeff'):
                content = content[1:]
            
            # –ß–∏—Ç–∞–µ–º CSV
            reader = csv.DictReader(content.splitlines(), skipinitialspace=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for row in reader:
                # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                row = {k.strip(): v.strip() for k, v in row.items()}
                
                # –ü–æ–ª—É—á–∞–µ–º CID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_file = row['image_file'].strip()
                cover_image_cid = image_cids.get(image_file, "")
                
                # –ü–æ–ª—É—á–∞–µ–º CID –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                biounit_id = row['biounit_id']
                description_cid = description_cids.get(biounit_id)
                if not description_cid:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω CID –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è biounit_id: {biounit_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
                prices = parse_prices(row['prices'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
                catalog_item = {
                    "business_id": row['product_id'],
                    "title": row['product_name'],
                    "organic_components": [
                        {
                            "biounit_id": biounit_id,
                            "description_cid": description_cid or "",
                            "proportion": "100%"
                        }
                    ] if description_cid else [],
                    "categories": [category.strip() for category in row['categories'].split(',')],
                    "cover_image_url": cover_image_cid,
                    "forms": [row['form']],
                    "species": row['species'],
                    "prices": prices
                }
                
                catalog_items.append(catalog_item)
                logger.info(f"‚ú® –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {catalog_item['title']}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(output_path, 'w', encoding='utf-8') as file:
            json.dump(catalog_items, file, ensure_ascii=False, indent=2)
        logger.info(f"üéâ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        
        return catalog_items

    except Exception as e:
        logger.error(f"üò± –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        raise

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—É—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ main
    csv_path = os.path.join("bot", "catalog", "Iveta_catalog.csv")
    images_mapping_path = os.path.join("bot", "catalog", "catalog_images.json")
    descriptions_mapping_path = os.path.join("bot", "catalog", "organic_cid_mapping.json")
    output_path = os.path.join("bot", "catalog", "active_catalog.json")
    
    convert_catalog_to_json(
        csv_path=csv_path,
        images_mapping_path=images_mapping_path,
        descriptions_mapping_path=descriptions_mapping_path,
        output_path=output_path
    )

def process_catalog_conversion(
    csv_path: str,
    images_mapping_json: str,
    descriptions_mapping_json: str,
    output_json: str
) -> List[Dict]:
    """
    –§–∞—Å–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CSV –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ JSON
    
    Args:
        csv_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
        images_mapping_json: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º CID'–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        descriptions_mapping_json: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º CID'–æ–≤ –æ–ø–∏—Å–∞–Ω–∏–π
        output_json: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –∫–∞—Ç–∞–ª–æ–≥–∞
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    """
    return convert_catalog_to_json(
        csv_path=csv_path,
        images_mapping_path=images_mapping_json,
        descriptions_mapping_path=descriptions_mapping_json,
        output_path=output_json
    )

if __name__ == "__main__":
    main()
