import os
import json
import logging
from pathlib import Path
from typing import Dict, List, Optional
from dataclasses import dataclass
from dotenv import load_dotenv
import argparse
import traceback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞—Å–∞–¥–Ω—ã–µ –º–µ—Ç–æ–¥—ã
from bot.utility.upload_catalog_images import process_catalog_images
from bot.utility.upload_organic_descriptions import process_organic_descriptions
from bot.utility.catalog_csv2json import process_catalog_conversion
from bot.utility.prepare_products_for_registry import process_registry_preparation
from bot.services.product_registry import ProductRegistryService
from bot.services.blockchain import BlockchainService
from bot.services.service_factory import ServiceFactory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def setup_logging(level=logging.INFO, log_file=None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(level)
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    root_logger.addHandler(console_handler)
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –ª–æ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    if log_file:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        root_logger.addHandler(file_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('web3').setLevel(logging.WARNING)

@dataclass
class CatalogPipelineConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    IMAGES_DIR: str
    CATALOG_CSV: str
    ORGANIC_DESCRIPTIONS_JSON: str
    
    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    CATALOG_IMAGES_JSON: str
    ORGANIC_CID_MAPPING_JSON: str
    ACTIVE_CATALOG_JSON: str
    
    # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    PRODUCT_JSONS_DIR: str
    PRODUCT_REGISTRY_DATA_JSON: str
    
    # –õ–æ–≥–∏
    UPLOAD_LOG_JSON: str
    UPLOAD_LOG_CSV: str
    PROCESS_LOG: str

def load_pipeline_config() -> CatalogPipelineConfig:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞"""
    load_dotenv(os.path.join("bot", ".env"))
    base_dir = os.path.join("bot", "catalog")

    serviceFactory = ServiceFactory()
    productRegistry = serviceFactory.create_product_registry_service()
    
    return CatalogPipelineConfig(
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        IMAGES_DIR=os.getenv("CATALOG_IMAGES_DIR", os.path.join(base_dir)),
        CATALOG_CSV=os.getenv("CATALOG_CSV_PATH", os.path.join(base_dir, "Iveta_catalog.csv")),
        ORGANIC_DESCRIPTIONS_JSON=os.getenv("ORGANIC_DESCRIPTIONS_JSON", os.path.join(base_dir, "organic_descriptions.json")),
        
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        CATALOG_IMAGES_JSON=os.getenv("CATALOG_IMAGES_JSON", os.path.join(base_dir, "catalog_images.json")),
        ORGANIC_CID_MAPPING_JSON=os.getenv("ORGANIC_CID_MAPPING_JSON", os.path.join(base_dir, "organic_cid_mapping.json")),
        ACTIVE_CATALOG_JSON=os.getenv("ACTIVE_CATALOG_JSON", os.path.join(base_dir, "active_catalog.json")),
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        PRODUCT_JSONS_DIR=os.getenv("PRODUCT_JSONS_DIR", os.path.join(base_dir, "product_jsons")),
        PRODUCT_REGISTRY_DATA_JSON=os.getenv("PRODUCT_REGISTRY_DATA_JSON", os.path.join(base_dir, "product_registry_upload_data.json")),
        
        # –õ–æ–≥–∏
        UPLOAD_LOG_JSON=os.getenv("UPLOAD_LOG_JSON", os.path.join(base_dir, "images_upload_log.json")),
        UPLOAD_LOG_CSV=os.getenv("UPLOAD_LOG_CSV", os.path.join(base_dir, "images_upload_log.csv")),
        PROCESS_LOG=os.getenv("PROCESS_LOG", os.path.join(base_dir, "upload_catalog.log"))
    )

class CatalogPipeline:
    """–ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.config = load_pipeline_config()
        self.logger = logger
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        service_factory = ServiceFactory()
        self.productRegistry = service_factory.create_product_registry_service()
        self.logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    def validate_input_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        required_files = [
            self.config.CATALOG_CSV,
            self.config.ORGANIC_DESCRIPTIONS_JSON
        ]
        required_dirs = [
            self.config.IMAGES_DIR,
            os.path.dirname(self.config.PRODUCT_JSONS_DIR)
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        for file_path in required_files:
            if not os.path.isfile(file_path):
                self.logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_path in required_dirs:
            if not os.path.isdir(dir_path):
                self.logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                return False
                
        return True
    
    def upload_images(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ IPFS"""
        return process_catalog_images(
            images_dir=self.config.IMAGES_DIR,
            output_json=self.config.CATALOG_IMAGES_JSON,
            log_json=self.config.UPLOAD_LOG_JSON,
            log_csv=self.config.UPLOAD_LOG_CSV
        )
    
    def upload_descriptions(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤ IPFS"""
        return process_organic_descriptions(
            descriptions_json=self.config.ORGANIC_DESCRIPTIONS_JSON,
            output_mapping_json=self.config.ORGANIC_CID_MAPPING_JSON
        )
    
    def convert_catalog_to_json(self) -> List[Dict]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CSV –∫–∞—Ç–∞–ª–æ–≥ –≤ JSON"""
        return process_catalog_conversion(
            csv_path=self.config.CATALOG_CSV,
            images_mapping_json=self.config.CATALOG_IMAGES_JSON,
            descriptions_mapping_json=self.config.ORGANIC_CID_MAPPING_JSON,
            output_json=self.config.ACTIVE_CATALOG_JSON
        )
    
    def prepare_products_for_registry(self) -> List[Dict]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä"""
        return process_registry_preparation(
            catalog_json=self.config.ACTIVE_CATALOG_JSON,
            output_dir=self.config.PRODUCT_JSONS_DIR,
            output_registry_json=self.config.PRODUCT_REGISTRY_DATA_JSON
        )
    
    def upload_products_to_registry(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        try:
            self.logger.info("üìù –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–µ—Å—Ç—Ä–∞
            with open(self.config.PRODUCT_REGISTRY_DATA_JSON, 'r') as f:
                registry_data = json.load(f)
            
            results = []
            for product in registry_data:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º CID (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
                    ipfs_cid = product.get('ipfsCID') or product.get('ipfs_cid')
                    if not ipfs_cid:
                        raise ValueError(f"CID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
                    tx_hash = self.productRegistry.create_product_on_chain(ipfs_cid)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
                    product['tx_hash'] = tx_hash
                    results.append(product)
                    
                    self.logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç {product['id']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Å–º–∞—Ä—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç. TX: {tx_hash}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product['id']}: {str(e)}")
                    product['error'] = str(e)
                    results.append(product)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.config.PRODUCT_REGISTRY_DATA_JSON, 'w') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")
            raise
    
    def validate_output_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            required_outputs = [
                self.config.CATALOG_IMAGES_JSON,
                self.config.ORGANIC_CID_MAPPING_JSON,
                self.config.ACTIVE_CATALOG_JSON,
                self.config.PRODUCT_REGISTRY_DATA_JSON
            ]
            
            for file_path in required_outputs:
                if not os.path.isfile(file_path):
                    self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {file_path}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            if not os.path.isdir(self.config.PRODUCT_JSONS_DIR) or not os.listdir(self.config.PRODUCT_JSONS_DIR):
                self.logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç–∞: {self.config.PRODUCT_JSONS_DIR}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON —Ñ–∞–π–ª–æ–≤
            for file_path in required_outputs:
                try:
                    with open(file_path, 'r') as f:
                        json.load(f)
                except json.JSONDecodeError:
                    self.logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ: {file_path}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False
    
    def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not self.validate_input_data():
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.logger.info("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            image_cids = self.upload_images()
            self.logger.info(f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_cids}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
            self.logger.info("üìù –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π...")
            description_cids = self.upload_descriptions()
            self.logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è: {description_cids}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥
            self.logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞...")
            catalog_data = self.convert_catalog_to_json()
            self.logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: {catalog_data}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–µ—Å—Ç—Ä–∞
            self.logger.info("üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–µ—Å—Ç—Ä–∞...")
            registry_data = self.prepare_products_for_registry()
            self.logger.info(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–µ—Å—Ç—Ä–∞: {registry_data}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ä–µ–µ—Å—Ç—Ä
            self.logger.info("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä...")
            upload_results = self.upload_products_to_registry()
            self.logger.info(f"üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ä–µ–µ—Å—Ç—Ä: {upload_results}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not self.validate_output_data():
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            self.logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
            return False

def upload_only(args):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        pipeline = CatalogPipeline()
        setup_logging(
            level=logging.DEBUG if args.verbose else logging.INFO,
            log_file=pipeline.config.PROCESS_LOG
        )
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        if not os.path.exists(pipeline.config.PRODUCT_REGISTRY_DATA_JSON):
            logger.error(f"‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {pipeline.config.PRODUCT_REGISTRY_DATA_JSON}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
        if not pipeline.productRegistry:
            logger.error("‚ùå –°–µ—Ä–≤–∏—Å —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        logger.info("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON...")
        with open(pipeline.config.PRODUCT_REGISTRY_DATA_JSON, 'r') as f:
            registry_data = json.load(f)
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(registry_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        results = pipeline.upload_products_to_registry()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        success_count = len([p for p in results if 'tx_hash' in p and 'error' not in p])
        error_count = len([p for p in results if 'error' in p])
        
        logger.info("üìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏:")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        
        if error_count > 0:
            logger.info("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:")
            for product in results:
                if 'error' in product:
                    logger.error(f"  - –ü—Ä–æ–¥—É–∫—Ç {product['id']}: {product['error']}")
        
        return error_count == 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")
        return False

def parse_args():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ü–∞–π–ø–ª–∞–π–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    parser.add_argument('-v', '--verbose', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('-s', '--silent', action='store_true', help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--log-cli-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                      help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--upload-only', action='store_true', help='–¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç')
    return parser.parse_args()

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_args()
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ upload-only, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É
    if args.upload_only:
        success = upload_only(args)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if args.log_cli_level:
            level = getattr(logging, args.log_cli_level)
        elif args.verbose:
            level = logging.DEBUG
        elif args.silent:
            level = logging.WARNING
        else:
            level = logging.INFO
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        pipeline = CatalogPipeline()
        setup_logging(
            level=level,
            log_file=pipeline.config.PROCESS_LOG
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
        success = pipeline.run()
    
    if success:
        logger.info("‚ú® –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        exit(0)
    else:
        logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        exit(1)

if __name__ == "__main__":
    main() 