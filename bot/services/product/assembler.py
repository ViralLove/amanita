"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ IPFS –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –º–µ–∂–¥—É
ProductRegistryService –∏ ProductMetadataService, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –µ–¥–∏–Ω—ã–π
–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ Product.
"""

from typing import Dict, Any, Optional, Tuple
import logging
import json
from bot.model.product import Product
from bot.validation import ValidationFactory, ValidationResult


class ProductAssembler:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ IPFS –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
    
    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ValidationFactory
    - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ Product —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    
    def __init__(self, validation_service=None, cache_service=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ProductAssembler.
        
        Args:
            validation_service: –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            cache_service: –°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        """
        self.logger = logging.getLogger(__name__)
        self.validation_service = validation_service
        self.cache_service = cache_service
        
        self.logger.info("ÔøΩÔøΩ ProductAssembler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def assemble_product(self, blockchain_data: Tuple, metadata: Dict[str, Any]) -> Optional[Product]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ IPFS –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            blockchain_data: –ö–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ (id, seller, ipfsCID, active)
            metadata: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ IPFS
            
        Returns:
            Product: –°–æ–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Raises:
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞
        """
        try:
            self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞: blockchain_data={blockchain_data}")
            
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞
            blockchain_info = self._extract_blockchain_data(blockchain_data)
            if not blockchain_info:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫—á–µ–π–Ω–∞")
                return None
            
            product_id, ipfs_cid, is_active = blockchain_info
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω—ã: blockchain_id={product_id}, CID={ipfs_cid}, Active={is_active}")
            
            # –®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ValidationFactory
            validation_result = self._validate_metadata(metadata)
            if not validation_result:
                self.logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞")
                return None
            
            self.logger.info("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Product –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            product = self._create_product_from_metadata(metadata)
            if not product:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                return None
            
            self.logger.info("‚úÖ –û–±—ä–µ–∫—Ç Product —Å–æ–∑–¥–∞–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
            
            # –®–∞–≥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã—Ö
            self._set_blockchain_data(product, product_id, ipfs_cid, is_active)
            
            self.logger.info(f"üéâ –ü—Ä–æ–¥—É–∫—Ç {product.business_id} (blockchain_id={product_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω")
            return product
            
        except Exception as e:
            self.logger.error(f"ÔøΩÔøΩ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return None
    
    def _extract_blockchain_data(self, blockchain_data: Tuple) -> Optional[Tuple[int, str, bool]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –±–ª–æ–∫—á–µ–π–Ω–∞.
        
        Args:
            blockchain_data: –ö–æ—Ä—Ç–µ–∂ (id, seller, ipfsCID, active)
            
        Returns:
            Tuple[int, str, bool]: (product_id, ipfs_cid, is_active) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not hasattr(blockchain_data, '__getitem__') or len(blockchain_data) < 4:
                self.logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ blockchain_data: {blockchain_data}")
                return None
            
            product_id = blockchain_data[0]  # blockchain_id –ø—Ä–æ–¥—É–∫—Ç–∞
            seller = blockchain_data[1]      # –ê–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            ipfs_cid = blockchain_data[2]    # IPFS CID
            is_active = bool(blockchain_data[3])  # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(product_id, (int, str)) or not product_id:
                self.logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π blockchain_id: {product_id}")
                return None
            
            if not ipfs_cid or not isinstance(ipfs_cid, str):
                self.logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ipfs_cid: {ipfs_cid}")
                return None
            
            return product_id, ipfs_cid, is_active
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞: {e}")
            return None
    
    def _validate_metadata(self, metadata: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ ValidationFactory.
        
        Args:
            metadata: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not isinstance(metadata, dict):
                self.logger.error(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –ø–æ–ª—É—á–µ–Ω: {type(metadata)}")
                return False
            
            # üîç –î–ï–¢–ê–õ–¨–ù–´–ô –í–´–í–û–î JSON –ú–ï–¢–ê–î–ê–ù–ù–´–•
            self.logger.info(f"üìã –ü–û–õ–ù–´–ô JSON –ü–†–û–î–£–ö–¢–ê:")
            self.logger.info(f"{json.dumps(metadata, ensure_ascii=False, indent=2)}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            validator = ValidationFactory.get_product_validator()
            validation_result = validator.validate(metadata)
            
            if not validation_result.is_valid:
                self.logger.error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_result.error_message}")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _create_product_from_metadata(self, metadata: Dict[str, Any]) -> Optional[Product]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Product –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            metadata: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            Product: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Product –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
            self.logger.info(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {list(metadata.keys())}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º business_id –∏ organic_components –¥–µ—Ç–∞–ª—å–Ω–æ
            business_id = metadata.get('business_id', 'N/A')
            self.logger.info(f"üè∑Ô∏è Business ID: {business_id}")
            
            if 'organic_components' in metadata:
                self.logger.info(f"üî¨ –ù–∞–π–¥–µ–Ω—ã organic_components: {len(metadata['organic_components'])} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
                for i, comp in enumerate(metadata['organic_components']):
                    self.logger.info(f"  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {i+1}: biounit_id='{comp.get('biounit_id', 'N/A')}', description_cid='{comp.get('description_cid', 'N/A')}', proportion='{comp.get('proportion', 'N/A')}'")
            else:
                self.logger.warning("‚ö†Ô∏è organic_components –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
            
            # üîß –£–ù–ò–§–ò–ö–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º from_dict –≤–º–µ—Å—Ç–æ from_json –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.logger.info("üèóÔ∏è –í—ã–∑—ã–≤–∞–µ–º Product.from_dict()...")
            product = Product.from_dict(metadata)
            self.logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å business_id: {product.business_id}, –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: {product.title}")
            return product
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            self.logger.error(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            self.logger.error(f"üîç Stack trace: {traceback.format_exc()}")
            return None
    
    def _set_blockchain_data(self, product: Product, product_id: int, ipfs_cid: str, is_active: bool) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞.
        
        Args:
            product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (blockchain_id)
            ipfs_cid: IPFS CID –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            is_active: –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
        """
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
            product.blockchain_id = product_id  # blockchain_id –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            product.cid = ipfs_cid              # IPFS CID –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
            product.status = 1 if is_active else 0  # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            self.logger.info(f"‚úÖ –ë–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: blockchain_id={product_id}, CID={ipfs_cid}, Status={product.status}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã—Ö: {e}")
            raise