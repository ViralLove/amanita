"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
"""
import re
from typing import Dict, List, Union, Optional
from decimal import Decimal
import decimal
import json
import logging

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
VALID_CURRENCIES = ["EUR", "USD"]
VALID_WEIGHT_UNITS = ["g", "kg"]
VALID_VOLUME_UNITS = ["ml", "l"]
MAX_TITLE_LENGTH = 255
MAX_CATEGORIES = 10
VALID_FORMS = ["mixed slices", "whole caps", "broken caps", "premium caps", "powder", "tincture", "flower", "chunks", "dried whole", "dried powder", "dried strips"]
CID_PATTERN = r"^Qm[1-9A-HJ-NP-Za-km-z]{44}$"

class ValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    def __init__(self, field: str, error: str):
        self.field = field
        self.error = error
        super().__init__(f"{field}: {error}")

def validate_required_fields(data: Dict, required_fields: List[str]) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    for field in required_fields:
        if field not in data or not data[field]:
            raise ValidationError(field, "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

def validate_string_length(value: str, max_length: int, field: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏"""
    if len(value) > max_length:
        raise ValidationError(field, f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ {max_length} —Å–∏–º–≤–æ–ª–æ–≤")

def validate_cid(cid: str, field: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ CID"""
    if not re.match(CID_PATTERN, cid):
        raise ValidationError(field, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID")

def validate_price(price_data: Dict) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ"""
    logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã: {json.dumps(price_data, indent=2)}")
    
    if not isinstance(price_data, dict):
        error = "–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        logger.error(f"‚ùå {error}")
        raise ValidationError("price", error)

    if "price" not in price_data:
        error = "–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
        logger.error(f"‚ùå {error}")
        raise ValidationError("price", error)
    
    try:
        price = Decimal(str(price_data["price"]))
        if price <= 0:
            error = "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
            logger.error(f"‚ùå {error}")
            raise ValidationError("price", error)
    except (ValueError, TypeError, decimal.InvalidOperation):
        error = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"
        logger.error(f"‚ùå {error}")
        raise ValidationError("price", error)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
    if "currency" not in price_data:
        error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"
        logger.error(f"‚ùå {error}")
        raise ValidationError("currency", error)
    if price_data["currency"] not in VALID_CURRENCIES:
        error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"
        logger.error(f"‚ùå {error}")
        raise ValidationError("currency", error)
    
    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    has_weight = "weight" in price_data and "weight_unit" in price_data
    has_volume = "volume" in price_data and "volume_unit" in price_data
    
    if has_weight and has_volume:
        raise ValidationError("measurement", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Å –∏–ª–∏ –æ–±—ä–µ–º, –Ω–æ –Ω–µ –æ–±–∞")
    elif has_weight:
        if price_data["weight_unit"] not in VALID_WEIGHT_UNITS:
            raise ValidationError("weight_unit", f"–ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(VALID_WEIGHT_UNITS)}")
        try:
            weight = Decimal(str(price_data["weight"]))
            if weight <= 0:
                raise ValidationError("weight", "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, TypeError, decimal.InvalidOperation):
            raise ValidationError("weight", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞")
    elif has_volume:
        if price_data["volume_unit"] not in VALID_VOLUME_UNITS:
            raise ValidationError("volume_unit", f"–ï–¥–∏–Ω–∏—Ü–∞ –æ–±—ä–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(VALID_VOLUME_UNITS)}")
        try:
            volume = Decimal(str(price_data["volume"]))
            if volume <= 0:
                raise ValidationError("volume", "–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, TypeError, decimal.InvalidOperation):
            raise ValidationError("volume", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä–µ–º–∞")
    else:
        raise ValidationError("measurement", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Å –∏–ª–∏ –æ–±—ä–µ–º")

def validate_categories(categories: List[str]) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not categories:
        raise ValidationError("categories", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    if len(categories) > MAX_CATEGORIES:
        raise ValidationError("categories", f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ({MAX_CATEGORIES})")
    if not all(isinstance(cat, str) and cat.strip() for cat in categories):
        raise ValidationError("categories", "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏")

def validate_form(form: str) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""
    if form not in VALID_FORMS:
        raise ValidationError("form", f"–§–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(VALID_FORMS)}")

def validate_product_data(data: Dict) -> Dict[str, Union[bool, List[str]]]:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫.
    """
    errors = []
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["id", "title", "description_cid", "categories", "cover_image", "form", "species", "prices"]
        for field in required_fields:
            if field not in data:
                errors.append(f"{field}: –ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –æ—à–∏–±–∫–∏
        if any(field not in data for field in required_fields):
            return {
                "is_valid": False,
                "errors": errors
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–∫—Ä–æ–º–µ —Å–ø–∏—Å–∫–æ–≤ –∏ —Ü–µ–Ω)
        for field in required_fields:
            if field not in ["categories", "prices"] and not data[field]:
                errors.append(f"{field}: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if len(data["title"]) > MAX_TITLE_LENGTH:
            errors.append(f"title: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è CID
        try:
            validate_cid(data["description_cid"], "description_cid")
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
            
        try:
            validate_cid(data["cover_image"], "cover_image")
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            validate_categories(data["categories"])
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        try:
            validate_form(data["form"])
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
        if not data["prices"]:
            errors.append("prices: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞")
        else:
            for i, price in enumerate(data["prices"]):
                try:
                    validate_price(price)
                except ValidationError as e:
                    errors.append(f"prices[{i}].{e.field}: {e.error}")

    except Exception as e:
        errors.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    return {
        "is_valid": len(errors) == 0,
        "errors": errors
    }

def sanitize_product_data(data: Dict) -> Dict:
    """
    –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.
    –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö.
    """
    sanitized = data.copy()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
    for field in ["id", "title", "form", "species"]:
        if field in sanitized:
            sanitized[field] = str(sanitized[field]).strip()
    
    # –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if "categories" in sanitized:
        sanitized["categories"] = [cat.strip() for cat in sanitized["categories"]]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
    if "prices" in sanitized:
        for price in sanitized["prices"]:
            if "price" in price:
                price["price"] = str(Decimal(str(price["price"])))
            if "weight" in price:
                price["weight"] = str(Decimal(str(price["weight"])))
            if "volume" in price:
                price["volume"] = str(Decimal(str(price["volume"])))
    
    return sanitized 