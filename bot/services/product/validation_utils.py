"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
"""
import re
from typing import Dict, List, Union, Optional
from decimal import Decimal
import decimal
import json
import logging

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
VALID_CURRENCIES = ["EUR", "USD"]
VALID_WEIGHT_UNITS = ["g", "kg"]
VALID_VOLUME_UNITS = ["ml", "l"]
MAX_TITLE_LENGTH = 255
MAX_CATEGORIES = 10
VALID_FORMS = ["mixed slices", "whole caps", "broken caps", "premium caps", "powder", "tincture", "flower", "chunks", "dried whole", "dried powder", "dried strips"]
CID_PATTERN = r"^Qm[1-9A-HJ-NP-Za-km-z]{44}$"

class ValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    def __init__(self, field: str, error: str):
        self.field = field
        self.error = error
        super().__init__(f"{field}: {error}")

def validate_required_fields(data: Dict, required_fields: List[str]) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    for field in required_fields:
        if field not in data:
            raise ValidationError(field, "–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

def validate_cid(cid: str, field: str) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è IPFS CID"""
    if not re.match(CID_PATTERN, cid):
        raise ValidationError(field, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID")

def validate_price(price_data: Dict) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ"""
    logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã: {json.dumps(price_data, indent=2)}")
    
    if not isinstance(price_data, dict):
        error = "–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        logger.error(f"‚ùå {error}")
        raise ValidationError("price", error)

    if "price" not in price_data:
        error = "–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"
        logger.error(f"‚ùå {error}")
        raise ValidationError("price", error)
    
    try:
        price = Decimal(str(price_data["price"]))
        if price <= 0:
            error = "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
            logger.error(f"‚ùå {error}")
            raise ValidationError("price", error)
    except (ValueError, TypeError, decimal.InvalidOperation):
        error = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"
        logger.error(f"‚ùå {error}")
        raise ValidationError("price", error)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
    if "currency" not in price_data:
        error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"
        logger.error(f"‚ùå {error}")
        raise ValidationError("currency", error)
    if price_data["currency"] not in VALID_CURRENCIES:
        error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞"
        logger.error(f"‚ùå {error}")
        raise ValidationError("currency", error)
    
    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    has_weight = ("weight" in price_data and price_data["weight"] is not None and 
                  "weight_unit" in price_data and price_data["weight_unit"] is not None)
    has_volume = ("volume" in price_data and price_data["volume"] is not None and 
                  "volume_unit" in price_data and price_data["volume_unit"] is not None)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: weight={price_data.get('weight')}, weight_unit={price_data.get('weight_unit')}, volume={price_data.get('volume')}, volume_unit={price_data.get('volume_unit')}")
    logger.info(f"üîç has_weight={has_weight}, has_volume={has_volume}")
    
    if has_weight and has_volume:
        raise ValidationError("measurement", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Å –∏–ª–∏ –æ–±—ä–µ–º, –Ω–æ –Ω–µ –æ–±–∞")
    elif has_weight:
        if price_data["weight_unit"] not in VALID_WEIGHT_UNITS:
            raise ValidationError("weight_unit", f"–ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(VALID_WEIGHT_UNITS)}")
        try:
            weight = Decimal(str(price_data["weight"]))
            if weight <= 0:
                raise ValidationError("weight", "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, TypeError, decimal.InvalidOperation):
            raise ValidationError("weight", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞")
    elif has_volume:
        if price_data["volume_unit"] not in VALID_VOLUME_UNITS:
            raise ValidationError("volume_unit", f"–ï–¥–∏–Ω–∏—Ü–∞ –æ–±—ä–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(VALID_VOLUME_UNITS)}")
        try:
            volume = Decimal(str(price_data["volume"]))
            if volume <= 0:
                raise ValidationError("volume", "–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except (ValueError, TypeError, decimal.InvalidOperation):
            raise ValidationError("volume", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä–µ–º–∞")
    else:
        raise ValidationError("measurement", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Å –∏–ª–∏ –æ–±—ä–µ–º")

def validate_categories(categories: List[str]) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not isinstance(categories, list):
        raise ValidationError("categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
    
    if not categories:
        raise ValidationError("categories", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    for category in categories:
        if not isinstance(category, str):
            raise ValidationError("categories", "–ö–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not category.strip():
            raise ValidationError("categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        if len(category) < 2 or len(category) > 50:
            raise ValidationError("categories", "–î–ª–∏–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")

def validate_forms(forms: List[str]) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º –ø—Ä–æ–¥—É–∫—Ç–∞"""
    if not isinstance(forms, list):
        raise ValidationError("forms", "–§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
    if not forms:
        raise ValidationError("forms", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞")
    for form in forms:
        if not isinstance(form, str):
            raise ValidationError("forms", "–ö–∞–∂–¥–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not form.strip():
            raise ValidationError("forms", "–§–æ—Ä–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        if form not in VALID_FORMS:
            raise ValidationError("forms", f"–§–æ—Ä–º–∞ '{form}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(VALID_FORMS)}")

def validate_organic_component(component: Dict) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    if not isinstance(component, dict):
        raise ValidationError("organic_component", "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ["biounit_id", "description_cid", "proportion"]
    for field in required_fields:
        if field not in component:
            raise ValidationError(f"organic_component.{field}", f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
        if not component[field] or not str(component[field]).strip():
            raise ValidationError(f"organic_component.{field}", f"–ü–æ–ª–µ {field} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è CID
    try:
        validate_cid(component["description_cid"], f"organic_component.description_cid")
    except ValidationError as e:
        raise ValidationError(f"organic_component.{e.field}", e.error)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
    proportion = str(component["proportion"])
    proportion_pattern = r'^(\d+(?:\.\d+)?)(%|g|ml|kg|l|oz|lb|fl_oz)$'
    
    if not re.match(proportion_pattern, proportion):
        raise ValidationError("organic_component.proportion", 
                           f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: {proportion}. "
                           f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 50%, 100g, 30ml, 25%")

def validate_organic_components(components: List[Dict]) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    if not isinstance(components, list):
        raise ValidationError("organic_components", "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
    
    if not components:
        raise ValidationError("organic_components", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    for i, component in enumerate(components):
        try:
            validate_organic_component(component)
        except ValidationError as e:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ –æ—à–∏–±–∫–µ
            raise ValidationError(f"organic_components[{i}].{e.field}", e.error)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ biounit_id
    biounit_ids = [comp["biounit_id"] for comp in components]
    if len(biounit_ids) != len(set(biounit_ids)):
        raise ValidationError("organic_components", "biounit_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    validate_component_proportions(components)

async def validate_organic_components_with_ipfs(components: List[Dict], storage_service) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ IPFS"""
    # –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    validate_organic_components(components)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö description_cid –≤ IPFS
    for i, component in enumerate(components):
        description_cid = component["description_cid"]
        try:
            description_data = await storage_service.download_json_async(description_cid)
            if description_data is None:
                raise ValidationError(f"organic_components[{i}].description_cid", 
                                   f"–û–ø–∏—Å–∞–Ω–∏–µ —Å CID {description_cid} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IPFS")
        except Exception as e:
            raise ValidationError(f"organic_components[{i}].description_cid", 
                               f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è {description_cid}: {str(e)}")

def validate_component_proportions(components: List[Dict]) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    if not components:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    first_proportion = str(components[0]["proportion"])
    proportion_type = None
    
    if first_proportion.endswith('%'):
        proportion_type = 'percentage'
    elif any(first_proportion.endswith(unit) for unit in ['g', 'kg', 'oz', 'lb']):
        proportion_type = 'weight'
    elif any(first_proportion.endswith(unit) for unit in ['ml', 'l', 'fl_oz']):
        proportion_type = 'volume'
    else:
        raise ValidationError("organic_components", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø
    for i, component in enumerate(components):
        proportion = str(component["proportion"])
        if proportion_type == 'percentage' and not proportion.endswith('%'):
            raise ValidationError(f"organic_components[{i}].proportion", 
                               "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏")
        elif proportion_type == 'weight' and not any(proportion.endswith(unit) for unit in ['g', 'kg', 'oz', 'lb']):
            raise ValidationError(f"organic_components[{i}].proportion", 
                               "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏")
        elif proportion_type == 'volume' and not any(proportion.endswith(unit) for unit in ['ml', 'l', 'fl_oz']):
            raise ValidationError(f"organic_components[{i}].proportion", 
                               "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏")
    
    # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ = 100%
    if proportion_type == 'percentage':
        total_percentage = 0
        for component in components:
            proportion_value = float(str(component["proportion"]).rstrip('%'))
            total_percentage += proportion_value
        
        if abs(total_percentage - 100.0) > 0.01:  # –î–æ–ø—É—Å–∫ 0.01%
            raise ValidationError("organic_components", 
                               f"–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%, —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞: {total_percentage}%")
    
    # –î–ª—è –≤–µ—Å–æ–≤—ã—Ö/–æ–±—ä–µ–º–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ > 0
    elif proportion_type in ['weight', 'volume']:
        for i, component in enumerate(components):
            proportion_value = float(str(component["proportion"])[:-2] if str(component["proportion"])[-2:].isalpha() else str(component["proportion"])[:-1])
            if proportion_value <= 0:
                raise ValidationError(f"organic_components[{i}].proportion", 
                                   "–ü—Ä–æ–ø–æ—Ä—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

async def validate_product_data(data: Dict, storage_service=None) -> Dict[str, Union[bool, List[str]]]:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω storage_service, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ description_cid –≤ IPFS.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫.
    """
    errors = []
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        required_fields = ["id", "title", "organic_components", "categories", "cover_image", "forms", "species", "prices"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in required_fields:
            if field not in data:
                errors.append(f"{field}: –ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –æ—à–∏–±–∫–∏
        if any(field not in data for field in required_fields):
            return {
                "is_valid": False,
                "errors": errors
            }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data["title"], str):
            errors.append("title: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(data["cover_image"], str):
            errors.append("cover_image: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(data["forms"], list):
            errors.append("forms: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        if not isinstance(data["species"], str):
            errors.append("species: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not isinstance(data["categories"], list):
            errors.append("categories: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ organic_components
        if not isinstance(data["organic_components"], list):
            errors.append("organic_components: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–∫—Ä–æ–º–µ —Å–ø–∏—Å–∫–æ–≤ –∏ —Ü–µ–Ω)
        for field in required_fields:
            if field not in ["categories", "prices", "forms", "organic_components"]:
                # –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –∏ None
                if field in ["id", "title", "cover_image", "species"]:
                    if data[field] is None or (isinstance(data[field], str) and not data[field].strip()):
                        errors.append(f"{field}: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                elif not data[field]:
                    errors.append(f"{field}: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if len(data["title"]) > MAX_TITLE_LENGTH:
            errors.append(f"title: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ {MAX_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é CID)
        try:
            validate_organic_components(data["organic_components"])
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
            
        try:
            validate_cid(data["cover_image"], "cover_image")
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            validate_categories(data["categories"])
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º
        try:
            validate_forms(data["forms"])
        except ValidationError as e:
            errors.append(f"{e.field}: {e.error}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
        if not data["prices"]:
            errors.append("prices: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–Ω–∞")
        else:
            for i, price in enumerate(data["prices"]):
                try:
                    validate_price(price)
                except ValidationError as e:
                    errors.append(f"prices[{i}].{e.field}: {e.error}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è IPFS –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω storage_service
        if storage_service and "organic_components" in data:
            try:
                await validate_organic_components_with_ipfs(data["organic_components"], storage_service)
            except ValidationError as e:
                errors.append(f"{e.field}: {e.error}")

    except Exception as e:
        errors.append(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    return {
        "is_valid": len(errors) == 0,
        "errors": errors
    }

def sanitize_product_data(data: Dict) -> Dict:
    """
    –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.
    –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö.
    """
    sanitized = data.copy()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
    for field in ["id", "title", "species"]:
        if field in sanitized:
            sanitized[field] = str(sanitized[field]).strip()
    
    # –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º
    if "forms" in sanitized:
        sanitized["forms"] = [form.strip() for form in sanitized["forms"] if form.strip()]
    
    # –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if "categories" in sanitized:
        sanitized["categories"] = [cat.strip() for cat in sanitized["categories"]]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
    if "prices" in sanitized:
        for price in sanitized["prices"]:
            if "price" in price:
                price["price"] = str(Decimal(str(price["price"])))
            if "weight" in price:
                price["weight"] = str(Decimal(str(price["weight"])))
            if "volume" in price:
                price["volume"] = str(Decimal(str(price["volume"])))
    
    return sanitized 