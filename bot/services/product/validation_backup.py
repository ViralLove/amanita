from typing import Optional, Dict, Any, List, Union
import logging
import re
from services.product.validation_utils import (
    validate_product_data,
    sanitize_product_data,
    ValidationError
)

logger = logging.getLogger(__name__)

class ProductValidationService:
    """–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def validate_product_data(self, data: Dict) -> Dict[str, Union[bool, List[str]]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.
        –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞.
        """
        # –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        self.logger.info(f"üîç [ProductValidationService] –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: {data}")
        validation_result = validate_product_data(data)
        self.logger.info(f"üîç [ProductValidationService] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result}")
        if not validation_result["is_valid"]:
            return validation_result
            
        try:
            # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            sanitized_data = sanitize_product_data(data)
        except Exception as e:
            return {
                "is_valid": False,
                "errors": [f"–û—à–∏–±–∫–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"]
            }
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç.–¥.
        
        return {
            "is_valid": True,
            "errors": [],
            "sanitized_data": sanitized_data
        }
    
    async def validate_product_data_with_ipfs(self, data: Dict, storage_service) -> Dict[str, Union[bool, List[str]]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ IPFS.
        –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä–∫—É IPFS –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞.
        """
        # –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π IPFS
        self.logger.info(f"üîç [ProductValidationService] –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å IPFS: {data}")
        validation_result = await validate_product_data_with_ipfs(data, storage_service)
        self.logger.info(f"üîç [ProductValidationService] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å IPFS: {validation_result}")
        if not validation_result["is_valid"]:
            return validation_result
            
        try:
            # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            sanitized_data = sanitize_product_data(data)
        except Exception as e:
            return {
                "is_valid": False,
                "errors": [f"–û—à–∏–±–∫–∞ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"]
            }
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç.–¥.
        
        return {
            "is_valid": True,
            "errors": [],
            "sanitized_data": sanitized_data
        }
    
    async def validate_batch_products(self, products: List[Dict]) -> Dict[str, Union[bool, Dict]]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        """
        results = {}
        is_valid = True
        
        for product in products:
            product_id = product.get("id", "unknown")
            validation_result = await self.validate_product_data(product)
            results[product_id] = validation_result
            if not validation_result["is_valid"]:
                is_valid = False
        
        return {
            "is_valid": is_valid,
            "results": results
        }
    
    async def validate_product_update(self, old_data: Dict, new_data: Dict) -> Dict[str, Union[bool, List[str]]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        validation_result = await self.validate_product_data(new_data)
        if not validation_result["is_valid"]:
            return validation_result
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_data["id"] != new_data["id"]:
            return {
                "is_valid": False,
                "errors": ["id: –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"]
            }
        
        return validation_result
    
    def validate_title(self, title: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if not isinstance(title, str):
            return False
            
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        title = title.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(title) < 3 or len(title) > 100:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        if re.search(r'[<>&;]', title):
            return False
            
        return True
    
    def validate_organic_components(self, components: List[Dict]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if not isinstance(components, list):
            return False
            
        if not components:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        for component in components:
            if not isinstance(component, dict):
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["biounit_id", "description_cid", "proportion"]
            for field in required_fields:
                if field not in component:
                    return False
                if not component[field] or not str(component[field]).strip():
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            proportion = str(component["proportion"])
            proportion_pattern = r'^(\d+(?:\.\d+)?)(%|g|ml|kg|l|oz|lb|fl_oz)$'
            if not re.match(proportion_pattern, proportion):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å biounit_id
        biounit_ids = [comp["biounit_id"] for comp in components]
        if len(biounit_ids) != len(set(biounit_ids)):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        return self._validate_component_proportions(components)
    
    def _validate_component_proportions(self, components: List[Dict]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if not components:
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        first_proportion = str(components[0]["proportion"])
        proportion_type = None
        
        if first_proportion.endswith('%'):
            proportion_type = 'percentage'
        elif any(first_proportion.endswith(unit) for unit in ['g', 'kg', 'oz', 'lb']):
            proportion_type = 'weight'
        elif any(first_proportion.endswith(unit) for unit in ['ml', 'l', 'fl_oz']):
            proportion_type = 'volume'
        else:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø
        for component in components:
            proportion = str(component["proportion"])
            if proportion_type == 'percentage' and not proportion.endswith('%'):
                return False
            elif proportion_type == 'weight' and not any(proportion.endswith(unit) for unit in ['g', 'kg', 'oz', 'lb']):
                return False
            elif proportion_type == 'volume' and not any(proportion.endswith(unit) for unit in ['ml', 'l', 'fl_oz']):
                return False
        
        # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ = 100%
        if proportion_type == 'percentage':
            total_percentage = 0
            for component in components:
                proportion_value = float(str(component["proportion"]).rstrip('%'))
                total_percentage += proportion_value
            
            if abs(total_percentage - 100.0) > 0.01:  # –î–æ–ø—É—Å–∫ 0.01%
                return False
        
        # –î–ª—è –≤–µ—Å–æ–≤—ã—Ö/–æ–±—ä–µ–º–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ > 0
        elif proportion_type in ['weight', 'volume']:
            for component in components:
                proportion_value = float(str(component["proportion"])[:-2] if str(component["proportion"])[-2:].isalpha() else str(component["proportion"])[:-1])
                if proportion_value <= 0:
                    return False
        
        return True
    
    def validate_categories(self, categories: List[str]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if not isinstance(categories, list):
            return False
            
        for category in categories:
            if not isinstance(category, str):
                return False
                
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            category = category.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            if len(category) < 2 or len(category) > 50:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            if re.search(r'[<>&;]', category):
                return False
                
        return True
    
    def validate_attributes(self, attributes: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if not isinstance(attributes, dict):
            return False
            
        for key, value in attributes.items():
            if not isinstance(key, str):
                return False
                
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            key = key.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞
            if len(key) < 2 or len(key) > 50:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            if re.search(r'[<>&;]', key):
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if not isinstance(value, (str, int, float, bool)):
                return False
                
            if isinstance(value, str):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–Ω–∞—á–µ–Ω–∏—è
                if len(value) > 1000:
                    return False
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                if re.search(r'[<>&;]', value):
                    return False
                    
        return True 