from typing import Optional, Dict, Any
import logging
import aiohttp
import re
import asyncio
from bot.services.core.ipfs_factory import IPFSFactory
from bot.config import STORAGE_COMMUNICATION_TYPE

logger = logging.getLogger(__name__)

class ProductStorageService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏ (IPFS)"""
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ IPFS CID
    IPFS_CID_PATTERN = re.compile(r'^(Qm[1-9A-HJ-NP-Za-km-z]{44}|bafy[A-Za-z2-7]{55})$')
    
    def __init__(self, storage_provider=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ProductStorageService.
        
        Args:
            storage_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (IPFS/Arweave). 
                            –ï—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ IPFSFactory.
        """
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –µ—Å–ª–∏ storage_provider –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É
        if storage_provider is None:
            self.ipfs = IPFSFactory().get_storage()
        else:
            self.ipfs = storage_provider
            
        self.logger = logging.getLogger(__name__)
        self.communication_type = STORAGE_COMMUNICATION_TYPE
        self.logger.info(f"[ProductStorageService] –¢–∏–ø –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {self.communication_type}")
    
    def validate_ipfs_cid(self, cid: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IPFS CID"""
        if not cid:
            return False
        return bool(self.IPFS_CID_PATTERN.match(cid))
    
    def download_json(self, cid: str) -> Optional[Dict[str, Any]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON –∏–∑ IPFS.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç–∏–ø—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ —Ä–µ–∂–∏–º—É –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.
        """
        try:
            if not self.validate_ipfs_cid(cid):
                self.logger.warning(f"Invalid CID format: {cid}")
                return None
            
            self.logger.debug(f"[ProductStorageService] –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–ª—è CID: {cid}, —Ç–∏–ø –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {self.communication_type}")
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            has_async = hasattr(self.ipfs, 'download_json_async')
            has_sync = hasattr(self.ipfs, 'download_json')
            
            self.logger.debug(f"[ProductStorageService] –ü—Ä–æ–≤–∞–π–¥–µ—Ä {type(self.ipfs)}: async={has_async}, sync={has_sync}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            if self.communication_type == "sync":
                # üîß –°–ò–ù–•–†–û–ù–ù–´–ô –†–ï–ñ–ò–ú: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è Pinata, –º–æ–∫–æ–≤
                if has_sync:
                    self.logger.debug(f"[ProductStorageService] Sync mode: –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ download_json –¥–ª—è CID: {cid}")
                    result = self.ipfs.download_json(cid)
                    self.logger.debug(f"[ProductStorageService] Sync mode: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                    return result
                else:
                    # Fallback –¥–ª—è async –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ sync —Ä–µ–∂–∏–º–µ
                    self.logger.debug(f"[ProductStorageService] Sync mode: fallback –Ω–∞ async —á–µ—Ä–µ–∑ asyncio.run –¥–ª—è CID: {cid}")
                    try:
                        result = asyncio.run(self.ipfs.download_json_async(cid))
                        self.logger.debug(f"[ProductStorageService] Sync mode fallback: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                        return result
                    except Exception as e:
                        self.logger.error(f"Sync mode fallback failed: {e}")
                        return None
                    
            elif self.communication_type == "async":
                # üîß –ê–°–ò–ù–•–†–û–ù–ù–´–ô –†–ï–ñ–ò–ú: –ß–µ—Ä–µ–∑ asyncio.run –¥–ª—è Arweave
                if has_async:
                    self.logger.debug(f"[ProductStorageService] Async mode: –∏—Å–ø–æ–ª—å–∑—É–µ–º download_json_async —á–µ—Ä–µ–∑ asyncio.run –¥–ª—è CID: {cid}")
                    try:
                        result = asyncio.run(self.ipfs.download_json_async(cid))
                        self.logger.debug(f"[ProductStorageService] Async mode: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                        return result
                    except Exception as e:
                        self.logger.error(f"Async mode failed: {e}")
                        return None
                elif has_sync:
                    # Fallback: sync –º–µ—Ç–æ–¥ –Ω–∞–ø—Ä—è–º—É—é
                    self.logger.debug(f"[ProductStorageService] Async mode: fallback –Ω–∞ sync –º–µ—Ç–æ–¥ –¥–ª—è CID: {cid}")
                    result = self.ipfs.download_json(cid)
                    self.logger.debug(f"[ProductStorageService] Async mode fallback: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                    return result
                else:
                    self.logger.error(f"IPFS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç download_json –º–µ—Ç–æ–¥—ã: {type(self.ipfs)}")
                    return None
                    
            elif self.communication_type == "hybrid":
                # üîß –ì–ò–ë–†–ò–î–ù–´–ô –†–ï–ñ–ò–ú: –°–Ω–∞—á–∞–ª–∞ async —á–µ—Ä–µ–∑ asyncio.run, –ø–æ—Ç–æ–º sync
                if has_async:
                    self.logger.debug(f"[ProductStorageService] Hybrid mode: –ø—Ä–æ–±—É–µ–º async –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ asyncio.run –¥–ª—è CID: {cid}")
                    try:
                        result = asyncio.run(self.ipfs.download_json_async(cid))
                        self.logger.debug(f"[ProductStorageService] Hybrid mode: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                        return result
                    except Exception as e:
                        self.logger.warning(f"Hybrid mode async failed, falling back to sync: {e}")
                        if has_sync:
                            result = self.ipfs.download_json(cid)
                            self.logger.debug(f"[ProductStorageService] Hybrid mode fallback: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                            return result
                        else:
                            self.logger.error(f"Hybrid mode: no fallback available")
                            return None
                elif has_sync:
                    self.logger.debug(f"[ProductStorageService] Hybrid mode: –∏—Å–ø–æ–ª—å–∑—É–µ–º sync –º–µ—Ç–æ–¥ –¥–ª—è CID: {cid}")
                    result = self.ipfs.download_json(cid)
                    self.logger.debug(f"[ProductStorageService] Hybrid mode: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {type(result)}")
                    return result
                else:
                    self.logger.error(f"IPFS –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç download_json –º–µ—Ç–æ–¥—ã: {type(self.ipfs)}")
                    return None
            else:
                self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {self.communication_type}")
                return None
                
        except Exception as e:
            self.logger.error(f"Error downloading JSON from IPFS: {e}")
            return None
    
    async def download_file(self, cid: str) -> Optional[bytes]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ IPFS"""
        try:
            if not self.validate_ipfs_cid(cid):
                self.logger.warning(f"Invalid CID format: {cid}")
                return None
                
            return await self.ipfs.download_file(cid)
            
        except Exception as e:
            self.logger.error(f"Error downloading file from IPFS: {e}")
            return None
    
    def upload_media_file(self, file_path: str) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ Arweave"""
        try:
            return self.ipfs.upload_file(file_path)
        except Exception as e:
            self.logger.error(f"Error uploading file to IPFS: {e}")
            return None
    
    def upload_json(self, data: Dict[str, Any]) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –≤ IPFS"""
        try:
            return self.ipfs.upload_json(data)
        except Exception as e:
            self.logger.error(f"Error uploading JSON to IPFS: {e}")
            return None
    
    def get_gateway_url(self, cid: str, gateway: str = "ipfs") -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ gateway"""
        if not self.validate_ipfs_cid(cid):
            return None
            
        if gateway == "ipfs":
            return f"https://ipfs.io/ipfs/{cid}"
        elif gateway == "arweave":
            return f"https://arweave.net/{cid}"
        return None 