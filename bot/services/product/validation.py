from typing import Optional, Dict, Any, List, Union
import logging
import re
from bot.validation import ValidationFactory, ValidationResult

logger = logging.getLogger(__name__)

class ProductValidationService:
    """–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def validate_product_data(self, data: Dict, storage_service=None) -> ValidationResult:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞.
        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω storage_service, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ description_cid –≤ IPFS.
        –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞.
        """
        self.logger.info(f"üîç [ProductValidationService] –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: {data}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validator = ValidationFactory.get_product_validator()
        validation_result = validator.validate(data)
        
        self.logger.info(f"üîç [ProductValidationService] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result}")
        
        # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not validation_result.is_valid:
            return validation_result
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è IPFS –≤–∞–ª–∏–¥–∞—Ü–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω storage_service
        if storage_service and "organic_components" in data:
            ipfs_result = await self._validate_with_ipfs(data, storage_service)
            if not ipfs_result.is_valid:
                return ipfs_result
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç.–¥.
        
        return validation_result
    
    async def _validate_with_ipfs(self, data: Dict, storage_service) -> ValidationResult:
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IPFS storage_service.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ CID –≤ IPFS.
        """
        try:
            if "organic_components" in data:
                for component in data["organic_components"]:
                    if "description_cid" in component:
                        cid = component["description_cid"]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ CID –≤ IPFS
                        if not storage_service.is_valid_cid(cid):
                            return ValidationResult.failure(
                                f"CID {cid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ IPFS",
                                field_name="description_cid",
                                field_value=cid,
                                error_code="INVALID_IPFS_CID"
                            )
            
            if "cover_image" in data:
                cover_cid = data["cover_image"]
                if not storage_service.is_valid_cid(cover_cid):
                    return ValidationResult.failure(
                        f"CID {cover_cid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ IPFS",
                        field_name="cover_image",
                        field_value=cover_cid,
                        error_code="INVALID_IPFS_CID"
                    )
            
            return ValidationResult.success()
            
        except Exception as e:
            return ValidationResult.failure(
                f"–û—à–∏–±–∫–∞ IPFS –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                field_name="ipfs_validation",
                error_code="IPFS_VALIDATION_ERROR"
            )
    
    async def validate_batch_products(self, products: List[Dict], storage_service=None) -> Dict[str, Union[bool, Dict]]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        """
        results = {}
        is_valid = True
        
        for product in products:
            product_id = product.get("id", "unknown")
            validation_result = await self.validate_product_data(product, storage_service)
            results[product_id] = validation_result
            if not validation_result.is_valid:
                is_valid = False
        
        return {
            "is_valid": is_valid,
            "results": results
        }
    
    async def validate_product_update(self, old_data: Dict, new_data: Dict, storage_service=None) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        validation_result = await self.validate_product_data(new_data, storage_service)
        if not validation_result.is_valid:
            return validation_result
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if old_data["id"] != new_data["id"]:
            return ValidationResult.failure(
                "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞",
                field_name="id",
                field_value=new_data["id"],
                error_code="ID_CHANGE_NOT_ALLOWED"
            )
        
        return validation_result 