"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
"""

import logging
from typing import Dict, Any, Optional, Callable
from aiogram.types import CallbackQuery, Message
from bot.services.common.localization import Localization

logger = logging.getLogger(__name__)


class ErrorHandlingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.logger = logging.getLogger(__name__)
        self.error_counts: Dict[str, int] = {}
        self.fallback_strategies: Dict[str, Callable] = {}
        self.logger.info("[ErrorHandlingService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_catalog_error(self, error: Exception, callback: CallbackQuery, 
                                 loc: Localization, context: str = "") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            callback: Callback –∑–∞–ø—Ä–æ—Å
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            error_key = f"catalog_{context}"
            self._increment_error_count(error_key)
            
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ ({context}): {error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            error_message = self._get_catalog_error_message(error, loc)
            
            await callback.message.answer(error_message)
            await callback.answer()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if error_key in self.fallback_strategies:
                await self.fallback_strategies[error_key](callback, loc)
            
            return True
            
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return False
    
    async def handle_product_error(self, error: Exception, callback: CallbackQuery, 
                                 loc: Localization, product_id: str = "") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            callback: Callback –∑–∞–ø—Ä–æ—Å
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            error_key = f"product_{product_id}"
            self._increment_error_count(error_key)
            
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ({product_id}): {error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            error_message = self._get_product_error_message(error, loc, product_id)
            
            await callback.message.answer(error_message)
            await callback.answer()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if error_key in self.fallback_strategies:
                await self.fallback_strategies[error_key](callback, loc)
            
            return True
            
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return False
    
    async def handle_image_error(self, error: Exception, callback: CallbackQuery, 
                               loc: Localization, image_url: str = "") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            callback: Callback –∑–∞–ø—Ä–æ—Å
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            error_key = f"image_{hash(image_url) if image_url else 'unknown'}"
            self._increment_error_count(error_key)
            
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({image_url}): {error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            error_message = self._get_image_error_message(error, loc)
            
            await callback.message.answer(error_message)
            await callback.answer()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if error_key in self.fallback_strategies:
                await self.fallback_strategies[error_key](callback, loc)
            
            return True
            
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _get_catalog_error_message(self, error: Exception, loc: Localization) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            error_type = type(error).__name__
            
            if "timeout" in str(error).lower():
                return loc.t('catalog.error.timeout', '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            elif "connection" in str(error).lower():
                return loc.t('catalog.error.connection', 'üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.')
            elif "not found" in str(error).lower():
                return loc.t('catalog.error.not_found', 'üì≠ –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            else:
                return loc.t('catalog.error.general', '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
                
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"
    
    def _get_product_error_message(self, error: Exception, loc: Localization, product_id: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            error_type = type(error).__name__
            
            if "not found" in str(error).lower():
                return loc.t('product.error.not_found', f'üì≠ –ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            elif "timeout" in str(error).lower():
                return loc.t('product.error.timeout', '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            elif "connection" in str(error).lower():
                return loc.t('product.error.connection', 'üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.')
            else:
                return loc.t('product.error.general', f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}.')
                
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}"
    
    def _get_image_error_message(self, error: Exception, loc: Localization) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            error_type = type(error).__name__
            
            if "timeout" in str(error).lower():
                return loc.t('image.error.timeout', '‚è∞ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.')
            elif "connection" in str(error).lower():
                return loc.t('image.error.connection', 'üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
            elif "not found" in str(error).lower():
                return loc.t('image.error.not_found', 'üì≠ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            else:
                return loc.t('image.error.general', '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
                
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    def _increment_error_count(self, error_key: str) -> None:
        """
        –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        
        Args:
            error_key: –ö–ª—é—á –æ—à–∏–±–∫–∏
        """
        try:
            self.error_counts[error_key] = self.error_counts.get(error_key, 0) + 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
            if self.error_counts[error_key] > 5:
                self.logger.warning(f"[ErrorHandlingService] –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: {error_key} ({self.error_counts[error_key]} —Ä–∞–∑)")
                
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫: {e}")
    
    def register_fallback_strategy(self, error_key: str, strategy: Callable) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ—à–∏–±–∫–∏
        
        Args:
            error_key: –ö–ª—é—á –æ—à–∏–±–∫–∏
            strategy: –§—É–Ω–∫—Ü–∏—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            self.fallback_strategies[error_key] = strategy
            self.logger.info(f"[ErrorHandlingService] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è: {error_key}")
            
        except Exception as e:
            self.logger.error(f"[ErrorHandlingService] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
    
    def get_error_statistics(self) -> Dict[str, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        
        Returns:
            Dict[str, int]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
        """
        return self.error_counts.copy()
    
    def clear_error_statistics(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        self.error_counts.clear()
        self.logger.info("[ErrorHandlingService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω–∞")
