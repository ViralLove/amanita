"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

import logging
from typing import List, Any
from aiogram.types import CallbackQuery
from bot.services.common.localization import Localization
from bot.services.product.registry_singleton import product_registry_service
from .image_service import ImageService
# –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ ItemY 5.2 –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ DI
# from bot.handlers.dependencies import get_product_formatter_service

logger = logging.getLogger(__name__)


class CatalogService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    
    def __init__(self, image_service: ImageService = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        
        Args:
            image_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        self.image_service = image_service or ImageService()
        # Formatter service –±—É–¥–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ DI –≤ ItemY 5.2
        self.formatter_service = None
        self.logger = logging.getLogger(__name__)
    
    async def get_catalog_with_progress(self) -> List[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Returns:
            List[Any]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        """
        try:
            self.logger.info("[CatalogService] –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            products = await product_registry_service.get_all_products()
            
            if not products:
                self.logger.info("[CatalogService] –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
                return []
            
            self.logger.info(f"[CatalogService] –ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return products
            
        except Exception as e:
            self.logger.error(f"[CatalogService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return []
    
    def _validate_product(self, product: Any) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        
        Args:
            product: –ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['id', 'name', 'description']
            for field in required_fields:
                if not hasattr(product, field) or not getattr(product, field):
                    return False
            return True
        except Exception as e:
            self.logger.error(f"[CatalogService] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return False
    
    async def send_catalog_to_user(self, callback: CallbackQuery, products: List[Any], loc: Localization) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            products: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            if not products:
                await callback.message.answer(loc.t("catalog.empty"))
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            progress_message = await callback.message.answer(
                f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: 0/{len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n\n"
                f"üîç <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b> #catalog"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, product in enumerate(products):
                try:
                    await self._send_single_product(callback, product, loc)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    await progress_message.edit_text(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: {i+1}/{len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                    if i < len(products) - 1:
                        await callback.message.answer("‚òÄÔ∏è" * 8)
                        
                except Exception as e:
                    self.logger.error(f"[CatalogService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}: {e}")
                    continue
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await progress_message.delete()
            await callback.message.answer(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
            
            self.logger.info(f"[CatalogService] –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"[CatalogService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            await callback.message.answer(loc.t("catalog.error"))
            raise
    
    async def _send_single_product(self, callback: CallbackQuery, product: Any, loc: Localization) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product: –ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                formatted_sections = self.formatter_service.format_product_for_telegram(product, loc)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç
                product_text = (
                    formatted_sections['main_info'] +
                    formatted_sections['composition'] +
                    formatted_sections['pricing'] +
                    formatted_sections['details']
                )
            except Exception as e:
                self.logger.error(f"[CatalogService] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}: {e}")
                # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                product_text = f"üè∑Ô∏è <b>{getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')}</b>\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
            original_length = len(product_text)
            product_text = self.formatter_service._truncate_text(product_text)
            final_length = len(product_text)
            
            if original_length != final_length:
                self.logger.info(f"[CatalogService] –¢–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')} –æ–±—Ä–µ–∑–∞–Ω: {original_length} -> {final_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ ImageService
            await self.image_service.send_product_with_image(
                callback=callback,
                product=product,
                product_text=product_text,
                loc=loc
            )
            
        except Exception as e:
            self.logger.error(f"[CatalogService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            raise
