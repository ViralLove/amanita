"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.
–°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
"""

import logging
from typing import Optional, Any
from aiogram.types import CallbackQuery
from services.common.localization import Localization
from services.product.registry_singleton import product_registry_service
from .image_service import ImageService
# –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ ItemY 5.2 –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ DI
# from bot.handlers.dependencies import get_product_formatter_service

logger = logging.getLogger(__name__)


class ProductService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
    
    def __init__(self, image_service: ImageService = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        
        Args:
            image_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        self.image_service = image_service or ImageService()
        # Formatter service –±—É–¥–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ DI –≤ ItemY 5.2
        self.formatter_service = None
        self.logger = logging.getLogger(__name__)
    
    async def get_product_by_id(self, product_id: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
        
        Args:
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            Optional[Any]: –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ None
        """
        try:
            self.logger.info(f"[ProductService] –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {product_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—â–µ–º –ø–æ ID
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ get_product_by_id –≤ ProductRegistryService
            products = await product_registry_service.get_all_products()
            
            for product in products:
                if (getattr(product, 'id', None) == product_id or 
                    getattr(product, 'business_id', None) == product_id):
                    self.logger.info(f"[ProductService] –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product.title}")
                    return product
            
            self.logger.error(f"[ProductService] –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        except Exception as e:
            self.logger.error(f"[ProductService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            return None
    
    def _validate_product_id(self, product_id: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç ID –ø—Ä–æ–¥—É–∫—Ç–∞
        
        Args:
            product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ ID –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            if not product_id or not isinstance(product_id, str):
                return False
            if len(product_id.strip()) == 0:
                return False
            return True
        except Exception as e:
            self.logger.error(f"[ProductService] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return False
    
    async def send_product_details(self, callback: CallbackQuery, product: Any, loc: Localization) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product: –ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            self.logger.info(f"[ProductService] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞: {product.title}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            try:
                # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è caption (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 1024 —Å–∏–º–≤–æ–ª–æ–≤)
                main_info_text = self.formatter_service.format_product_main_info_for_telegram(product, loc)
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª–∏–Ω—ã, –±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
                description_text = self.formatter_service.format_product_description_for_telegram(product, loc)
                
                self.logger.info(f"[ProductService] –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {len(main_info_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                self.logger.info(f"[ProductService] –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(description_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            except Exception as e:
                self.logger.error(f"[ProductService] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}: {e}")
                # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                main_info_text = f"üè∑Ô∏è <b>{getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')}</b>\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                description_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ ImageService
            await self.image_service.send_product_details_with_image(
                callback=callback,
                product=product,
                main_info_text=main_info_text,
                description_text=description_text,
                loc=loc
            )
            
            self.logger.info(f"[ProductService] –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}")
            
        except Exception as e:
            self.logger.error(f"[ProductService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            raise
