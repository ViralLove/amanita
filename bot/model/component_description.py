from typing import Dict, Optional, List
from dataclasses import dataclass
from .dosage_instruction import DosageInstruction
from ..validation import ValidationFactory, ValidationResult


@dataclass
class ComponentDescription:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    Attributes:
        generic_description (str): –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        effects (Optional[str]): –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        shamanic (Optional[str]): –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        warnings (Optional[str]): –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        dosage_instructions (Optional[List[DosageInstruction]]): –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ
        features (Optional[List[str]]): –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    """
    generic_description: str
    effects: Optional[str] = None
    shamanic: Optional[str] = None
    warnings: Optional[str] = None
    dosage_instructions: Optional[List[DosageInstruction]] = None
    features: Optional[List[str]] = None

    def __post_init__(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ dataclass.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ ValidationFactory.
        
        Raises:
            ValueError: –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
        """
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f"üîç ComponentDescription.__post_init__: –Ω–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: generic_description='{self.generic_description[:50]}...', effects={bool(self.effects)}, shamanic={bool(self.shamanic)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è generic_description
        if not self.generic_description or not self.generic_description.strip():
            raise ValueError("generic_description –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã generic_description (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(self.generic_description) < 10:
            raise ValueError(f"generic_description —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(self.generic_description)} —Å–∏–º–≤–æ–ª–æ–≤. –ú–∏–Ω–∏–º—É–º: 10")
        if len(self.generic_description) > 1000:
            raise ValueError(f"generic_description —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(self.generic_description)} —Å–∏–º–≤–æ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º: 1000")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è dosage_instructions –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if self.dosage_instructions is not None:
            if not isinstance(self.dosage_instructions, list):
                raise ValueError("dosage_instructions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            for i, instruction in enumerate(self.dosage_instructions):
                if not isinstance(instruction, DosageInstruction):
                    raise ValueError(f"dosage_instructions[{i}] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º DosageInstruction")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è features –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if self.features is not None:
            if not isinstance(self.features, list):
                raise ValueError("features –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            for i, feature in enumerate(self.features):
                if not isinstance(feature, str) or not feature.strip():
                    raise ValueError(f"features[{i}] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
        
        logger.info(f"‚úÖ ComponentDescription –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

    @classmethod
    def from_dict(cls, data: dict) -> "ComponentDescription":
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç ComponentDescription –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            ComponentDescription: –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            
        Raises:
            ValueError: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f"üîç ComponentDescription.from_dict: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
        logger.info(f"üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {list(data.keys()) if isinstance(data, dict) else type(data)}")
        
        if not isinstance(data, dict):
            raise ValueError("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        if 'generic_description' not in data:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'generic_description'")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        dosage_instructions = None
        if 'dosage_instructions' in data and data['dosage_instructions']:
            if not isinstance(data['dosage_instructions'], list):
                raise ValueError("dosage_instructions –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            try:
                dosage_instructions = [
                    DosageInstruction.from_dict(instruction)
                    for instruction in data['dosage_instructions']
                ]
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(dosage_instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ: {e}")
                raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è dosage_instructions: {e}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º features –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        features = None
        if 'features' in data and data['features']:
            if not isinstance(data['features'], list):
                raise ValueError("features –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            features = [str(feature).strip() for feature in data['features'] if feature]
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(features)} –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π")
        
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–µ–º ComponentDescription –æ–±—ä–µ–∫—Ç...")
        description = cls(
            generic_description=str(data['generic_description']).strip(),
            effects=data.get('effects'),
            shamanic=data.get('shamanic'),
            warnings=data.get('warnings'),
            dosage_instructions=dosage_instructions,
            features=features
        )
        
        logger.info(f"‚úÖ ComponentDescription –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: generic_description='{description.generic_description[:50]}...'")
        return description

    def to_dict(self) -> Dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        result = {
            'generic_description': self.generic_description,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ None
        if self.effects is not None:
            result['effects'] = self.effects
        if self.shamanic is not None:
            result['shamanic'] = self.shamanic
        if self.warnings is not None:
            result['warnings'] = self.warnings
        if self.dosage_instructions is not None:
            result['dosage_instructions'] = [
                instruction.to_dict() for instruction in self.dosage_instructions
            ]
        if self.features is not None:
            result['features'] = self.features
        
        return result

    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        return f"ComponentDescription(generic_description='{self.generic_description[:30]}...')"

    def __eq__(self, other) -> bool:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        if not isinstance(other, ComponentDescription):
            return False
        
        return (
            self.generic_description == other.generic_description and
            self.effects == other.effects and
            self.shamanic == other.shamanic and
            self.warnings == other.warnings and
            self.dosage_instructions == other.dosage_instructions and
            self.features == other.features
        )

    def __hash__(self) -> int:
        """–•–µ—à –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö"""
        return hash((
            self.generic_description,
            self.effects,
            self.shamanic,
            self.warnings,
            tuple(self.dosage_instructions) if self.dosage_instructions else None,
            tuple(self.features) if self.features else None
        ))
