from typing import Dict, Optional
from dataclasses import dataclass
import re
from validation import ValidationFactory, ValidationResult
from .component_description import ComponentDescription


@dataclass
class OrganicComponent:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –º–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.
    
    Attributes:
        biounit_id (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –µ–¥–∏–Ω–∏—Ü—ã
        description_cid (str): CID –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–æ–µ–¥–∏–Ω–∏—Ü—ã –≤ IPFS
        proportion (str): –ü—Ä–æ–ø–æ—Ä—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "50%", "100g", "30ml")
        description (Optional[ComponentDescription]): –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    """
    biounit_id: str
    description_cid: str
    proportion: str
    description: Optional[ComponentDescription] = None

    def __post_init__(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ dataclass.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ ValidationFactory.
        
        Raises:
            ValueError: –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
        """
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f"üîç OrganicComponent.__post_init__: –Ω–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: biounit_id='{self.biounit_id}', description_cid='{self.description_cid}', proportion='{self.proportion}', description={self.description is not None}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
        logger.info("üîß –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∏–∑ ValidationFactory...")
        cid_validator = ValidationFactory.get_cid_validator()
        proportion_validator = ValidationFactory.get_proportion_validator()
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã: CID={type(cid_validator).__name__}, Proportion={type(proportion_validator).__name__}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è biounit_id
        logger.info(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º biounit_id: '{self.biounit_id}'")
        if not self.biounit_id or not self.biounit_id.strip():
            raise ValueError("biounit_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ biounit_id (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        biounit_pattern = r'^[a-zA-Z0-9_]+$'
        if not re.match(biounit_pattern, self.biounit_id):
            raise ValueError(f"biounit_id '{self.biounit_id}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã biounit_id (–æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(self.biounit_id) > 50:
            raise ValueError(f"biounit_id '{self.biounit_id}' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 50 —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"‚úÖ biounit_id –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è description_cid —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–¥–∏–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        logger.info(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º description_cid: '{self.description_cid}'")
        logger.info(f"üîß –í—ã–∑—ã–≤–∞–µ–º cid_validator.validate('{self.description_cid}')...")
        cid_result = cid_validator.validate(self.description_cid)
        logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CID: {cid_result}")
        if not cid_result.is_valid:
            logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è description_cid –Ω–µ –ø—Ä–æ—à–ª–∞: {cid_result.error_message}")
            raise ValueError(f"description_cid: {cid_result.error_message}")
        logger.info(f"‚úÖ description_cid –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è proportion —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–¥–∏–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        logger.info(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º proportion: '{self.proportion}'")
        proportion_result = proportion_validator.validate(self.proportion)
        if not proportion_result.is_valid:
            raise ValueError(f"proportion: {proportion_result.error_message}")
        logger.info(f"‚úÖ proportion –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # üîß –í–ê–õ–ò–î–ê–¶–ò–Ø DESCRIPTION: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ description
        if self.description is not None:
            logger.info(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º description: {type(self.description).__name__}")
            if not isinstance(self.description, ComponentDescription):
                raise ValueError(f"description –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º ComponentDescription, –ø–æ–ª—É—á–µ–Ω: {type(self.description).__name__}")
            logger.info(f"‚úÖ description –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.info(f"üìã description –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (None) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        logger.info(f"üéâ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    def validate_proportion(self) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –µ–¥–∏–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            proportion_validator = ValidationFactory.get_proportion_validator()
            result = proportion_validator.validate(self.proportion)
            return result.is_valid
        except Exception:
            return False

    def get_proportion_value(self) -> float:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.
        
        Returns:
            float: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        match = re.match(r'^(\d+(?:\.\d+)?)', self.proportion)
        if not match:
            raise ValueError(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: {self.proportion}")
        
        return float(match.group(1))

    def get_proportion_unit(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏.
        
        Returns:
            str: –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (%, g, ml, kg, l, oz, lb, fl_oz)
            
        Raises:
            ValueError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        """
        match = re.match(r'^(\d+(?:\.\d+)?)(%|g|ml|kg|l|oz|lb|fl_oz)$', self.proportion)
        if not match:
            raise ValueError(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: {self.proportion}")
        
        return match.group(2)

    def is_percentage(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return self.proportion.endswith('%')

    def is_weight_based(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –≤–µ—Å–æ–≤–æ–π.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –≤–µ—Å–æ–≤–∞—è, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        weight_units = ['g', 'kg', 'oz', 'lb']
        return any(self.proportion.endswith(unit) for unit in weight_units)

    def is_volume_based(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –æ–±—ä–µ–º–Ω–æ–π.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –æ–±—ä–µ–º–Ω–∞—è, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        volume_units = ['ml', 'l', 'fl_oz']
        return any(self.proportion.endswith(unit) for unit in volume_units)

    @classmethod
    def from_dict(cls, data: dict) -> "OrganicComponent":
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç OrganicComponent –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            OrganicComponent: –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            
        Raises:
            ValueError: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f"üîç OrganicComponent.from_dict: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
        logger.info(f"üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        if not isinstance(data, dict):
            raise ValueError("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['biounit_id', 'description_cid', 'proportion']
        for field in required_fields:
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            logger.info(f"  ‚úÖ –ü–æ–ª–µ '{field}' = '{data[field]}'")
        
        # üîß –°–û–ó–î–ê–ù–ò–ï COMPONENTDESCRIPTION: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è description
        description = None
        
        if 'description' in data and data['description'] is not None:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'description': {type(data['description'])}")
            
            if isinstance(data['description'], ComponentDescription):
                # –£–∂–µ –≥–æ—Ç–æ–≤—ã–π ComponentDescription –æ–±—ä–µ–∫—Ç
                description = data['description']
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π ComponentDescription –æ–±—ä–µ–∫—Ç")
            elif isinstance(data['description'], dict):
                # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è
                try:
                    description = ComponentDescription.from_dict(data['description'])
                    logger.info(f"‚úÖ ComponentDescription —Å–æ–∑–¥–∞–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ComponentDescription –∏–∑ —Å–ª–æ–≤–∞—Ä—è: {e}")
                    description = None
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ 'description' –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(data['description'])}")
                description = None
        else:
            # üîß –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
            description_fields = ['generic_description', 'effects', 'shamanic', 'warnings', 'dosage_instructions', 'features']
            has_description_data = any(field in data for field in description_fields)
            
            if has_description_data:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏—è: {[field for field in description_fields if field in data]}")
                try:
                    # –°–æ–∑–¥–∞–µ–º ComponentDescription –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
                    description_data = {field: data[field] for field in description_fields if field in data}
                    description = ComponentDescription.from_dict(description_data)
                    logger.info(f"‚úÖ ComponentDescription —Å–æ–∑–¥–∞–Ω –∏–∑ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ComponentDescription –∏–∑ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π: {e}")
                    description = None
            else:
                logger.info(f"üìã –ü–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, description –æ—Å—Ç–∞–µ—Ç—Å—è None")
        
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–µ–º OrganicComponent –æ–±—ä–µ–∫—Ç...")
        component = cls(
            biounit_id=str(data['biounit_id']).strip(),
            description_cid=str(data['description_cid']).strip(),
            proportion=str(data['proportion']).strip(),
            description=description  # üîß –ù–û–í–û–ï –ü–û–õ–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        )
        logger.info(f"‚úÖ OrganicComponent –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: biounit_id='{component.biounit_id}', description_cid='{component.description_cid}', proportion='{component.proportion}', description={component.description is not None}")
        
        return component

    def to_dict(self) -> Dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        result = {
            "biounit_id": self.biounit_id,
            "description_cid": self.description_cid,
            "proportion": self.proportion
        }
        
        # üîß –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ü–ò–°–ê–ù–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º description –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if self.description is not None:
            description_dict = self.description.to_dict()
            result.update(description_dict)
        
        return result

    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        description_info = f", description={self.description is not None}" if self.description is not None else ""
        return f"OrganicComponent(biounit_id='{self.biounit_id}', proportion='{self.proportion}'{description_info})"

    def __eq__(self, other) -> bool:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
        if not isinstance(other, OrganicComponent):
            return False
        
        return (
            self.biounit_id == other.biounit_id and
            self.description_cid == other.description_cid and
            self.proportion == other.proportion and
            self.description == other.description
        )

    def __hash__(self) -> int:
        """–•–µ—à –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö"""
        return hash((self.biounit_id, self.description_cid, self.proportion, self.description))
