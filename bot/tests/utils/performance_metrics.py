import time
import psutil
import functools
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass, field
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class PerformanceMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    test_name: str
    start_time: float = field(default_factory=time.perf_counter)
    end_time: Optional[float] = None
    memory_before: Optional[int] = None
    memory_after: Optional[int] = None
    memory_peak: Optional[int] = None
    cpu_percent: Optional[float] = None
    
    def __post_init__(self):
        self.memory_before = psutil.Process().memory_info().rss
    
    def finish(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        self.end_time = time.perf_counter()
        self.memory_after = psutil.Process().memory_info().rss
        self.memory_peak = psutil.Process().memory_info().rss  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        self.cpu_percent = psutil.Process().cpu_percent()
    
    @property
    def execution_time(self) -> float:
        """–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.end_time is None:
            return time.perf_counter() - self.start_time
        return self.end_time - self.start_time
    
    @property
    def memory_usage(self) -> int:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        if self.memory_after is None:
            return psutil.Process().memory_info().rss - self.memory_before
        return self.memory_after - self.memory_before
    
    @property
    def memory_usage_mb(self) -> float:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        return self.memory_usage / 1024 / 1024
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "test_name": self.test_name,
            "execution_time_seconds": round(self.execution_time, 3),
            "memory_usage_mb": round(self.memory_usage_mb, 2),
            "memory_peak_mb": round(self.memory_peak / 1024 / 1024, 2) if self.memory_peak else None,
            "cpu_percent": round(self.cpu_percent, 1) if self.cpu_percent else None,
            "timestamp": datetime.now().isoformat()
        }
    
    def log_metrics(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ"""
        metrics_dict = self.to_dict()
        logger.info(f"üìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: {self.test_name}")
        logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics_dict['execution_time_seconds']} —Å–µ–∫")
        logger.info(f"   üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics_dict['memory_usage_mb']} –ú–ë")
        if metrics_dict['memory_peak_mb']:
            logger.info(f"   üìà –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics_dict['memory_peak_mb']} –ú–ë")
        if metrics_dict['cpu_percent']:
            logger.info(f"   üñ•Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {metrics_dict['cpu_percent']}%")

def measure_performance(test_name: Optional[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
    
    Args:
        test_name: –ò–º—è —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏)
    """
    def decorator(func):
        @functools.wraps(func)
        async def async_wrapper(*args, **kwargs):
            name = test_name or func.__name__
            metrics = PerformanceMetrics(name)
            
            try:
                logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {name}")
                result = await func(*args, **kwargs)
                return result
            finally:
                metrics.finish()
                metrics.log_metrics()
        
        @functools.wraps(func)
        def sync_wrapper(*args, **kwargs):
            name = test_name or func.__name__
            metrics = PerformanceMetrics(name)
            
            try:
                logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {name}")
                result = func(*args, **kwargs)
                return result
            finally:
                metrics.finish()
                metrics.log_metrics()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±–µ—Ä—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        if hasattr(func, '__code__') and func.__code__.co_flags & 0x80:  # CO_COROUTINE
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator

def measure_fixture_performance(fixture_name: Optional[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å—Ç—É—Ä
    
    Args:
        fixture_name: –ò–º—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func):
        @functools.wraps(func)
        async def async_wrapper(*args, **kwargs):
            name = fixture_name or func.__name__
            metrics = PerformanceMetrics(f"fixture_{name}")
            
            try:
                logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {name}")
                result = await func(*args, **kwargs)
                return result
            finally:
                metrics.finish()
                metrics.log_metrics()
        
        @functools.wraps(func)
        def sync_wrapper(*args, **kwargs):
            name = fixture_name or func.__name__
            metrics = PerformanceMetrics(f"fixture_{name}")
            
            try:
                logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {name}")
                result = func(*args, **kwargs)
                return result
            finally:
                metrics.finish()
                metrics.log_metrics()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±–µ—Ä—Ç–∫—É
        if hasattr(func, '__code__') and func.__code__.co_flags & 0x80:  # CO_COROUTINE
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator

class PerformanceCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.metrics: list[PerformanceMetrics] = []
    
    def add_metrics(self, metrics: PerformanceMetrics):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä"""
        self.metrics.append(metrics)
    
    def get_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º"""
        if not self.metrics:
            return {}
        
        execution_times = [m.execution_time for m in self.metrics]
        memory_usages = [m.memory_usage_mb for m in self.metrics]
        
        return {
            "total_tests": len(self.metrics),
            "avg_execution_time": round(sum(execution_times) / len(execution_times), 3),
            "min_execution_time": round(min(execution_times), 3),
            "max_execution_time": round(max(execution_times), 3),
            "avg_memory_usage": round(sum(memory_usages) / len(memory_usages), 2),
            "min_memory_usage": round(min(memory_usages), 2),
            "max_memory_usage": round(max(memory_usages), 2),
            "timestamp": datetime.now().isoformat()
        }
    
    def log_summary(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
        summary = self.get_summary()
        if not summary:
            return
        
        logger.info("üìä –°–í–û–î–ö–ê –ú–ï–¢–†–ò–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        logger.info(f"   üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        logger.info(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['avg_execution_time']} —Å–µ–∫")
        logger.info(f"   ‚è±Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {summary['min_execution_time']} —Å–µ–∫")
        logger.info(f"   ‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {summary['max_execution_time']} —Å–µ–∫")
        logger.info(f"   üíæ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {summary['avg_memory_usage']} –ú–ë")
        logger.info(f"   üíæ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {summary['min_memory_usage']} –ú–ë")
        logger.info(f"   üíæ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {summary['max_memory_usage']} –ú–ë")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
performance_collector = PerformanceCollector() 