import pytest
import logging
import sys
from bot.services.product.validation import ProductValidationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

print("\n=== –ù–ê–ß–ê–õ–û –Æ–ù–ò–¢-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")

@pytest.mark.asyncio
async def test_validate_product_data_valid():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    Act: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProductValidationService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_valid == True
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    validation_service = ProductValidationService()
    
    logger.info("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    valid_data = {
        "id": "test1",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "categories": ["mushroom"],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "form": "mixed slices",
        "species": "Amanita muscaria",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    logger.info(f"üîç –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {valid_data['title']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_data")
    result = await validation_service.validate_product_data(valid_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
    assert result["is_valid"] is True
    assert not result["errors"]
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validate_product_data_invalid():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    Act: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProductValidationService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_valid == False –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    validation_service = ProductValidationService()
    
    logger.info("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    invalid_data = {
        "id": "test2",
        "title": "",  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "description_cid": "invalid_cid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π CID
        "categories": [],  # –ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "form": "mixed slices",
        "species": "Amanita muscaria",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "INVALID"}]  # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
    }
    logger.info(f"üîç –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {invalid_data['title']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_data")
    result = await validation_service.validate_product_data(invalid_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
    assert result["is_valid"] is False
    assert len(result["errors"]) > 0
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validate_product_data_missing_required():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    Act: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProductValidationService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_valid == False –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—è—Ö
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏")
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    validation_service = ProductValidationService()
    
    logger.info("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏")
    incomplete_data = {
        "id": "test3",
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "categories": ["mushroom"],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "form": "mixed slices",
        "species": "Amanita muscaria"
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç prices
    }
    logger.info(f"üîç –î–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏: ID {incomplete_data['id']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_data")
    result = await validation_service.validate_product_data(incomplete_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
    assert result["is_valid"] is False
    assert len(result["errors"]) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—è—Ö
    error_messages = [error.lower() for error in result["errors"]]
    assert any("title" in error or "–∑–∞–≥–æ–ª–æ–≤–æ–∫" in error for error in error_messages), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ"
    assert any("price" in error or "—Ü–µ–Ω–∞" in error for error in error_messages), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ü–µ–Ω–∞—Ö"
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–µ async-—Ç–µ—Å—Ç—ã, –≤—Å–µ async-–º–µ—Ç–æ–¥—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ await 