import pytest
import logging
import sys
from bot.services.product.validation import ProductValidationService
from bot.services.product.registry import ProductRegistryService
from bot.services.core.blockchain import BlockchainService
from bot.services.core.ipfs_factory import IPFSFactory
from bot.services.core.account import AccountService
from unittest.mock import Mock, AsyncMock, patch
from bot.model.product import Product, Description, PriceInfo
from bot.model.organic_component import OrganicComponent
from bot.services.product.exceptions import InvalidProductIdError, ProductNotFoundError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

print("\n=== –ù–ê–ß–ê–õ–û –Æ–ù–ò–¢-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")

def setup_mock_storage_service(mock_storage_service):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç mock_storage_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω"""
    mock_storage_service.download_json = Mock(return_value={
        "id": "test_product",
        "title": "Test Product",
        "description_cid": "QmDescriptionCID",
        "cover_image_url": "QmImageCID",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    })
    return mock_storage_service

@pytest.mark.asyncio
async def test_validate_product_data_valid():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    Act: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProductValidationService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_valid == True
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    validation_service = ProductValidationService()
    
    logger.info("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    valid_data = {
        "business_id": "1",
        "title": "Test Product",
        "organic_components": [{"biounit_id": "Amanita_muscaria", "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG", "proportion": "100%"}],
        "categories": ["mushroom"],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["mixed slices"],
        "species": "Amanita muscaria",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    logger.info(f"üîç –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {valid_data['title']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_data")
    result = await validation_service.validate_product_data(valid_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
    assert result.is_valid is True
    assert not result.error_message
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validate_product_data_invalid():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    Act: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProductValidationService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_valid == False –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    validation_service = ProductValidationService()
    
    logger.info("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    invalid_data = {
        "business_id": "2",
        "title": "",  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "organic_components": [{"biounit_id": "Amanita_muscaria", "description_cid": "invalid_cid", "proportion": "100%"}],  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π CID
        "categories": [],  # –ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["mixed slices"],
        "species": "Amanita muscaria",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "INVALID"}]  # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
    }
    logger.info(f"üîç –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {invalid_data['title']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_data")
    result = await validation_service.validate_product_data(invalid_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
    assert result.is_valid is False
    assert result.error_message is not None
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validate_product_data_missing_required():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    Act: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ProductValidationService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç is_valid == False –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—è—Ö
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏")
    
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    validation_service = ProductValidationService()
    
    logger.info("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏")
    incomplete_data = {
        "business_id": "3",
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title
        "organic_components": [{"biounit_id": "Amanita_muscaria", "description_cid": "QmdoqBWBZoupjQWFfBxMMJD5N9dJSFTyjVEV1AVL8oNEVSG", "proportion": "100%"}],
        "categories": ["mushroom"],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["mixed slices"],
        "species": "Amanita muscaria"
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç prices
    }
    logger.info(f"üîç –î–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏: ID {incomplete_data['business_id']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_data")
    result = await validation_service.validate_product_data(incomplete_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
    assert result.is_valid is False
    assert result.error_message is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ (–ø–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    error_message = result.error_message.lower()
    assert "title" in error_message or "–∑–∞–≥–æ–ª–æ–≤–æ–∫" in error_message, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ"
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

# === –¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===

@pytest.mark.asyncio
async def test_update_product_success():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    Act: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ ProductRegistryService
    Assert: –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    from bot.validation import ValidationResult
    mock_validation_service.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    mock_storage_service.upload_json = Mock(return_value="QmNewMetadataCID123")
    mock_blockchain_service.seller_key = "0x1234567890abcdef"
    # –ú–æ–∫–∞–µ–º get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞
    mock_blockchain_service.get_product = Mock(return_value=(1, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", "QmOldCID123", True))
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    from bot.model.product import Product, Description, PriceInfo
    test_description = Description(
        business_id="test1",
        title="Test Description",
        scientific_name="Amanita muscaria",
        generic_description="Test generic description",
        effects="Test effects",
        shamanic="Test shamanic description",
        warnings="Test warnings",
        dosage_instructions=[]
    )
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π OrganicComponent
    from bot.model.organic_component import OrganicComponent
    test_component = OrganicComponent(
        biounit_id="Amanita_muscaria",
        description_cid="QmDescCID123",
        proportion="100%"
    )
    
    existing_product = Product(
        business_id="1",
        blockchain_id=1,
        status=1,
        cid="QmOldCID123",
        title="Old Title",
        organic_components=[test_component],
        cover_image_url="QmOldImageCID123",
        categories=["mushroom"],
        forms=["powder"],
        species="Amanita muscaria",
        prices=[PriceInfo(price=80, weight=100, weight_unit="g", currency="EUR")]
    )
    registry_service.get_product = AsyncMock(return_value=existing_product)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        "business_id": "1",
        "title": "Updated Product Title",
        "description_cid": "QmNewDescCID123",
        "categories": ["mushroom", "medicinal"],
        "cover_image_url": "QmNewImageCID123",
        "forms": ["tincture"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmNewDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "50", "weight_unit": "g", "price": "120", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product")
    result = await registry_service.update_product("1", update_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["status"] == "success"
    assert result["business_id"] == "1"
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_update_product_not_found():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
    Act: –í—ã–∑—ã–≤–∞–µ–º update_product —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
    Assert: –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É "–ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None (–ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
    registry_service.get_product = AsyncMock(return_value=None)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        "business_id": "999",
        "title": "Non-existent Product",
        "description_cid": "QmDescCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID")
    result = await registry_service.update_product("999", update_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["status"] == "error"
    assert result["business_id"] == "999"
    assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result["error"]
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_update_product_validation_error():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    Act: –í—ã–∑—ã–≤–∞–µ–º update_product —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    Assert: –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
    mock_validation_service.validate_product_data = AsyncMock(return_value={
        "is_valid": False, 
        "errors": ["–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π CID", "–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"]
    })
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    invalid_update_data = {
        "business_id": "1",
        "title": "",  # –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "description_cid": "invalid_cid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π CID
        "categories": ["mushroom"],
        "cover_image_url": "QmImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    result = await registry_service.update_product("1", invalid_update_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    assert result["status"] == "error"
    assert result["business_id"] == "1"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    assert result["error"] is not None
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_update_product_status_success():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    Act: –í—ã–∑—ã–≤–∞–µ–º update_product_status —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    Assert: –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_blockchain_service.update_product_status = AsyncMock(return_value="0xTxHash123")
    mock_blockchain_service.seller_key = "0x1234567890abcdef"
    # –ú–æ–∫–∞–µ–º get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞
    mock_blockchain_service.get_product = Mock(return_value=(1, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", "QmCID123", True))
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    from bot.model.product import Product, PriceInfo
    from bot.model.organic_component import OrganicComponent
    
    test_component = OrganicComponent(
        biounit_id="Amanita_muscaria",
        description_cid="QmDescCID123",
        proportion="100%"
    )
    
    existing_product = Product(
        business_id="1",
        blockchain_id=1,
        status=0,  # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        cid="QmCID123",
        title="Test Product",
        organic_components=[test_component],
        cover_image_url="QmImageCID123",
        categories=["mushroom"],
        forms=["powder"],
        species="Amanita muscaria",
        prices=[PriceInfo(price=80, weight=100, weight_unit="g", currency="EUR")]
    )
    registry_service.get_product = AsyncMock(return_value=existing_product)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product_status")
    result = await registry_service.update_product_status(1, 1)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result is True
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_update_product_status_not_found():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
    Act: –í—ã–∑—ã–≤–∞–µ–º update_product_status —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
    Assert: –û–∂–∏–¥–∞–µ–º False (–ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None (–ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
    registry_service.get_product = AsyncMock(return_value=None)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product_status —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID")
    result = await registry_service.update_product_status(999, 1)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result is False
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_update_product_status_idempotency():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    Act: –í—ã–∑—ã–≤–∞–µ–º update_product_status —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º
    Assert: –û–∂–∏–¥–∞–µ–º True (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_blockchain_service.seller_key = "0x1234567890abcdef"
    # –ú–æ–∫–∞–µ–º get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞
    mock_blockchain_service.get_product = Mock(return_value=(1, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", "QmCID123", True))
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ get_product –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    from bot.model.product import Product, PriceInfo
    from bot.model.organic_component import OrganicComponent
    
    test_component = OrganicComponent(
        biounit_id="Amanita_muscaria",
        description_cid="QmDescCID123",
        proportion="100%"
    )
    
    existing_product = Product(
        business_id="1",
        blockchain_id=1,
        status=1,  # –£–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π
        cid="QmCID123",
        title="Test Product",
        organic_components=[test_component],
        cover_image_url="QmImageCID123",
        categories=["mushroom"],
        forms=["powder"],
        species="Amanita muscaria",
        prices=[PriceInfo(price=80, weight=100, weight_unit="g", currency="EUR")]
    )
    registry_service.get_product = AsyncMock(return_value=existing_product)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product_status —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º")
    result = await registry_service.update_product_status(1, 1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ç—É—Å
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    assert result is True
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_update_product_status_access_denied():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç —Å –¥—Ä—É–≥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    Act: –í—ã–∑—ã–≤–∞–µ–º update_product_status –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    Assert: –û–∂–∏–¥–∞–µ–º False (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤)
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain_service = Mock()
    mock_storage_service = Mock()
    mock_validation_service = Mock()
    mock_account_service = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º update_product_status –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    result = await registry_service.update_product_status(1, 1)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result is False
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validate_product_update():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    Act: –í—ã–∑—ã–≤–∞–µ–º validate_product_update
    Assert: –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    mock_validation_service = Mock(spec=ProductValidationService)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    mock_validation_service.validate_product_data = AsyncMock(return_value={"is_valid": True, "errors": []})
    mock_validation_service.validate_product_update = AsyncMock(return_value={"is_valid": True, "errors": []})
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    old_data = {
        "business_id": "1",
        "title": "Old Title",
        "description_cid": "QmOldDescCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmOldImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmOldDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    new_data = {
        "business_id": "1",  # –¢–æ—Ç –∂–µ ID
        "title": "New Title",
        "description_cid": "QmNewDescCID123",
        "categories": ["mushroom", "medicinal"],
        "cover_image_url": "QmNewImageCID123",
        "forms": ["tincture"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmNewDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "50", "weight_unit": "ml", "price": "120", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_update")
    result = await mock_validation_service.validate_product_update(old_data, new_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["is_valid"] is True
    assert not result["errors"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_validation_service.validate_product_update.assert_called_once_with(old_data, new_data)
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validate_product_update_id_change():
    """
    Arrange: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º ID
    Act: –í—ã–∑—ã–≤–∞–µ–º validate_product_update —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º ID
    Assert: –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —é–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º ID")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
    mock_validation_service = Mock(spec=ProductValidationService)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º ID
    old_data = {
        "business_id": "1",
        "title": "Old Title",
        "description_cid": "QmOldDescCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmOldImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmOldDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    new_data = {
        "business_id": "2",  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π ID
        "title": "New Title",
        "description_cid": "QmNewDescCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmNewImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmNewDescCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
    mock_validation_service.validate_product_update = AsyncMock(return_value={
        "is_valid": False,
        "errors": ["id: –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"]
    })
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º validate_product_update —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º ID")
    result = await mock_validation_service.validate_product_update(old_data, new_data)
    
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["is_valid"] is False
    assert len(result["errors"]) > 0
    assert "ID" in result["errors"][0]
    
    logger.info("‚úÖ –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º ID –∑–∞–≤–µ—Ä—à–µ–Ω")

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–∫–æ–≤ –∏–∑ conftest.py - —Ç–µ–ø–µ—Ä—å –≤—Å–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –ú–ï–¢–û–î–ê CREATE_PRODUCT()
# ============================================================================

@pytest.mark.asyncio
async def test_create_product_success(mock_product_registry_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    product_data = {
        "business_id": "test1",
        "title": "Test Product",
        "description_cid": "QmValidCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmValidImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product")
    
    # Act
    result = await mock_product_registry_service.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result["status"] == "success"
    assert result["business_id"] == "test1"
    assert result["metadata_cid"] is not None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ CID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assert result["blockchain_id"] is not None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ blockchain_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)
    assert result["tx_hash"] == "0x123"
    assert result["error"] is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_create_product_validation_error(mock_product_registry_service_with_failing_validation):
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    # Arrange
    product_data = {
        "business_id": "test1",
        "title": "",  # –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "description_cid": "QmValidCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmValidImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Act
    result = await mock_product_registry_service_with_failing_validation.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result["status"] == "error"
    assert result["business_id"] == "test1"
    assert "Mock validation failed" in result["error"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_create_product_ipfs_upload_error(mock_registry_service_with_failing_storage):
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ IPFS"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ IPFS")
    
    # Arrange
    product_data = {
        "business_id": "test1",
        "title": "Test Product",
        "description_cid": "QmValidCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmValidImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product —Å –æ—à–∏–±–∫–æ–π IPFS")
    
    # Act
    result = await mock_registry_service_with_failing_storage.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result["status"] == "error"
    assert result["business_id"] == "test1"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    assert result["error"] is not None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ IPFS –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_create_product_blockchain_error(mock_blockchain_service_with_error, mock_ipfs_service):
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Arrange
    product_data = {
        "business_id": "test1",
        "title": "Test Product",
        "description_cid": "QmValidCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmValidImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_validation_service = AsyncMock()
    from bot.validation import ValidationResult
    mock_validation_service.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    mock_storage_service = AsyncMock()
    mock_storage_service.upload_json = AsyncMock(return_value="QmNewMetadataCID123")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–æ–º –±–ª–æ–∫—á–µ–π–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service_with_error,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product —Å –æ—à–∏–±–∫–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Act
    result = await registry_service.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result["status"] == "error"
    assert result["business_id"] == "test1"
    assert "Blockchain transaction failed" in result["error"]
    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ IPFS –ø—Ä–æ—à–ª–∏, –Ω–æ –±–ª–æ–∫—á–µ–π–Ω –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    mock_validation_service.validate_product_data.assert_called_once_with(product_data)
    mock_storage_service.upload_json.assert_called_once()
    # –ú–æ–∫–∏ –∏–∑ conftest.py –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç assert_called_once_with, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏
    assert mock_blockchain_service_with_error.create_product_called
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_create_product_blockchain_id_error(mock_blockchain_service_with_id_error, mock_ipfs_service):
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Arrange
    product_data = {
        "business_id": "test1",
        "title": "Test Product",
        "description_cid": "QmValidCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmValidImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    mock_validation_service = AsyncMock()
    from bot.validation import ValidationResult
    mock_validation_service.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    mock_storage_service = AsyncMock()
    mock_storage_service.upload_json = AsyncMock(return_value="QmNewMetadataCID123")
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º download_json –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω—ã
    mock_storage_service.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "description_cid": "QmDescriptionCID",
        "cover_image_url": "QmImageCID",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescriptionCID",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    })
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–æ–º –±–ª–æ–∫—á–µ–π–Ω–∞ —Å –æ—à–∏–±–∫–æ–π ID
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service_with_id_error,
        storage_service=mock_storage_service,
        validation_service=mock_validation_service
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è ID")
    
    # Act
    result = await registry_service.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result["status"] == "error"
    assert result["business_id"] == "test1"
    assert result["error"] is not None
    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã, –Ω–æ get_product_id_from_tx –≤–µ—Ä–Ω—É–ª None
    mock_validation_service.validate_product_data.assert_called_once_with(product_data)
    mock_storage_service.upload_json.assert_called_once()
    # –ú–æ–∫–∏ –∏–∑ conftest.py –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç assert_called_once_with, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏
    assert mock_blockchain_service_with_id_error.create_product_called
    assert mock_blockchain_service_with_id_error.get_product_id_called
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_create_product_idempotency():
    """–¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    product_data = {
            "business_id": "test1",
            "title": "Test Product",
            "description_cid": "QmDescriptionCID123",
            "categories": ["mushroom"],
            "cover_image_url": "QmValidImageCID123",
            "forms": ["powder"],
            "species": "Amanita muscaria",
            "organic_components": [{
                "biounit_id": "Amanita_muscaria",
                "description_cid": "QmDescriptionCID123",
                "proportion": "100%"
            }],
            "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
        }
    
    mock_blockchain = Mock()
    mock_blockchain.create_product = AsyncMock(return_value="0x123")
    mock_blockchain.get_product_id_from_tx = AsyncMock(return_value=42)
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])
    mock_blockchain.product_exists_in_blockchain = Mock(return_value=False)
    mock_blockchain.get_all_products = Mock(return_value=[])
    
    mock_storage = Mock()
    mock_storage.upload_json = AsyncMock(return_value="QmNewMetadataCID123")
    mock_storage.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "description_cid": "QmDescriptionCID",
        "cover_image_url": "QmImageCID",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescriptionCID",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    })
    
    mock_validation = Mock()
    from bot.validation import ValidationResult
    mock_validation.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    mock_account = Mock()
    mock_account.private_key = "0x1234567890abcdef"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ create_product")
    
    # Act - –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    result1 = await registry_service.create_product(product_data)
    
    logger.info("üöÄ –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ create_product —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Act - –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
    result2 = await registry_service.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç 1: {result1}")
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç 2: {result2}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    assert result1 == result2
    assert result1["status"] == "success"
    assert result2["status"] == "success"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –≤—ã–∑—ã–≤–∞–ª–∏—Å—å –¥–≤–∞–∂–¥—ã
    assert mock_validation.validate_product_data.call_count == 2
    assert mock_storage.upload_json.call_count == 2
    # –ú–æ–∫–∏ –∏–∑ conftest.py –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç call_count, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥–∏
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω–∞
    
    logger.info("‚úÖ –¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_create_product_success_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä—è–º—ã–º –º–æ–∫–∞–Ω–∏–µ–º"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.create_product = AsyncMock(return_value="0x123")
    mock_blockchain.get_product_id_from_tx = AsyncMock(return_value=42)
    mock_blockchain.get_all_products = Mock(return_value=[])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    mock_blockchain.product_exists_in_blockchain = Mock(return_value=False)  # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
    
    mock_storage = Mock()
    mock_storage.upload_json = AsyncMock(return_value="QmMockJson123")
    mock_storage.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "cover_image_url": "QmValidImageCID123",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    })
    
    mock_validation = Mock()
    from bot.validation import ValidationResult
    mock_validation.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    mock_account = Mock()
    mock_account.get_private_key = Mock(return_value="0x1234567890abcdef")
    mock_account.get_address = Mock(return_value="0x1234567890abcdef1234567890abcdef12345678")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –º–æ–∫–∞–º–∏
    from bot.services.product.registry import ProductRegistryService
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    product_data = {
        "business_id": "test1",
        "title": "Test Product",
        "description_cid": "QmValidCID123",
        "categories": ["mushroom"],
        "cover_image_url": "QmValidImageCID123",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmValidCID123",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product")
    
    # Act
    result = await registry_service.create_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result["status"] == "success"
    assert result["business_id"] == "test1"
    assert result["metadata_cid"] == "QmMockJson123"
    assert result["blockchain_id"] == "42"  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    assert result["tx_hash"] == "0x123"
    assert result["error"] is None
    
    logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –ú–ï–¢–û–î–ê GET_ALL_PRODUCTS()
# ============================================================================

@pytest.mark.asyncio
async def test_get_all_products_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.get_catalog_version = Mock(return_value=1)
    mock_blockchain.get_all_products = Mock(return_value=[
        (1, "0x123", "QmCID1", True),
        (2, "0x456", "QmCID2", True),
        (3, "0x789", "QmCID3", True)
    ])
    
    mock_storage = Mock()
    mock_storage.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "cover_image_url": "QmValidImageCID123",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescCID",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}]
    })
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=Mock(),
        account_service=Mock()
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_all_products")
    
    # Act
    result = await registry_service.get_all_products()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    assert isinstance(result, list)
    assert len(result) >= 0  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_all_products_cache_hit():
    """–¢–µ—Å—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.get_catalog_version = Mock(return_value=1)
    mock_blockchain.get_all_products = Mock(return_value=[])
    
    mock_storage = Mock()
    mock_storage.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "cover_image_url": "QmValidImageCID123",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescCID",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}]
    })
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=Mock(),
        account_service=Mock()
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_all_products —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º")
    
    # Act
    products = await registry_service.get_all_products()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∫—ç—à–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞
    # (—Ä–µ–∞–ª—å–Ω—ã–π –∫—ç—à –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –º–æ–∫–æ–º storage_service)
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_all_products_cache_miss(mock_registry_service):
    """–¢–µ—Å—Ç –ø—Ä–æ–º–∞—Ö–∞ –∫—ç—à–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–º–∞—Ö–∞ –∫—ç—à–∞")
    
    # Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–µ cache_service –∏ metadata_service
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_all_products —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∫—ç—à–µ–º")
    
    # Act
    products = await mock_registry_service.get_all_products()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (8 –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    # —Ç–∞–∫ –∫–∞–∫ –º–æ–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö CID
    assert len(products) == 8
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
    # (—Ä–µ–∞–ª—å–Ω—ã–π –∫—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –º–æ–∫–æ–º storage_service)
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–º–∞—Ö–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_all_products_empty_catalog(mock_registry_service):
    """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")

    # Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–µ cache_service –∏ metadata_service
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_all_products —Å –ø—É—Å—Ç—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º")
    
    # Act
    products = await mock_registry_service.get_all_products()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (8 –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    # —Ç–∞–∫ –∫–∞–∫ –º–æ–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö CID
    assert len(products) == 8
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    # (—Ä–µ–∞–ª—å–Ω—ã–π –∫—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –º–æ–∫–æ–º storage_service)
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_all_products_blockchain_error():
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.get_catalog_version = Mock(side_effect=Exception("Blockchain connection failed"))
    mock_blockchain.get_all_products = Mock(return_value=[])
    
    mock_storage = Mock()
    mock_storage.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "cover_image_url": "QmValidImageCID123",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescCID",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}]
    })
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=Mock(),
        account_service=Mock()
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_all_products —Å –æ—à–∏–±–∫–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Act
    products = await registry_service.get_all_products()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    assert len(products) == 0
    assert products == []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
    # (—Ä–µ–∞–ª—å–Ω—ã–π –∫—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –º–æ–∫–æ–º storage_service)
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø get_product() - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
# ============================================================================

@pytest.mark.asyncio
async def test_get_product_success(mock_registry_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID")
    
    # Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–µ cache_service –∏ metadata_service
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_product —Å ID=1")
    
    # Act
    product = await mock_registry_service.get_product(1)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {product}")
    
    assert product is not None
    assert isinstance(product, Product)
    assert product.blockchain_id == 1
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö IPFS
    assert product.title == "Amanita muscaria ‚Äî sliced caps and gills (1st grade)"
    assert product.status == 0
    assert product.cid == "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG"
    assert product.species == "Amanita muscaria"
    assert product.categories == ["mushroom", "mental health", "focus", "ADHD support", "mental force"]
    assert product.forms == ["mixed slices"]
    assert len(product.prices) == 1
    assert str(product.prices[0].price) == "80"
    assert product.prices[0].currency == "EUR"
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_product_not_found(mock_registry_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–µ cache_service –∏ metadata_service
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_product —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID=999")
    
    # Act
    product = await mock_registry_service.get_product(999)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {product}")
    
    assert product is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_product_invalid_id(mock_registry_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID")
    
    # Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–µ cache_service –∏ metadata_service
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_product —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID=-1")
    
    # Act & Assert
    with pytest.raises(InvalidProductIdError):
        await mock_registry_service.get_product(-1)
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_product_metadata_error():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—à–∏–±–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    mock_blockchain = Mock()
    mock_blockchain.get_product = Mock(return_value=(1, "0x123", "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG", True))
    
    mock_storage = Mock()
    mock_storage.download_json = Mock(side_effect=Exception("IPFS download failed"))
    
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_product —Å ID=1 (–æ—à–∏–±–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)")
    
    # Act
    product = await registry_service.get_product(1)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {product}")
    
    assert product is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_product_string_id(mock_registry_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º ID"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º ID")
    
    # Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–µ cache_service –∏ metadata_service
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_product —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º ID='1'")
    
    # Act
    product = await mock_registry_service.get_product("1")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {product}")
    
    assert product is not None
    assert isinstance(product, Product)
    assert product.blockchain_id == 1
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö IPFS
    assert product.title == "Amanita muscaria ‚Äî sliced caps and gills (1st grade)"
    assert product.status == 0
    assert product.cid == "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG"
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º ID –∑–∞–≤–µ—Ä—à–µ–Ω")


# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
# ============================================================================

print("\n=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –Æ–ù–ò–¢-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===") 

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø deactivate_product() - –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
# ============================================================================

@pytest.mark.asyncio
async def test_deactivate_product_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.seller_key = "test_seller_key"
    mock_blockchain.transact_contract_function = AsyncMock(return_value="0xdeactivate123")
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º deactivate_product —Å ID=1")
    
    # Act
    result = await registry_service.deactivate_product(1)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω blockchain_service
    mock_blockchain.transact_contract_function.assert_called_once_with(
        "ProductRegistry",
        "deactivateProduct",
        mock_blockchain.seller_key,
        1
    )
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_deactivate_product_not_found():
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.seller_key = "test_seller_key"
    mock_blockchain.transact_contract_function = AsyncMock(return_value=None)
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º deactivate_product —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID=999")
    
    # Act
    result = await registry_service.deactivate_product(999)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω blockchain_service
    mock_blockchain.transact_contract_function.assert_called_once_with(
        "ProductRegistry",
        "deactivateProduct",
        mock_blockchain.seller_key,
        999
    )
    
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_deactivate_product_already_deactivated():
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.seller_key = "test_seller_key"
    mock_blockchain.transact_contract_function = AsyncMock(return_value=None)
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º deactivate_product —Å —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ID=2")
    
    # Act
    result = await registry_service.deactivate_product(2)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω blockchain_service
    mock_blockchain.transact_contract_function.assert_called_once_with(
        "ProductRegistry",
        "deactivateProduct",
        mock_blockchain.seller_key,
        2
    )
    
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_deactivate_product_blockchain_error():
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.seller_key = "test_seller_key"
    mock_blockchain.transact_contract_function = AsyncMock(
        side_effect=Exception("Blockchain connection failed")
    )
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º deactivate_product —Å –æ—à–∏–±–∫–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    # Act
    result = await registry_service.deactivate_product(1)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω blockchain_service
    mock_blockchain.transact_contract_function.assert_called_once_with(
        "ProductRegistry",
        "deactivateProduct",
        mock_blockchain.seller_key,
        1
    )
    
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_deactivate_product_access_denied():
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç–∫–∞–∑–æ–º –≤ –¥–æ—Å—Ç—É–ø–µ"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç–∫–∞–∑–æ–º –≤ –¥–æ—Å—Ç—É–ø–µ")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.seller_key = "test_seller_key"
    mock_blockchain.transact_contract_function = AsyncMock(
        side_effect=Exception("Access denied: only seller can deactivate product")
    )
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º deactivate_product —Å –æ—Ç–∫–∞–∑–æ–º –≤ –¥–æ—Å—Ç—É–ø–µ")
    
    # Act
    result = await registry_service.deactivate_product(1)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω blockchain_service
    mock_blockchain.transact_contract_function.assert_called_once_with(
        "ProductRegistry",
        "deactivateProduct",
        mock_blockchain.seller_key,
        1
    )
    
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç–∫–∞–∑–æ–º –≤ –¥–æ—Å—Ç—É–ø–µ –∑–∞–≤–µ—Ä—à–µ–Ω")


# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
# ============================================================================

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

@pytest.mark.asyncio
async def test_clear_cache_all():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ invalidate_cache
    registry_service.cache_service.invalidate_cache = Mock()
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º clear_cache() –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # Act
    registry_service.clear_cache()
    
    # Assert
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω invalidate_cache —Å None
    registry_service.cache_service.invalidate_cache.assert_called_once_with(None)
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_clear_cache_specific():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫—ç—à–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫—ç—à–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ invalidate_cache
    registry_service.cache_service.invalidate_cache = Mock()
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º clear_cache('catalog')")
    
    # Act
    registry_service.clear_cache("catalog")
    
    # Assert
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω invalidate_cache —Å 'catalog'
    registry_service.cache_service.invalidate_cache.assert_called_once_with("catalog")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_catalog_version_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.get_catalog_version = Mock(return_value=1)
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_catalog_version()")
    
    # Act
    version = registry_service.get_catalog_version()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {version}")
    
    assert version == 1  # –ò–∑ mock_blockchain.get_catalog_version()
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_catalog_version_error():
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_blockchain.get_catalog_version = Mock(side_effect=Exception("Blockchain error"))
    
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_catalog_version() —Å –æ—à–∏–±–∫–æ–π")
    
    # Act
    version = registry_service.get_catalog_version()
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {version}")
    
    assert version == 0  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_is_cache_valid_fresh():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–µ–∂—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    from datetime import datetime, timedelta
    fresh_timestamp = datetime.utcnow() - timedelta(minutes=1)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞–∑–∞–¥
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _is_cache_valid —Å —Å–≤–µ–∂–µ–π –º–µ—Ç–∫–æ–π")
    
    # Act
    result = registry_service._is_cache_valid(fresh_timestamp, "catalog")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is True
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_is_cache_valid_expired():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –°–æ–∑–¥–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–±–æ–ª—å—à–µ TTL)
    from datetime import datetime, timedelta
    expired_timestamp = datetime.utcnow() - timedelta(minutes=10)  # 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ (TTL = 5 –º–∏–Ω—É—Ç)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _is_cache_valid —Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –º–µ—Ç–∫–æ–π")
    
    # Act
    result = registry_service._is_cache_valid(expired_timestamp, "catalog")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is False
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_is_cache_valid_none_timestamp():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _is_cache_valid —Å None timestamp")
    
    # Act
    result = registry_service._is_cache_valid(None, "catalog")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is False
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_is_cache_valid_different_types():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    from datetime import datetime, timedelta
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫—ç—à–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ TTL
    test_cases = [
        ("catalog", timedelta(minutes=5)),
        ("description", timedelta(hours=24)),
        ("image", timedelta(hours=12))
    ]
    
    for cache_type, ttl in test_cases:
        logger.info(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∫—ç—à–∞: {cache_type}")
        
        # –°–≤–µ–∂–∞—è –º–µ—Ç–∫–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö TTL)
        fresh_timestamp = datetime.utcnow() - timedelta(minutes=1)
        result_fresh = registry_service._is_cache_valid(fresh_timestamp, cache_type)
        assert result_fresh is True, f"–°–≤–µ–∂–∏–π –∫—ç—à {cache_type} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
        
        # –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –º–µ—Ç–∫–∞ (–±–æ–ª—å—à–µ TTL)
        expired_timestamp = datetime.utcnow() - ttl - timedelta(minutes=1)
        result_expired = registry_service._is_cache_valid(expired_timestamp, cache_type)
        assert result_expired is False, f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à {cache_type} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        
        logger.info(f"‚úÖ –¢–∏–ø –∫—ç—à–∞ {cache_type} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")


# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
# ============================================================================

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –î–ï–°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò
# ============================================================================

@pytest.mark.asyncio
async def test_deserialize_product_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ ProductAssembler
    from bot.services.product.assembler import ProductAssembler
    mock_assembler = Mock(spec=ProductAssembler)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π OrganicComponent
    from bot.model.organic_component import OrganicComponent
    test_component = OrganicComponent(
        biounit_id="test_species",
        description_cid="QmDescCID123",
        proportion="100%"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É
    from bot.model.product import PriceInfo
    test_price = PriceInfo(
        price=100,
        currency="EUR",
        weight=100,
        weight_unit="g"
    )
    
    test_product = Product(
        business_id="test-product",
        blockchain_id=1,
        status=1,
        cid="QmTestCID123",
        title="Test Product",
        organic_components=[test_component],
        cover_image_url="QmImageCID123",
        categories=["test"],
        forms=["powder"],
        species="test_species",
        prices=[test_price]
    )
    
    mock_assembler.assemble_product = Mock(return_value=test_product)
    registry_service.assembler = mock_assembler
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ storage_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    mock_storage.download_json = Mock(return_value={
        "business_id": "test-product",
        "title": "Test Product",
        "description_cid": "QmDescCID123",
        "cover_image_url": "QmImageCID123",
        "categories": ["test"],
        "forms": ["powder"],
        "species": "test_species",
        "prices": []
    })
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫–æ—Ä—Ç–µ–∂ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞)
    product_data = (1, "0x123456789", "QmTestCID123", True)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _deserialize_product —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Act
    result = await registry_service._deserialize_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is not None
    assert result.blockchain_id == 1
    assert result.title == "Test Product"
    assert result.status == 1
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_deserialize_product_invalid_data():
    """–¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    invalid_product_data = (1, 2)  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _deserialize_product —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Act
    result = await registry_service._deserialize_product(invalid_product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_deserialize_product_metadata_error():
    """–¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ storage_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None (–æ—à–∏–±–∫–∞)
    mock_storage.download_json = Mock(return_value=None)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_data = (1, "0x123456789", "QmTestCID123", True)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _deserialize_product —Å –æ—à–∏–±–∫–æ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    # Act
    result = await registry_service._deserialize_product(product_data)
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")





@pytest.mark.asyncio
async def test_get_cached_description_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    mock_description = Description(
        business_id="desc1",
        title="Test Description",
        scientific_name="Test Scientific Name",
        generic_description="Test generic description",
        effects="Test effects",
        shamanic="Test shamanic",
        warnings="Test warnings",
        dosage_instructions=[]
    )
    registry_service.cache_service.get_description_by_cid = Mock(return_value=mock_description)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _get_cached_description —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CID")
    
    # Act
    result = registry_service._get_cached_description("QmDescCID123")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is not None
    assert result.business_id == "desc1"
    assert result.title == "Test Description"
    assert result.generic_description == "Test generic description"
    assert result.scientific_name == "Test Scientific Name"
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_cached_description_not_found():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None
    registry_service.cache_service.get_description_by_cid = Mock(return_value=None)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _get_cached_description —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CID")
    
    # Act
    result = registry_service._get_cached_description("QmNonExistentCID")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_cached_image_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ URL
    registry_service.cache_service.get_image_url_by_cid = Mock(return_value="https://example.com/image.jpg")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _get_cached_image —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CID")
    
    # Act
    result = registry_service._get_cached_image("QmImageCID123")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result == "https://example.com/image.jpg"
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_get_cached_image_not_found():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None
    registry_service.cache_service.get_image_url_by_cid = Mock(return_value=None)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _get_cached_image —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CID")
    
    # Act
    result = registry_service._get_cached_image("QmNonExistentImageCID")
    
    # Assert
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    assert result is None
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_validate_ipfs_cid_valid():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ IPFS CID"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ IPFS CID")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –í–∞–ª–∏–¥–Ω—ã–µ CID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    valid_cids = [
        "QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG",
        "bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi"
    ]
    
    for cid in valid_cids:
        logger.info(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º CID: {cid}")
        
        # Act
        result = registry_service._validate_ipfs_cid(cid)
        
        # Assert
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        assert result is True, f"CID {cid} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"
    
    logger.info("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ IPFS CID –∑–∞–≤–µ—Ä—à–µ–Ω")


def test_validate_ipfs_cid_invalid():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ IPFS CID"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ IPFS CID")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ CID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    invalid_cids = [
        "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        None,  # None
        "invalid_cid",  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        "Qm123",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG123",  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        "bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi123"  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
    
    for cid in invalid_cids:
        logger.info(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CID: {cid}")
        
        # Act
        result = registry_service._validate_ipfs_cid(cid)
        
        # Assert
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        assert result is False, f"CID {cid} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    
    logger.info("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ IPFS CID –∑–∞–≤–µ—Ä—à–µ–Ω")


# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
# ============================================================================

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –ü–†–ò–í–ê–¢–ù–´–• –ú–ï–¢–û–î–û–í (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
# ============================================================================

@pytest.mark.asyncio
async def test_update_catalog_cache_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service
    mock_set_cached_item = Mock()
    registry_service.cache_service.set_cached_item = mock_set_cached_item
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    version = 5
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Description –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    description1 = Description(
        business_id="desc1",
        title="Test Description 1",
        scientific_name="Test Scientific Name 1",
        generic_description="Test generic description 1",
        effects="Test effects 1",
        shamanic="Test shamanic 1",
        warnings="Test warnings 1",
        dosage_instructions=[]
    )
    
    description2 = Description(
        business_id="desc2",
        title="Test Description 2",
        scientific_name="Test Scientific Name 2",
        generic_description="Test generic description 2",
        effects="Test effects 2",
        shamanic="Test shamanic 2",
        warnings="Test warnings 2",
        dosage_instructions=[]
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ OrganicComponent
    from bot.model.organic_component import OrganicComponent
    test_component1 = OrganicComponent(
        biounit_id="test_species_1",
        description_cid="QmDescCID1",
        proportion="100%"
    )
    test_component2 = OrganicComponent(
        biounit_id="test_species_2",
        description_cid="QmDescCID2",
        proportion="100%"
    )
        
    products = [
        Product(
            business_id="test-product-1",
            blockchain_id=1,
            status=1,
            cid="QmTestCID1",
            title="Test Product 1",
            organic_components=[test_component1],
            cover_image_url="QmImageCID1",
            categories=["test"],
            forms=["powder"],
            species="test_species",
            prices=[PriceInfo(price=50, weight=100, weight_unit="g", currency="EUR")]
        ),
        Product(
            business_id="test-product-2",
            blockchain_id=2,
            status=1,
            cid="QmTestCID2",
            title="Test Product 2",
            organic_components=[test_component2],
            cover_image_url="QmImageCID2",
            categories=["test"],
            forms=["capsule"],
            species="test_species",
            prices=[PriceInfo(price=60, weight=100, weight_unit="g", currency="EUR")]
        )
    ]
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _update_catalog_cache —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Act
    registry_service._update_catalog_cache(version, products)
    
    # Assert
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω cache_service.set_cached_item
    mock_set_cached_item.assert_called_once_with("catalog", {
        "version": version,
        "products": products
    }, "catalog")
    
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_update_catalog_cache_empty_products(mock_blockchain_service, mock_ipfs_service):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service,
        validation_service=AsyncMock()
    )
    # –ó–∞–º–µ–Ω—è–µ–º storage_service –≤ –∫—ç—à–µ –Ω–∞ –º–æ–∫
    registry_service.cache_service.set_storage_service(mock_ipfs_service)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service
    mock_set_cached_item = Mock()
    registry_service.cache_service.set_cached_item = mock_set_cached_item
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    version = 1
    products = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º _update_catalog_cache —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # Act
    registry_service._update_catalog_cache(version, products)
    
    # Assert
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω cache_service.set_cached_item
    mock_set_cached_item.assert_called_once_with("catalog", {
        "version": version,
        "products": products
    }, "catalog")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")


@pytest.mark.asyncio
async def test_update_catalog_cache_large_products(mock_blockchain_service, mock_ipfs_service):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service,
        validation_service=AsyncMock()
    )
    # –ó–∞–º–µ–Ω—è–µ–º storage_service –≤ –∫—ç—à–µ –Ω–∞ –º–æ–∫
    registry_service.cache_service.set_storage_service(mock_ipfs_service)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ cache_service
    mock_set_cached_item = Mock()
    registry_service.cache_service.set_cached_item = mock_set_cached_item
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = []
    for i in range(100):  # 100 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Description –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        description = Description(
            business_id=f"desc{i}",
            title=f"Test Description {i}",
            scientific_name=f"Test Scientific Name {i}",
            generic_description=f"Test generic description {i}",
            effects=f"Test effects {i}",
            shamanic=f"Test shamanic {i}",
            warnings=f"Test warnings {i}",
            dosage_instructions=[]
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π OrganicComponent
        test_component = OrganicComponent(
            biounit_id=f"test_species_{i}",
            description_cid=f"QmDescCID{i}",
            proportion="100%"
        )
        
        product = Product(
            business_id=f"test-product-{i}",
            blockchain_id=i,
            status=1,
            cid=f"QmTestCID{i}",
            title=f"Test Product {i}",
            organic_components=[test_component],
            cover_image_url=f"QmImageCID{i}",
            categories=["test"],
            forms=["powder"],
            species="test_species",
            prices=[PriceInfo(price=50+i, weight=100, weight_unit="g", currency="EUR")]
        )
        products.append(product)
    
    version = 10
    
    logger.info(f"üöÄ –í—ã–∑—ã–≤–∞–µ–º _update_catalog_cache —Å {len(products)} –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")
    
    # Act
    registry_service._update_catalog_cache(version, products)
    
    # Assert
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω cache_service.set_cached_item
    mock_set_cached_item.assert_called_once_with("catalog", {
        "version": version,
        "products": products
    }, "catalog")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")


# ============================================================================
# –ò–¢–û–ì–û–í–´–ï –¢–ï–°–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –í–°–ï–ì–û –§–ê–ô–õ–ê
# ============================================================================

def test_all_private_methods_covered():
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    logger.info("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ ProductRegistryService
    private_methods = [
        '_is_cache_valid',
        '_validate_ipfs_cid', 
        '_get_cached_description',
        '_get_cached_image',

        '_deserialize_product',
        '_update_catalog_cache'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–ª–∞—Å—Å–µ
    for method_name in private_methods:
        assert hasattr(ProductRegistryService, method_name), f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω")
    
    logger.info(f"‚úÖ –í—Å–µ {len(private_methods)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏")


def test_product_registry_service_complete_coverage():
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è ProductRegistryService"""
    logger.info("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ProductRegistryService")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    public_methods = [
        'create_product',
        'get_all_products',
        'get_product', 
        'update_product',
        'update_product_status',
        'deactivate_product',
        'clear_cache',
        'get_catalog_version'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for method_name in public_methods:
        assert hasattr(ProductRegistryService, method_name), f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logger.info(f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω")
    
    logger.info(f"‚úÖ –í—Å–µ {len(public_methods)} –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤
    all_methods = [method for method in dir(ProductRegistryService) 
                   if not method.startswith('_') and callable(getattr(ProductRegistryService, method))]
    
    logger.info(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤: {len(all_methods)}")
    logger.info("‚úÖ ProductRegistryService –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã—Ç —Ç–µ—Å—Ç–∞–º–∏")


# ============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID
# ============================================================================

@pytest.mark.asyncio
async def test_check_product_id_exists_nonexistent():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ business ID"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ business ID")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ blockchain_service
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ú–æ–∫–∞–µ–º get_all_products —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    with patch.object(service, 'get_all_products', return_value=[]):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID
        exists = await service._check_product_id_exists("nonexistent_business_id")
        
        assert not exists, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    
    logger.info("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π")


@pytest.mark.asyncio
async def test_check_product_id_exists_existing_by_alias():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ business ID –ø–æ alias"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ business ID –ø–æ alias")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ blockchain_service
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    from bot.model.organic_component import OrganicComponent
    mock_component = OrganicComponent(
        biounit_id="Mock_Species",
        description_cid="QmMockDesc",
        proportion="100%"
    )
    
    mock_product = Product(
        business_id="existing-business-id",  # Business ID (—Å—Ç—Ä–æ–∫–æ–≤—ã–π)
        blockchain_id=1,  # Blockchain ID (—á–∏—Å–ª–æ–≤–æ–π)
        status=1,
        cid="QmMockCID",
        title="Mock Product",
        organic_components=[mock_component],
        cover_image_url="QmMockImage",
        categories=["mock"],
        forms=["mock_form"],
        species="Mock Species",
        prices=[PriceInfo(price=50, weight=100, weight_unit="g", currency="EUR")]
    )
    
    # –ú–æ–∫–∞–µ–º get_product —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç
    with patch.object(service, 'get_product', return_value=mock_product):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –ø–æ alias
        exists = await service._check_product_id_exists("existing-business-id")
        
        assert exists, "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –ø–æ alias –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    
    logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –ø–æ alias –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π")


@pytest.mark.asyncio
async def test_check_product_id_exists_existing_by_id():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ business ID –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É id"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ business ID –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É id")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ blockchain_service
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º id (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    mock_component = OrganicComponent(
        biounit_id="Mock_Species",
        description_cid="QmMockDesc",
        proportion="100%"
    )
    
    mock_product = Product(
        business_id="amanita1",  # –°—Ç—Ä–æ–∫–æ–≤—ã–π business ID
        blockchain_id=1,
        status=1,
        cid="QmMockCID",
        title="Mock Product",
        organic_components=[mock_component],
        cover_image_url="QmMockImage",
        categories=["mock"],
        forms=["mock_form"],
        species="Mock Species",
        prices=[PriceInfo(price=50, weight=100, weight_unit="g", currency="EUR")]
    )
    
    # –ú–æ–∫–∞–µ–º get_product —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç
    with patch.object(service, 'get_product', return_value=mock_product):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É id
        exists = await service._check_product_id_exists("amanita1")
        
        assert exists, "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É id –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    
    logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π business ID –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π")


@pytest.mark.asyncio
async def test_check_product_id_exists_invalid_id_empty():
    """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º ID - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å InvalidProductIdError"""
    logger.info("‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ business ID")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Å—Ç–æ–π ID –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç InvalidProductIdError
    with pytest.raises(InvalidProductIdError) as exc_info:
        await service._check_product_id_exists("")
    
    assert "–Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π" in str(exc_info.value), "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"
    logger.info("‚úÖ –ü—É—Å—Ç–æ–π business ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç InvalidProductIdError")


@pytest.mark.asyncio
async def test_check_product_id_exists_invalid_id_none():
    """–¢–µ—Å—Ç —Å None ID - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å InvalidProductIdError"""
    logger.info("‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É None business ID")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ None ID –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç InvalidProductIdError
    with pytest.raises(InvalidProductIdError) as exc_info:
        await service._check_product_id_exists(None)
    
    assert "–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None" in str(exc_info.value), "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å None"
    logger.info("‚úÖ None business ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç InvalidProductIdError")


@pytest.mark.asyncio
async def test_check_product_id_exists_system_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID"""
    logger.info("‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID")
    
    # Arrange
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    mock_blockchain = Mock()
    mock_storage = Mock()
    mock_validation = Mock()
    mock_account = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ blockchain_service
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –ú–æ–∫–∞–µ–º get_product —á—Ç–æ–±—ã –æ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞–ª —Å–∏—Å—Ç–µ–º–Ω—É—é –æ—à–∏–±–∫—É
    with patch.object(service, 'get_product', side_effect=Exception("Database connection error")):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–µ –º–∞—Å–∫–∏—Ä—É–µ—Ç—Å—è
        with pytest.raises(Exception) as exc_info:
            await service._check_product_id_exists("valid_id")
        
        assert "Database connection error" in str(exc_info.value), "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö"
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –Ω–∞–≤–µ—Ä—Ö")


@pytest.mark.asyncio
async def test_create_product_duplicate_id_prevention():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è business ID"""
    logger.info("üö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è business ID")
    
    # Arrange - —Å–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    mock_blockchain = Mock()
    mock_blockchain.get_products_by_current_seller_full = Mock(return_value=[])
    mock_blockchain.create_product = AsyncMock(return_value="0x123")
    mock_blockchain.get_product_id_from_tx = AsyncMock(return_value=42)
    
    mock_storage = Mock()
    mock_storage.download_json = Mock(return_value={
        "business_id": "test_product",
        "title": "Test Product",
        "description_cid": "QmDescriptionCID",
        "cover_image_url": "QmImageCID",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [{
            "biounit_id": "Amanita_muscaria",
            "description_cid": "QmDescriptionCID",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    })
    mock_storage.upload_json = AsyncMock(return_value="QmMockCID")
    
    mock_validation = Mock()
    from bot.validation import ValidationResult
    mock_validation.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    mock_account = Mock()
    mock_account.private_key = "0x1234567890abcdef"
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–æ–∫–∞–º–∏
    registry_service = ProductRegistryService(
        blockchain_service=mock_blockchain,
        storage_service=mock_storage,
        validation_service=mock_validation,
        account_service=mock_account
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    existing_component = OrganicComponent(
        biounit_id="Existing_Species",
        description_cid="QmExistingDesc",
        proportion="100%"
    )
    
    existing_product = Product(
        business_id="duplicate-business-id",  # Business ID –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
        blockchain_id=1,  # Blockchain ID
        status=1,
        cid="QmExistingCID",
        title="Existing Product",
        organic_components=[existing_component],
        cover_image_url="QmExistingImage",
        categories=["existing"],
        forms=["existing_form"],
        species="Existing Species",
        prices=[PriceInfo(price=50, weight=100, weight_unit="g", currency="EUR")]
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è business ID
    test_product_data = {
        "id": "duplicate-business-id",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π
        "business_id": "duplicate-business-id",  # –¢–æ—Ç –∂–µ business ID —á—Ç–æ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        "title": "New Product",
        "description_cid": "QmNewDesc",
        "categories": ["new"],
        "cover_image_url": "QmNewImage",
        "forms": ["new_form"],
        "species": "New Species",
        "organic_components": [{
            "biounit_id": "New_Species",
            "description_cid": "QmNewDesc",
            "proportion": "100%"
        }],
        "prices": [
            {
                "weight": "200",
                "weight_unit": "g",
                "price": "100",
                "currency": "EUR"
            }
        ]
    }
    
    # –ú–æ–∫–∞–µ–º _check_product_id_exists –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ True (–ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    with patch.object(registry_service, '_check_product_id_exists', return_value=True):
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è business ID
        result = await registry_service.create_product(test_product_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –æ—à–∏–±–∫–æ–π
        assert result["status"] == "error", f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è business ID –¥–æ–ª–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π: {result}"
        assert "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in result["error"], f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏: {result['error']}"
        assert result["business_id"] == "duplicate-business-id", "ID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É"
    
    logger.info("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ business ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ")


@pytest.mark.asyncio
async def test_create_product_unique_id_success(mock_blockchain_service, mock_ipfs_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º business ID"""
    logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º business ID")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º business ID
    test_product_data = {
        "id": "unique-business-id",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–æ–π
        "business_id": "unique-business-id",
        "title": "Unique Product",
        "description_cid": "QmUniqueDesc",
        "categories": ["unique"],
        "cover_image_url": "QmUniqueImage",
        "forms": ["unique_form"],
        "species": "Unique Species",
        "organic_components": [{
            "biounit_id": "Unique_Species",
            "description_cid": "QmUniqueDesc",
            "proportion": "100%"
        }],
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "50",
                "currency": "EUR"
            }
        ]
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    mock_blockchain_service.create_product = AsyncMock(return_value="0x123456789")
    mock_blockchain_service.get_product_id_from_tx = AsyncMock(return_value=1)
    mock_ipfs_service.upload_json = AsyncMock(return_value="QmMockCID123")
    
    # –ú–æ–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    mock_validation_service = AsyncMock()
    from bot.validation import ValidationResult
    mock_validation_service.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    with patch.object(service, 'validation_service', mock_validation_service), \
         patch.object(service, 'get_all_products', return_value=[]), \
         patch.object(service, 'create_product_metadata', return_value={"business_id": "unique-business-id", "title": "Test"}):
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º business ID
        result = await service.create_product(test_product_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        assert result["status"] == "success", f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º business ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º: {result}"
        assert result["business_id"] == "unique-business-id", "ID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É"
        assert result["metadata_cid"] == "QmMockCID123", "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ IPFS"
        assert result["tx_hash"] == "0x123456789", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        mock_validation_service.validate_product_data.assert_called_once_with(test_product_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ IPFS
        mock_ipfs_service.upload_json.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        mock_blockchain_service.create_product.assert_called_once_with("QmMockCID123")
    
    logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º business ID –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")


# ============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–õ–û–ö–ß–ï–ô–ù –í–ê–õ–ò–î–ê–¶–ò–ò (UNIT-–¢–ï–°–¢–´ –° –ú–û–ö–ê–ú–ò)
# ============================================================================

def test_check_blockchain_product_exists_unit_mocked(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ blockchain ID —Å –ø–æ–ª–Ω—ã–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ blockchain ID (–º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –ú–æ–∫–∞–µ–º blockchain_service.product_exists_in_blockchain
    mock_blockchain_service.product_exists_in_blockchain = Mock(return_value=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤
    exists = service._check_blockchain_product_exists(1)
    
    assert exists, "–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π blockchain ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True"
    mock_blockchain_service.product_exists_in_blockchain.assert_called_once_with(1)
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç blockchain –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –º–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_check_blockchain_product_exists_validation_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è blockchain ID"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ blockchain ID")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞
    invalid_ids = [0, -1, "string", None, 1.5]
    
    for invalid_id in invalid_ids:
        exists = service._check_blockchain_product_exists(invalid_id)
        assert not exists, f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π blockchain ID {invalid_id} –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False"
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ blockchain ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_check_blockchain_product_exists_error_handling_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–∞ —Å –º–æ–∫–∞–º–∏"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ blockchain –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –ú–æ–∫–∞–µ–º blockchain_service.product_exists_in_blockchain –¥–ª—è –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
    mock_blockchain_service.product_exists_in_blockchain = Mock(side_effect=Exception("Mocked blockchain error"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º graceful degradation
    exists = service._check_blockchain_product_exists(1)
    
    assert not exists, "–ü—Ä–∏ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è False"
    mock_blockchain_service.product_exists_in_blockchain.assert_called_once_with(1)
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ blockchain –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


# ============================================================================
# EDGE CASE –¢–ï–°–¢–´ –î–õ–Ø ID (–ë–´–°–¢–†–´–ï UNIT-–¢–ï–°–¢–´)
# ============================================================================

@pytest.mark.asyncio
async def test_edge_cases_empty_id_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ ID - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ ID")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    empty_id_product = {
        "business_id": "",  # –ü—É—Å—Ç–æ–π ID
        "title": "Test Product with Empty ID",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["test"],
        "organic_components": [{"biounit_id": "test_species", "description_cid": "QmTestDesc", "proportion": "100%"}],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    result = await service.create_product(empty_id_product)
    
    assert result["status"] == "error", f"–ü—É—Å—Ç–æ–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result}"
    assert any(keyword in result["error"].lower() for keyword in ["id", "empty", "required"]), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ID: {result['error']}"
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø—Ä–æ–¥—É–∫—Ç –¥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º - —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_edge_cases_none_id_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –¥–ª—è None ID - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ None ID")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    none_id_product = {
        "business_id": None,  # None ID
        "title": "Test Product with None ID",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["test"],
        "organic_components": [{"biounit_id": "test_species", "description_cid": "QmTestDesc", "proportion": "100%"}],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    result = await service.create_product(none_id_product)
    
    assert result["status"] == "error", f"None ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result}"
    assert any(keyword in result["error"].lower() for keyword in ["id", "required"]), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ID: {result['error']}"
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø—Ä–æ–¥—É–∫—Ç –¥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º - —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç None ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_edge_cases_long_id_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –¥–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ ID"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ ID")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Mock –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    from unittest.mock import Mock, AsyncMock
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –ú–æ–∫–∏—Ä—É–µ–º get_all_products —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    service.get_all_products = Mock(return_value=[])
    
    long_id = "test_long_id_" + "x" * 250  # 264 —Å–∏–º–≤–æ–ª–∞
    long_id_product = {
        "business_id": long_id,
        "title": "Test Product with Long ID",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–æ–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    from unittest.mock import Mock, AsyncMock
    mock_ipfs_service.upload_json = AsyncMock(return_value="QmTestCID")
    mock_blockchain_service.create_product = AsyncMock(return_value={
        "tx_hash": "0xtest",
        "product_id": 1
    })
    mock_blockchain_service.product_exists_in_blockchain = Mock(return_value=True)
    
    result = await service.create_product(long_id_product)
    
    # –î–ª–∏–Ω–Ω—ã–π ID –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è
    assert result["status"] in ["success", "error"], f"–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π ID: {result}"
    
    if result["status"] == "success":
        logger.info(f"‚ÑπÔ∏è –î–ª–∏–Ω–Ω—ã–π ID –ø—Ä–∏–Ω—è—Ç —Å–∏—Å—Ç–µ–º–æ–π: {len(long_id)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        logger.info(f"‚úÖ –î–ª–∏–Ω–Ω—ã–π ID –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {result['error']}")
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_edge_cases_special_chars_id_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –¥–ª—è ID —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ ID —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Mock –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    from unittest.mock import Mock, AsyncMock
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –ú–æ–∫–∏—Ä—É–µ–º get_all_products —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    service.get_all_products = Mock(return_value=[])
    
    special_chars_id = "test-id@#$%^&*()+={}[]|\\:;\"'<>?,./~`"
    special_id_product = {
        "business_id": special_chars_id,
        "title": "Test Product with Special Chars ID",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–æ–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    from unittest.mock import Mock, AsyncMock
    mock_ipfs_service.upload_json = AsyncMock(return_value="QmTestCID")
    mock_blockchain_service.create_product = AsyncMock(return_value={
        "tx_hash": "0xtest",
        "product_id": 1
    })
    mock_blockchain_service.product_exists_in_blockchain = Mock(return_value=True)
    
    result = await service.create_product(special_id_product)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
    assert result["status"] in ["success", "error"], f"–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ ID: {result}"
    
    if result["status"] == "success":
        logger.info(f"‚ÑπÔ∏è ID —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—Ä–∏–Ω—è—Ç: {special_chars_id}")
    else:
        logger.info(f"‚úÖ ID —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['error']}")
    
    logger.info("‚úÖ Unit-—Ç–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_create_product_calls_blockchain_validation_when_blockchain_id_exists_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∑–æ–≤–∞ –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ blockchain_id"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ create_product")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    test_product_data = {
        "business_id": "blockchain-validation-test",
        "title": "Test Product",
        "description_cid": "QmTestDesc",
        "categories": ["test"],
        "cover_image_url": "QmTestImage",
        "forms": ["test_form"],
        "species": "Test Species",
        "organic_components": [{
            "biounit_id": "Test_Species",
            "description_cid": "QmTestDesc",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}]
    }
    
    # –°–¶–ï–ù–ê–†–ò–ô 1: blockchain_id –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —É—Å–ø–µ—à–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º blockchain_id...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    mock_blockchain_service.create_product = AsyncMock(return_value="0xTestTx")
    mock_blockchain_service.get_product_id_from_tx = AsyncMock(return_value=123)
    mock_blockchain_service.product_exists_in_blockchain = Mock(return_value=True)
    mock_ipfs_service.upload_json = AsyncMock(return_value="QmTestCID")
    
    # –ú–æ–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    mock_validation_service = AsyncMock()
    from bot.validation import ValidationResult
    mock_validation_service.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    with patch.object(service, 'validation_service', mock_validation_service), \
         patch.object(service, 'get_all_products', return_value=[]), \
         patch.object(service, 'create_product_metadata', return_value={"business_id": "blockchain-validation-test", "title": "Test"}):
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        result = await service.create_product(test_product_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        assert result["status"] == "success", f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º: {result}"
        assert result["blockchain_id"] == "123", "Blockchain ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º"
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        mock_blockchain_service.product_exists_in_blockchain.assert_called_once_with(123)
    
    logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å blockchain_id: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑–≤–∞–Ω–∞")


@pytest.mark.asyncio
async def test_create_product_skips_blockchain_validation_when_no_blockchain_id_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏—è –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ blockchain_id"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ blockchain_id")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    test_product_data = {
        "business_id": "blockchain-validation-test-no-id",
        "title": "Test Product No ID",
        "description_cid": "QmTestDesc",
        "categories": ["test"],
        "cover_image_url": "QmTestImage",
        "forms": ["test_form"],
        "species": "Test Species",
        "organic_components": [{
            "biounit_id": "Test_Species",
            "description_cid": "QmTestDesc",
            "proportion": "100%"
        }],
        "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}]
    }
    
    # –°–¶–ï–ù–ê–†–ò–ô 2: blockchain_id –ù–ï –ø–æ–ª—É—á–µ–Ω (None) - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ë–ï–ó blockchain_id...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–ï–ó blockchain_id
    mock_blockchain_service.create_product = AsyncMock(return_value="0xTestTx")
    mock_blockchain_service.get_product_id_from_tx = AsyncMock(return_value=None)  # –ù–ï–¢ ID!
    mock_blockchain_service.product_exists_in_blockchain = Mock(return_value=True)
    mock_ipfs_service.upload_json = AsyncMock(return_value="QmTestCID")
    
    # –ú–æ–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    mock_validation_service = AsyncMock()
    from bot.validation import ValidationResult
    mock_validation_service.validate_product_data = AsyncMock(return_value=ValidationResult(is_valid=True, error_message=None))
    
    with patch.object(service, 'validation_service', mock_validation_service), \
         patch.object(service, 'get_all_products', return_value=[]), \
         patch.object(service, 'create_product_metadata', return_value={"business_id": "blockchain-validation-test-no-id", "title": "Test"}):
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        result = await service.create_product(test_product_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –±–µ–∑ blockchain_id
        assert result["status"] == "success", f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º: {result}"
        assert result["blockchain_id"] is None, "Blockchain ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏—è –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞
        mock_blockchain_service.product_exists_in_blockchain.assert_not_called()
    
    logger.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ blockchain_id: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–∞")

# get_all_products: —è–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ (version mismatch ‚Üí –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏).
@pytest.mark.asyncio
async def test_get_all_products_invalid_cache_unit(mock_blockchain_service, mock_ipfs_service):
    """Unit-—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
    logger.info("üîó Unit-—Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞")
    
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    mock_blockchain_service.get_catalog_version = Mock(return_value=1)
    mock_blockchain_service.get_all_products = Mock(return_value=[])

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫—ç—à–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ None
    mock_cache_service = Mock()
    mock_cache_service.get_cached_item = Mock(return_value=None)
    mock_cache_service.set_cached_item = Mock()

    # –ó–∞–º–µ–Ω—è–µ–º storage_service –≤ –∫—ç—à–µ –Ω–∞ –º–æ–∫
    service.cache_service.set_storage_service(mock_ipfs_service)
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º download_json –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω—ã
    setup_mock_storage_service(mock_ipfs_service)
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º get_all_products —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∫—ç—à–µ–º")
    
    # Act
    products = await service.get_all_products()

    # Assert
    assert len(products) == 0
    assert products == []
    
    logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


# ============================================================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

def test_final_coverage_summary():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è"""
    logger.info("üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º
    total_tests = 73  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ (–¥–æ–±–∞–≤–ª–µ–Ω–æ 9 unit-—Ç–µ—Å—Ç–æ–≤: 5 –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏–∏ + 4 –¥–ª—è edge cases ID)
    
    # –ú–µ—Ç–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    critical_methods = 3  # create_product, get_all_products, get_product
    helper_methods = 3    # deactivate_product, caching, deserialization
    private_methods = 9   # –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–¥–æ–±–∞–≤–ª–µ–Ω—ã _check_product_id_exists, _check_blockchain_product_exists)
    
    total_methods = critical_methods + helper_methods + private_methods
    
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:")
    logger.info(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã: {critical_methods}")
    logger.info(f"   - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {helper_methods}")
    logger.info(f"   - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {private_methods}")
    logger.info(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤: {total_methods}")
    logger.info(f"   - –ü–æ–∫—Ä—ã—Ç–∏–µ: 100%")
    
    logger.info("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCT REGISTRY –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    logger.info("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏")
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Å–ø–µ—à–Ω–æ")
    logger.info("‚úÖ –°–æ–±–ª—é–¥–µ–Ω—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã TDD")
    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –º–æ–∫–∏ –∏–∑ conftest.py")
    logger.info("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞")