import pytest
import logging
import json
import os
from dotenv import load_dotenv
import time
from pathlib import Path
import tempfile
import shutil
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

from bot.services.core.storage.pinata import SecurePinataUploader
from bot.services.core.storage.exceptions import StorageValidationError, StorageError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

TEST_ID = "88888888"

@pytest.fixture
def pinata_uploader():
    """–§–∏–∫—Å—Ç—É—Ä–∞: —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SecurePinataUploader"""
    logger.info("=" * 50)
    logger.info("üîß –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –§–ò–ö–°–¢–£–†–´ pinata_uploader")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    assert os.getenv("PINATA_API_KEY"), "PINATA_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert os.getenv("PINATA_API_SECRET"), "PINATA_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    uploader = SecurePinataUploader()
    logger.info("‚úÖ SecurePinataUploader —Å–æ–∑–¥–∞–Ω")

    return uploader

@pytest.fixture
def temp_test_files():
    """–§–∏–∫—Å—Ç—É—Ä–∞: —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    temp_dir = tempfile.mkdtemp()
    files = []
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        text_file = Path(temp_dir) / "test.txt"
        with open(text_file, "w") as f:
            f.write(f"Test content {TEST_ID}")
        files.append(text_file)
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        json_file = Path(temp_dir) / "test.json"
        with open(json_file, "w") as f:
            json.dump({"test_id": TEST_ID}, f)
        files.append(json_file)
        
        yield files
    finally:
        shutil.rmtree(temp_dir)

def test_upload_and_download_text(pinata_uploader):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON-–¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")

    test_data = {
        "test_id": TEST_ID,
        "description": "Test via Pinata"
    }

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        cid = pinata_uploader.upload_text(test_data, "test_data.json")
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ, CID: {cid}")

        time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        downloaded = pinata_uploader.download_json(cid)
        assert downloaded is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        assert downloaded["test_id"] == TEST_ID, "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cached_info = pinata_uploader.find_file_by_name("test_data.json")
        assert cached_info, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
        assert cached_info[0] == cid, "CID –≤ –∫—ç—à–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise

def test_download_with_ipfs_prefix(pinata_uploader):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ipfs://"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ipfs://")

    test_data = {"test_id": TEST_ID}

    try:
        cid = pinata_uploader.upload_text(test_data)
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        prefixed_cid = f"ipfs://{cid}"

        time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

        result = pinata_uploader.download_json(prefixed_cid)
        assert result is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        assert result["test_id"] == TEST_ID, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –Ω–µ—É–¥–∞—á–Ω–æ"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        gateway_url = pinata_uploader.get_gateway_url(prefixed_cid)
        assert gateway_url.startswith("https://"), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç gateway URL"
        assert cid in gateway_url, "CID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ gateway URL"

        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise

def test_invalid_cid_handling(pinata_uploader):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö CID"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö CID")

    invalid_cids = ["badcid", "notexists123", ""]

    for cid in invalid_cids:
        logger.debug(f"üß™ –¢–µ—Å—Ç CID: {cid}")
        try:
            result = pinata_uploader.download_json(cid)
            # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π CID –Ω–µ –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —ç—Ç–æ –æ—à–∏–±–∫–∞
            pytest.fail(f"–û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ CID: {cid}")
        except Exception as e:
            logger.debug(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è CID '{cid}': {type(e).__name__}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            assert isinstance(e, (StorageError, requests.exceptions.HTTPError)), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {type(e)}"

    logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")

def test_file_validation(pinata_uploader, temp_test_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    text_file = temp_test_files[0]
    try:
        pinata_uploader.validate_file(str(text_file))
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    with pytest.raises(StorageValidationError):
        pinata_uploader.validate_file("nonexistent.file")
        logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")

def test_batch_upload(pinata_uploader, temp_test_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    files = [
        (str(file), f"test_file_{i}.{file.suffix}")
        for i, file in enumerate(temp_test_files)
    ]
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        results = pinata_uploader.upload_files_batch(files)
        assert len(results) == len(files), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for file_name, cid in results.items():
            assert cid is not None, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}"
            logger.info(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {cid}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached_info = pinata_uploader.find_file_by_name(file_name)
            assert cached_info, f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
            assert cached_info[0] == cid, f"CID –≤ –∫—ç—à–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è {file_name}"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise

def test_metrics(pinata_uploader, temp_test_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    file_path = temp_test_files[0]
    cid = pinata_uploader.upload_file(str(file_path), "test_metrics.txt")
    assert cid, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = pinata_uploader.metrics
    
    assert len(metrics.upload_times) > 0, "–ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏"
    assert metrics.get_average_upload_time() > 0, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–æ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à-–º–µ—Ç—Ä–∏–∫–∏
    pinata_uploader.find_file_by_name("test_metrics.txt")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å hit
    pinata_uploader.find_file_by_name("nonexistent.file")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å miss
    
    assert metrics.cache_hits > 0, "–ù–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"
    assert metrics.cache_misses > 0, "–ù–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–æ–º–∞—Ö–∏ –∫—ç—à–∞"
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")

def test_pinata_connection_minimal():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Pinata API"""
    logger.info("=" * 50)
    logger.info("üöÄ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Pinata")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    api_key = os.getenv("PINATA_API_KEY")
    api_secret = os.getenv("PINATA_API_SECRET")
    
    logger.info(f"üîë API Key: {api_key[:10]}..." if api_key else "‚ùå API Key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    logger.info(f"üîë API Secret: {api_secret[:10]}..." if api_secret else "‚ùå API Secret –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    assert api_key, "PINATA_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert api_secret, "PINATA_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        uploader = SecurePinataUploader()
        logger.info("‚úÖ SecurePinataUploader —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {"test": "connection", "timestamp": time.time()}
        
        logger.info("üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        cid = uploader.upload_text(test_data, "connection_test.json")
        
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, CID: {cid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑–±–µ–≥–∞–µ–º rate limiting)
        logger.info("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –†–ê–ë–û–¢–ê–ï–¢ - –°–û–ï–î–ò–ù–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û")
        
        logger.info("üéâ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù - –°–û–ï–î–ò–ù–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        pytest.fail(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")

def test_pinata_jwt_connection():
    """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Pinata API —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–ï–°–¢ JWT: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Pinata —á–µ—Ä–µ–∑ JWT")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    jwt_token = os.getenv("PINATA_JWT")
    
    logger.info(f"üîë JWT Token: {jwt_token[:20]}..." if jwt_token else "‚ùå JWT Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    assert jwt_token, "PINATA_JWT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        import requests
        
        headers = {
            "Authorization": f"Bearer {jwt_token}",
            "Content-Type": "application/json"
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "pinataContent": {
                "test": "jwt_connection",
                "timestamp": time.time()
            },
            "pinataMetadata": {
                "name": "jwt_test.json"
            }
        }
        
        logger.info("üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ JWT...")
        
        response = requests.post(
            "https://api.pinata.cloud/pinning/pinJSONToIPFS",
            headers=headers,
            json=test_data,
            timeout=30
        )
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        assert response.status_code == 200, f"JWT –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.status_code} - {response.text}"
        
        result = response.json()
        cid = result.get("IpfsHash")
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ JWT API"
        assert cid.startswith("Qm"), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID: {cid}"
        
        logger.info(f"‚úÖ JWT –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, CID: {cid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑–±–µ–≥–∞–µ–º rate limiting)
        logger.info("‚úÖ JWT –ó–ê–ì–†–£–ó–ö–ê –†–ê–ë–û–¢–ê–ï–¢ - –°–û–ï–î–ò–ù–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê JWT –¢–ï–°–¢–ê: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        pytest.fail(f"JWT —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")

def test_pinata_direct_api():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Pinata API —Å API –∫–ª—é—á–∞–º–∏"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û API: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å API –∫–ª—é—á–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    api_key = os.getenv("PINATA_API_KEY")
    api_secret = os.getenv("PINATA_API_SECRET")
    
    logger.info(f"üîë API Key: {api_key[:10]}..." if api_key else "‚ùå API Key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    logger.info(f"üîë API Secret: {api_secret[:10]}..." if api_secret else "‚ùå API Secret –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    assert api_key, "PINATA_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert api_secret, "PINATA_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        import requests
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ curl
        headers = {
            "pinata_api_key": api_key,
            "pinata_secret_api_key": api_secret,
            "Content-Type": "application/json"
        }
        
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        logger.info("üîê –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        auth_response = requests.get(
            "https://api.pinata.cloud/data/testAuthentication",
            headers=headers,
            timeout=30
        )
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}")
        assert auth_response.status_code == 200, f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {auth_response.status_code} - {auth_response.text}"
        logger.info(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {auth_response.json()}")
        
        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É JSON
        test_data = {
            "pinataContent": {
                "test": "direct_api",
                "timestamp": time.time()
            },
            "pinataMetadata": {
                "name": "direct_api_test.json"
            }
        }
        
        logger.info("üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON...")
        upload_response = requests.post(
            "https://api.pinata.cloud/pinning/pinJSONToIPFS",
            headers=headers,
            json=test_data,
            timeout=30
        )
        
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏: {upload_response.status_code}")
        
        assert upload_response.status_code == 200, f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {upload_response.status_code} - {upload_response.text}"
        
        result = upload_response.json()
        cid = result.get("IpfsHash")
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API"
        assert cid.startswith("Qm"), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID: {cid}"
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, CID: {cid}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–∏–∑–±–µ–≥–∞–µ–º rate limiting)
        logger.info("‚úÖ –ü–†–Ø–ú–û–ô API –ó–ê–ì–†–£–ó–ö–ê –†–ê–ë–û–¢–ê–ï–¢ - –°–û–ï–î–ò–ù–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–Ø–ú–û–ì–û API –¢–ï–°–¢–ê: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        pytest.fail(f"–ü—Ä—è–º–æ–π API —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")

def test_pinata_diagnostic():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Pinata API"""
    logger.info("=" * 50)
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Pinata API")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫–ª—é—á–µ–π
    api_key = os.getenv("PINATA_API_KEY")
    api_secret = os.getenv("PINATA_API_SECRET")
    jwt_token = os.getenv("PINATA_JWT")
    
    logger.info("üìã –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–ô:")
    logger.info(f"  üîë API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"  üîë API Secret: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_secret else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    logger.info(f"  üîë JWT Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if jwt_token else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    try:
        import requests
        
        # –¢–µ—Å—Ç 1: API –∫–ª—é—á–∏ - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        logger.info("\nüîê –¢–ï–°–¢ 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è API –∫–ª—é—á–µ–π")
        if api_key and api_secret:
            headers = {
                "pinata_api_key": api_key,
                "pinata_secret_api_key": api_secret
            }
            
            auth_response = requests.get(
                "https://api.pinata.cloud/data/testAuthentication",
                headers=headers,
                timeout=10
            )
            
            assert auth_response.status_code == 200, f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è API –∫–ª—é—á–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å: {auth_response.status_code} - {auth_response.text}"
            logger.info("  ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è API –∫–ª—é—á–µ–π: –£–°–ü–ï–®–ù–û")
        else:
            pytest.fail("API –∫–ª—é—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç 2: API –∫–ª—é—á–∏ - –∑–∞–≥—Ä—É–∑–∫–∞
        logger.info("\nüì§ –¢–ï–°–¢ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ API –∫–ª—é—á–∏")
        if api_key and api_secret:
            headers = {
                "pinata_api_key": api_key,
                "pinata_secret_api_key": api_secret,
                "Content-Type": "application/json"
            }
            
            test_data = {
                "pinataContent": {"test": "diagnostic"},
                "pinataMetadata": {"name": "diagnostic_test.json"}
            }
            
            upload_response = requests.post(
                "https://api.pinata.cloud/pinning/pinJSONToIPFS",
                headers=headers,
                json=test_data,
                timeout=10
            )
            
            assert upload_response.status_code == 200, f"–ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å: {upload_response.status_code} - {upload_response.text}"
            logger.info("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π: –£–°–ü–ï–®–ù–û")
        else:
            pytest.fail("API –∫–ª—é—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç 3: JWT —Ç–æ–∫–µ–Ω
        logger.info("\nüîë –¢–ï–°–¢ 3: JWT —Ç–æ–∫–µ–Ω")
        if jwt_token:
            headers = {
                "Authorization": f"Bearer {jwt_token}",
                "Content-Type": "application/json"
            }
            
            test_data = {
                "pinataContent": {"test": "jwt_diagnostic"},
                "pinataMetadata": {"name": "jwt_diagnostic_test.json"}
            }
            
            jwt_response = requests.post(
                "https://api.pinata.cloud/pinning/pinJSONToIPFS",
                headers=headers,
                json=test_data,
                timeout=10
            )
            
            assert jwt_response.status_code == 200, f"JWT –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {jwt_response.status_code} - {jwt_response.text}"
            logger.info("  ‚úÖ JWT –∑–∞–≥—Ä—É–∑–∫–∞: –£–°–ü–ï–®–ù–û")
        else:
            logger.info("  ‚ö†Ô∏è JWT —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç)")
        
        # –†–µ–∑—é–º–µ
        logger.info("\nüìä –†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        logger.info("  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        logger.info("  ‚úÖ API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {str(e)}")
        pytest.fail(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")

def test_pinata_amanita_key_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–ª—é—á–∞ Amanita —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("=" * 50)
    logger.info("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ Amanita")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    api_key = os.getenv("PINATA_API_KEY")
    api_secret = os.getenv("PINATA_API_SECRET")
    
    logger.info(f"üîë API Key: {api_key}")
    logger.info(f"üîë API Secret: {api_secret[:20]}...")
    
    assert api_key, "PINATA_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert api_secret, "PINATA_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    try:
        import requests
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            "pinata_api_key": api_key,
            "pinata_secret_api_key": api_secret,
            "Content-Type": "application/json"
        }
        
        logger.info("üìã –ó–ê–ì–û–õ–û–í–ö–ò –ó–ê–ü–†–û–°–ê:")
        for key, value in headers.items():
            if "secret" in key.lower():
                logger.info(f"  {key}: {value[:20]}...")
            else:
                logger.info(f"  {key}: {value}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "pinataContent": {
                "test": "amanita_key_test",
                "timestamp": time.time(),
                "key_name": "Amanita"
            },
            "pinataMetadata": {
                "name": "amanita_test.json"
            }
        }
        
        logger.info("üì§ –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê:")
        logger.info(f"  URL: https://api.pinata.cloud/pinning/pinJSONToIPFS")
        logger.info(f"  Method: POST")
        logger.info(f"  Data: {json.dumps(test_data, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            "https://api.pinata.cloud/pinning/pinJSONToIPFS",
            headers=headers,
            json=test_data,
            timeout=30
        )
        
        logger.info("üìä –û–¢–í–ï–¢ –û–¢ –°–ï–†–í–ï–†–ê:")
        logger.info(f"  Status Code: {response.status_code}")
        logger.info(f"  Headers: {dict(response.headers)}")
        logger.info(f"  Response: {response.text}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
        assert response.status_code == 200, f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}"
        
        result = response.json()
        cid = result.get("IpfsHash")
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API"
        assert cid.startswith("Qm"), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID: {cid}"
        
        logger.info(f"‚úÖ –£–°–ü–ï–•! CID: {cid}")
        # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - –Ω–µ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True
        # pytest –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {str(e)}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        pytest.fail(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")

def test_pinata_alternative_endpoints():
    """–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints Pinata API"""
    logger.info("=" * 50)
    logger.info("üîç –¢–ï–°–¢ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• ENDPOINTS")
    
    api_key = os.getenv("PINATA_API_KEY")
    api_secret = os.getenv("PINATA_API_SECRET")
    
    headers = {
        "pinata_api_key": api_key,
        "pinata_secret_api_key": api_secret,
        "Content-Type": "application/json"
    }
    
    try:
        import requests
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        logger.info("üîê –¢–ï–°–¢ 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        auth_response = requests.get(
            "https://api.pinata.cloud/data/testAuthentication",
            headers=headers,
            timeout=10
        )
        logger.info(f"  –°—Ç–∞—Ç—É—Å: {auth_response.status_code}")
        logger.info(f"  –û—Ç–≤–µ—Ç: {auth_response.text}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        logger.info("üìã –¢–ï–°–¢ 2: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
        list_response = requests.get(
            "https://api.pinata.cloud/data/pinList",
            headers=headers,
            timeout=10
        )
        logger.info(f"  –°—Ç–∞—Ç—É—Å: {list_response.status_code}")
        if list_response.status_code == 200:
            data = list_response.json()
            logger.info(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(data.get('rows', []))}")
        else:
            logger.info(f"  –û—Ç–≤–µ—Ç: {list_response.text}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π endpoint
        logger.info("üì§ –¢–ï–°–¢ 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump({"test": "alternative_endpoint"}, f)
            temp_file_path = f.name
        
        try:
            with open(temp_file_path, 'rb') as f:
                files = {'file': f}
                alt_response = requests.post(
                    "https://api.pinata.cloud/pinning/pinFileToIPFS",
                    headers={
                        "pinata_api_key": api_key,
                        "pinata_secret_api_key": api_secret
                    },
                    files=files,
                    timeout=30
                )
            
            logger.info(f"  –°—Ç–∞—Ç—É—Å: {alt_response.status_code}")
            logger.info(f"  –û—Ç–≤–µ—Ç: {alt_response.text}")
            
            assert alt_response.status_code == 200, f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {alt_response.status_code} - {alt_response.text}"
            
            result = alt_response.json()
            cid = result.get("IpfsHash")
            assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ endpoint"
            assert cid.startswith("Qm"), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID: {cid}"
            
            logger.info(f"  ‚úÖ –£–°–ü–ï–•! CID: {cid}")
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        pytest.fail(f"–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")

def test_pinata_new_key():
    """–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)"""
    logger.info("=" * 50)
    logger.info("üÜï –¢–ï–°–¢ –ù–û–í–û–ì–û API –ö–õ–Æ–ß–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    new_api_key = os.getenv("PINATA_NEW_API_KEY")
    new_api_secret = os.getenv("PINATA_NEW_API_SECRET")
    
    if not new_api_key or not new_api_secret:
        logger.info("‚ö†Ô∏è –ù–æ–≤—ã–π API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:")
        logger.info("   PINATA_NEW_API_KEY=your_new_key")
        logger.info("   PINATA_NEW_API_SECRET=your_new_secret")
        pytest.skip("–ù–æ–≤—ã–π API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
    
    logger.info(f"üîë –ù–æ–≤—ã–π API Key: {new_api_key}")
    logger.info(f"üîë –ù–æ–≤—ã–π API Secret: {new_api_secret[:20]}...")
    
    try:
        import requests
        
        headers = {
            "pinata_api_key": new_api_key,
            "pinata_secret_api_key": new_api_secret,
            "Content-Type": "application/json"
        }
        
        # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        logger.info("üîê –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞...")
        auth_response = requests.get(
            "https://api.pinata.cloud/data/testAuthentication",
            headers=headers,
            timeout=10
        )
        
        assert auth_response.status_code == 200, f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {auth_response.status_code}"
        
        logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–∞")
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        test_data = {
            "pinataContent": {"test": "new_key_test"},
            "pinataMetadata": {"name": "new_key_test.json"}
        }
        
        logger.info("üì§ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º...")
        upload_response = requests.post(
            "https://api.pinata.cloud/pinning/pinJSONToIPFS",
            headers=headers,
            json=test_data,
            timeout=30
        )
        
        assert upload_response.status_code == 200, f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º –Ω–µ —É–¥–∞–ª–∞—Å—å: {upload_response.status_code} - {upload_response.text}"
        
        result = upload_response.json()
        cid = result.get("IpfsHash")
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞"
        assert cid.startswith("Qm"), f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID: {cid}"
        
        logger.info(f"‚úÖ –ù–û–í–´–ô –ö–õ–Æ–ß –†–ê–ë–û–¢–ê–ï–¢! CID: {cid}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞: {str(e)}")
        pytest.fail(f"–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
