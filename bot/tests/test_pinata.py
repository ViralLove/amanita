import pytest
import logging
import json
import os
from dotenv import load_dotenv
import time
from pathlib import Path
import tempfile
import shutil

from bot.services.pinata import SecurePinataUploader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

TEST_ID = "88888888"

@pytest.fixture
def pinata_uploader():
    """–§–∏–∫—Å—Ç—É—Ä–∞: —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SecurePinataUploader"""
    logger.info("=" * 50)
    logger.info("üîß –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –§–ò–ö–°–¢–£–†–´ pinata_uploader")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
    assert os.getenv("PINATA_API_KEY"), "PINATA_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert os.getenv("PINATA_API_SECRET"), "PINATA_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    uploader = SecurePinataUploader()
    logger.info("‚úÖ SecurePinataUploader —Å–æ–∑–¥–∞–Ω")

    return uploader

@pytest.fixture
def temp_test_files():
    """–§–∏–∫—Å—Ç—É—Ä–∞: —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    temp_dir = tempfile.mkdtemp()
    files = []
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        text_file = Path(temp_dir) / "test.txt"
        with open(text_file, "w") as f:
            f.write(f"Test content {TEST_ID}")
        files.append(text_file)
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        json_file = Path(temp_dir) / "test.json"
        with open(json_file, "w") as f:
            json.dump({"test_id": TEST_ID}, f)
        files.append(json_file)
        
        yield files
    finally:
        shutil.rmtree(temp_dir)

def test_upload_and_download_text(pinata_uploader):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON-–¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")

    test_data = {
        "test_id": TEST_ID,
        "description": "Test via Pinata"
    }

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        cid = pinata_uploader.upload_text(test_data, "test_data.json")
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ, CID: {cid}")

        time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        downloaded = pinata_uploader.download_json(cid)
        assert downloaded is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        assert downloaded["test_id"] == TEST_ID, "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cached_info = pinata_uploader.find_file_by_name("test_data.json")
        assert cached_info, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
        assert cached_info[0] == cid, "CID –≤ –∫—ç—à–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise

def test_download_with_ipfs_prefix(pinata_uploader):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ipfs://"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ipfs://")

    test_data = {"test_id": TEST_ID}

    try:
        cid = pinata_uploader.upload_text(test_data)
        assert cid, "CID –Ω–µ –ø–æ–ª—É—á–µ–Ω"
        prefixed_cid = f"ipfs://{cid}"

        time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

        result = pinata_uploader.download_json(prefixed_cid)
        assert result is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        assert result["test_id"] == TEST_ID, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –Ω–µ—É–¥–∞—á–Ω–æ"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        gateway_url = pinata_uploader.get_gateway_url(prefixed_cid)
        assert gateway_url.startswith("https://"), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç gateway URL"
        assert cid in gateway_url, "CID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ gateway URL"

        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise

def test_invalid_cid_handling(pinata_uploader):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö CID"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö CID")

    invalid_cids = ["badcid", "notexists123", ""]

    for cid in invalid_cids:
        logger.debug(f"üß™ –¢–µ—Å—Ç CID: {cid}")
        result = pinata_uploader.download_json(cid)
        assert result is None, f"–û–∂–∏–¥–∞–ª—Å—è None –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ CID: {cid}"
        logger.debug("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏")

    logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")

def test_file_validation(pinata_uploader, temp_test_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    text_file = temp_test_files[0]
    try:
        pinata_uploader.validate_file(str(text_file))
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    with pytest.raises(ValueError):
        pinata_uploader.validate_file("nonexistent.file")
        logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")

def test_batch_upload(pinata_uploader, temp_test_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    files = [
        (str(file), f"test_file_{i}.{file.suffix}")
        for i, file in enumerate(temp_test_files)
    ]
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
        results = pinata_uploader.upload_files_batch(files)
        assert len(results) == len(files), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for file_name, cid in results.items():
            assert cid is not None, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}"
            logger.info(f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {cid}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached_info = pinata_uploader.find_file_by_name(file_name)
            assert cached_info, f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
            assert cached_info[0] == cid, f"CID –≤ –∫—ç—à–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è {file_name}"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise

def test_metrics(pinata_uploader, temp_test_files):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫"""
    logger.info("=" * 50)
    logger.info("üöÄ –¢–µ—Å—Ç: —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
    file_path = temp_test_files[0]
    cid = pinata_uploader.upload_file(str(file_path), "test_metrics.txt")
    assert cid, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = pinata_uploader.metrics
    
    assert len(metrics.upload_times) > 0, "–ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏"
    assert metrics.get_average_upload_time() > 0, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–æ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à-–º–µ—Ç—Ä–∏–∫–∏
    pinata_uploader.find_file_by_name("test_metrics.txt")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å hit
    pinata_uploader.find_file_by_name("nonexistent.file")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å miss
    
    assert metrics.cache_hits > 0, "–ù–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à"
    assert metrics.cache_misses > 0, "–ù–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ø—Ä–æ–º–∞—Ö–∏ –∫—ç—à–∞"
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
