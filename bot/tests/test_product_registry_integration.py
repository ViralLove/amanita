"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è ProductRegistryService

–ë–ê–ó–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:
=====================
- –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
- –ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–æ—Å—Ç—ã—Ö
"""

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import pytest
import logging
import sys
import os
import json
import asyncio
from pathlib import Path
from dotenv import load_dotenv
import pytest_asyncio

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from bot.services.product.registry import ProductRegistryService
from bot.model.product import Product
from bot.services.product.exceptions import InvalidProductIdError, ProductNotFoundError

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from bot.tests.conftest import (
    mock_blockchain_service,
    mock_ipfs_storage,
    mock_validation_service,
    mock_account_service,
    integration_storage_config
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Real —Ä–µ–∂–∏–º–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ integration_registry_service_real)
from bot.services.core.blockchain import BlockchainService
from bot.services.product.validation import ProductValidationService
from bot.services.core.account import AccountService

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

print("\n=== –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
AMANITA_REGISTRY_CONTRACT_ADDRESS = os.getenv("AMANITA_REGISTRY_CONTRACT_ADDRESS")

# ================== –¢–ï–°–¢ –§–ò–ö–°–¢–£–†–´ INTEGRATION_STORAGE_CONFIG =====================

def test_integration_storage_config_fixture():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    current_storage = os.getenv("INTEGRATION_STORAGE", "mock")
    logger.info(f"üîß –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ INTEGRATION_STORAGE: {current_storage}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ (–±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ–∏–∫—Å—Ç—É—Ä)
    if current_storage.lower() == "mock":
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º mock —Ä–µ–∂–∏–º")
        description = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: Mock IPFS/Arweave (–±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)"
        storage_type = "mock"
        
    elif current_storage.lower() == "pinata":
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Pinata —Ä–µ–∂–∏–º")
        description = "–†–µ–∞–ª—å–Ω—ã–π Pinata IPFS (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)"
        storage_type = "pinata"
        
    elif current_storage.lower() == "arweave":
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Arweave —Ä–µ–∂–∏–º")
        description = "–†–µ–∞–ª—å–Ω—ã–π Arweave (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)"
        storage_type = "arweave"
        
    else:
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ mock")
        description = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: Mock IPFS/Arweave (–±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)"
        storage_type = "mock"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ–∏–∫—Å—Ç—É—Ä–µ
    config = {
        "service": f"{storage_type}_service",
        "description": description
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    assert isinstance(config, dict), "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
    assert "service" in config, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'service'"
    assert "description" in config, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'description'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π storage —Ç–∏–ø
    if current_storage.lower() == "mock":
        assert "—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" in config["description"].lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω mock storage"
        logger.info("‚úÖ Mock storage –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif current_storage.lower() == "pinata":
        assert "pinata" in config["description"].lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω Pinata storage"
        logger.info("‚úÖ Pinata storage –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif current_storage.lower() == "arweave":
        assert "arweave" in config["description"].lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω Arweave storage"
        logger.info("‚úÖ Arweave storage –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        # Fallback –Ω–∞ mock –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ
        assert "—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" in config["description"].lower(), "–ü—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω mock"
        logger.info("‚úÖ Fallback –Ω–∞ mock storage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ service –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
    assert config["service"] is not None, "Storage service –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
    
    logger.info(f"‚úÖ –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    logger.info(f"üìã –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['description']}")
    logger.info(f"üîß –í—ã–±—Ä–∞–Ω–Ω—ã–π storage —Ç–∏–ø: {storage_type}")
    
    return config


def test_integration_registry_service_real_blockchain_fixture():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_registry_service_real_blockchain"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É integration_registry_service_real_blockchain")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
    try:
        from bot.tests.conftest import integration_registry_service_real_blockchain
        logger.info("‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ integration_registry_service_real_blockchain —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}")
        pytest.fail(f"–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É
    import inspect
    fixture_spec = inspect.signature(integration_registry_service_real_blockchain)
    logger.info(f"üîß –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {fixture_spec}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç integration_storage_config
    fixture_params = list(fixture_spec.parameters.keys())
    assert "integration_storage_config" in fixture_params, \
        "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç integration_storage_config"
    
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç integration_storage_config")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    doc = integration_registry_service_real_blockchain.__doc__
    assert doc is not None, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    assert "—Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω"
    assert "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º storage" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π storage"
    
    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ integration_registry_service_real_blockchain –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    return True


def test_helper_functions_storage_selection():
    """–¢–µ—Å—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        from bot.tests.conftest import _get_real_pinata_storage, _get_real_arweave_storage, mock_ipfs_storage
        logger.info("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        pytest.fail(f"–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_pinata_key = os.getenv("PINATA_API_KEY")
    original_pinata_secret = os.getenv("PINATA_SECRET_KEY")
    original_arweave_key = os.getenv("ARWEAVE_PRIVATE_KEY")
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ _get_real_pinata_storage –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π
        logger.info("üîß –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pinata storage –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π")
        os.environ.pop("PINATA_API_KEY", None)
        os.environ.pop("PINATA_SECRET_KEY", None)
        
        pinata_storage = _get_real_pinata_storage()
        assert pinata_storage is not None, "Pinata storage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω (mock –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π)"
        logger.info("‚úÖ Pinata storage –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ _get_real_arweave_storage –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π
        logger.info("üîß –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Arweave storage –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π")
        os.environ.pop("ARWEAVE_PRIVATE_KEY", None)
        
        arweave_storage = _get_real_arweave_storage()
        assert arweave_storage is not None, "Arweave storage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω (mock –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π)"
        logger.info("‚úÖ Arweave storage –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ _get_real_pinata_storage –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–π (–¥–æ–ª–∂–µ–Ω –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π)
        logger.info("üîß –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Pinata storage –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–π")
        os.environ["PINATA_API_KEY"] = "test_key"
        os.environ["PINATA_SECRET_KEY"] = "test_secret"
        
        # –ó–¥–µ—Å—å –º—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        # –ù–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–µ—Ç mock
        pinata_storage_with_keys = _get_real_pinata_storage()
        assert pinata_storage_with_keys is not None, "Pinata storage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        logger.info("‚úÖ Pinata storage –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ _get_real_arweave_storage –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–π
        logger.info("üîß –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Arweave storage –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–π")
        os.environ["ARWEAVE_PRIVATE_KEY"] = "test_private_key"
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ - –æ–∂–∏–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        arweave_storage_with_keys = _get_real_arweave_storage()
        assert arweave_storage_with_keys is not None, "Arweave storage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        logger.info("‚úÖ Arweave storage –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π")
        
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if original_pinata_key:
            os.environ["PINATA_API_KEY"] = original_pinata_key
        if original_pinata_secret:
            os.environ["PINATA_SECRET_KEY"] = original_pinata_secret
        if original_arweave_key:
            os.environ["ARWEAVE_PRIVATE_KEY"] = original_arweave_key
    
    return True


def test_seller_account_fixture():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã seller_account"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É seller_account")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
    try:
        from bot.tests.conftest import seller_account
        logger.info("‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ seller_account —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}")
        pytest.fail(f"–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    doc = seller_account.__doc__
    assert doc is not None, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    assert "–∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"
    assert "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    
    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    import inspect
    fixture_spec = inspect.signature(seller_account)
    logger.info(f"üîß –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {fixture_spec}")
    
    # –§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    fixture_params = list(fixture_spec.parameters.keys())
    assert len(fixture_params) == 0, "–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
    
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_seller_key = os.getenv("SELLER_PRIVATE_KEY")
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY
        logger.info("üîß –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY")
        os.environ.pop("SELLER_PRIVATE_KEY", None)
        
        # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pytest.skip
        # –ù–æ –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑–≤–∞—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—É, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SELLER_PRIVATE_KEY –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ SELLER_PRIVATE_KEY
        logger.info("üîß –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ SELLER_PRIVATE_KEY")
        if original_seller_key:
            # –ï—Å–ª–∏ –∫–ª—é—á –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
            logger.info(f"üîß SELLER_PRIVATE_KEY –Ω–∞–π–¥–µ–Ω: {original_seller_key[:10]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            try:
                from eth_account import Account
                account = Account.from_key(original_seller_key)
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ–∑–¥–∞–Ω: {account.address}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –∞–¥—Ä–µ—Å
                assert hasattr(account, 'address'), "–ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç address"
                assert account.address.startswith('0x'), "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x"
                assert len(account.address) == 42, "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 42 —Å–∏–º–≤–æ–ª–∞"
                
                logger.info(f"‚úÖ –ê–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω: {account.address}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {e}")
                logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            logger.info("üîß SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–∏–∫—Å—Ç—É—Ä—ã seller_account –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if original_seller_key:
            os.environ["SELLER_PRIVATE_KEY"] = original_seller_key
    
    return True


def test_test_products_fixture():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã test_products"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É test_products")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
    try:
        from bot.tests.conftest import test_products
        logger.info("‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ test_products —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}")
        pytest.fail(f"–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    doc = test_products.__doc__
    assert doc is not None, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    assert "—Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    assert "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    
    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    import inspect
    fixture_spec = inspect.signature(test_products)
    logger.info(f"üîß –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {fixture_spec}")
    
    # –§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    fixture_params = list(fixture_spec.parameters.keys())
    assert len(fixture_params) == 0, "–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
    
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã (–∏–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤)
    products_data = [
        {
            "id": "test_product_1",
            "title": "Test Product 1",
            "description": "Test Description 1",
            "forms": ["powder"],
            "categories": ["mushroom"],
            "species": "Amanita muscaria",
            "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
        },
        {
            "id": "test_product_2", 
            "title": "Test Product 2",
            "description": "Test Description 2",
            "forms": ["capsules"],
            "categories": ["mushroom"],
            "species": "Amanita pantherina",
            "prices": [{"weight": "60", "weight_unit": "capsules", "price": "120", "currency": "EUR"}]
        }
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
    assert isinstance(products_data, list), "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    assert len(products_data) == 2, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 2 –ø—Ä–æ–¥—É–∫—Ç–∞"
    
    logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑ {len(products_data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_1 = products_data[0]
    logger.info(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞: {product_1['id']}")
    
    required_fields = ["id", "title", "description", "forms", "categories", "species", "prices"]
    for field in required_fields:
        assert field in product_1, f"–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '{field}'"
    
    logger.info(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥—É–∫—Ç–µ 1")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_2 = products_data[1]
    logger.info(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞: {product_2['id']}")
    
    for field in required_fields:
        assert field in product_2, f"–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '{field}'"
    
    logger.info(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–¥—É–∫—Ç–µ 2")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–∞–Ω–Ω—ã—Ö
    assert product_1["species"] != product_2["species"], "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã"
    assert product_1["forms"] != product_2["forms"], "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω
    prices_1 = product_1["prices"]
    prices_2 = product_2["prices"]
    
    assert isinstance(prices_1, list), "–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
    assert isinstance(prices_2, list), "–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
    assert len(prices_1) > 0, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–Ω—É"
    assert len(prices_2) > 0, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–Ω—É"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Ü–µ–Ω—ã
    price_1 = prices_1[0]
    price_fields = ["weight", "weight_unit", "price", "currency"]
    for field in price_fields:
        assert field in price_1, f"–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '{field}'"
    
    logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã
    assert "Amanita" in product_1["species"], "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∏–¥ –≥—Ä–∏–±–∞"
    assert "Amanita" in product_2["species"], "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∏–¥ –≥—Ä–∏–±–∞"
    assert product_1["categories"] == ["mushroom"], "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'mushroom'"
    assert product_2["categories"] == ["mushroom"], "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'mushroom'"
    
    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
    
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–∏–∫—Å—Ç—É—Ä—ã test_products –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    return True


def test_integration_registry_service_mock_fixture():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_registry_service_mock"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É integration_registry_service_mock")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
    try:
        from bot.tests.test_product_registry_integration import integration_registry_service_mock
        logger.info("‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ integration_registry_service_mock —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}")
        pytest.fail(f"–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    doc = integration_registry_service_mock.__doc__
    assert doc is not None, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    assert "–±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    assert "mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
    
    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É
    import inspect
    fixture_spec = inspect.signature(integration_registry_service_mock)
    logger.info(f"üîß –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {fixture_spec}")
    
    # –§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã mock —Å–µ—Ä–≤–∏—Å–æ–≤
    fixture_params = list(fixture_spec.parameters.keys())
    expected_params = ["mock_blockchain_service", "mock_ipfs_storage", "mock_validation_service", "mock_account_service"]
    
    for param in expected_params:
        assert param in fixture_params, f"–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä '{param}'"
    
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ mock –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ integration_registry_service_mock –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    return True


def test_integration_registry_service_real_fixture():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_registry_service_real"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É integration_registry_service_real")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
    try:
        from bot.tests.test_product_registry_integration import integration_registry_service_real
        logger.info("‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ integration_registry_service_real —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {e}")
        pytest.fail(f"–§–∏–∫—Å—Ç—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    doc = integration_registry_service_real.__doc__
    assert doc is not None, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    assert "–ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    assert "—Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏" in doc.lower(), "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É–ø–æ–º–∏–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    
    logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ–∏–∫—Å—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É
    import inspect
    fixture_spec = inspect.signature(integration_registry_service_real)
    logger.info(f"üîß –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã: {fixture_spec}")
    
    # –§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä integration_storage_config
    fixture_params = list(fixture_spec.parameters.keys())
    assert "integration_storage_config" in fixture_params, "–§–∏–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä integration_storage_config"
    
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä integration_storage_config")
    logger.info(f"‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ integration_registry_service_real –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    return True


# ================== –§–ò–ö–°–¢–£–†–´ =====================


@pytest_asyncio.fixture
async def integration_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä"""
    logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    
    if not fixtures_path.exists():
        pytest.skip("–§–∞–π–ª fixtures/products.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    with open(fixtures_path) as f:
        data = json.load(f)
    
    valid_products = data.get('valid_products', [])
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_products)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    return {
        "valid_products": valid_products,
        "invalid_products": data.get('invalid_products', [])
    }

@pytest_asyncio.fixture
async def integration_registry_service_mock(
    mock_blockchain_service,
    mock_ipfs_storage,
    mock_validation_service,
    mock_account_service
):
    """–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService –¥–ª—è –ë–´–°–¢–†–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService –¥–ª—è –ë–´–°–¢–†–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Mock —Ä–µ–∂–∏–º)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not SELLER_PRIVATE_KEY:
        pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    if not AMANITA_REGISTRY_CONTRACT_ADDRESS:
        pytest.skip("AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        # –°–æ–∑–¥–∞–µ–º ProductRegistryService —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        registry_service = ProductRegistryService(
            blockchain_service=mock_blockchain_service,
            storage_service=mock_ipfs_storage,
            validation_service=mock_validation_service,
            account_service=mock_account_service
        )
        
        logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ë–´–°–¢–†–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info("üöÄ [DEVOPS] Mock —Ä–µ–∂–∏–º: –±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤")
        logger.info("‚ö° [DEVOPS] –ì–æ—Ç–æ–≤ –∫ –±—ã—Å—Ç—Ä–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏ (performance: fast, cost: free)")
        return registry_service
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProductRegistryService (Mock —Ä–µ–∂–∏–º): {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mock —Ä–µ–∂–∏–º–∞: {e}")


@pytest_asyncio.fixture
async def integration_registry_service_real(
    integration_storage_config
):
    """–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService –¥–ª—è –ü–û–õ–ù–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService –¥–ª—è –ü–û–õ–ù–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Real —Ä–µ–∂–∏–º)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not SELLER_PRIVATE_KEY:
        pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    if not AMANITA_REGISTRY_CONTRACT_ADDRESS:
        pytest.skip("AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é storage –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        storage_service = integration_storage_config["service"]
        storage_description = integration_storage_config["description"]
        
        # üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è DevOps –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info(f"üîß [DEVOPS] Storage –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {storage_description}")
        
        # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if "devops_info" in integration_storage_config:
            devops_info = integration_storage_config["devops_info"]
            logger.info(f"üìä [DEVOPS] Storage –¥–µ—Ç–∞–ª–∏: type={devops_info['type']}, performance={devops_info['performance']}, cost={devops_info['cost']}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        blockchain_service = BlockchainService()
        validation_service = ProductValidationService()
        account_service = AccountService(blockchain_service)
        
        logger.info("‚úÖ [DEVOPS] –†–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: BlockchainService, ProductValidationService, AccountService")
        
        # –°–æ–∑–¥–∞–µ–º ProductRegistryService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        registry_service = ProductRegistryService(
            blockchain_service=blockchain_service,
            storage_service=storage_service,
            validation_service=validation_service,
            account_service=account_service
        )
        
        logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ü–û–õ–ù–û–ì–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info(f"üîß [DEVOPS] –†–µ–∂–∏–º: {storage_description}")
        logger.info("üöÄ [DEVOPS] –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ–º—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏")
        return registry_service
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProductRegistryService (Real —Ä–µ–∂–∏–º): {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Real —Ä–µ–∂–∏–º–∞: {e}")


@pytest_asyncio.fixture
async def integration_registry_service(
    mock_blockchain_service,
    mock_ipfs_storage,
    mock_validation_service,
    mock_account_service
):
    """–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService —Å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not SELLER_PRIVATE_KEY:
        pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    if not AMANITA_REGISTRY_CONTRACT_ADDRESS:
        pytest.skip("AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º mock —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º ProductRegistryService
        if hasattr(mock_ipfs_storage, 'sync_with_blockchain_service'):
            mock_ipfs_storage.sync_with_blockchain_service(mock_blockchain_service)
            logger.info("üîß [DEVOPS] MockIPFSStorage —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å MockBlockchainService")
        
        # –°–æ–∑–¥–∞–µ–º ProductRegistryService —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        registry_service = ProductRegistryService(
            blockchain_service=mock_blockchain_service,
            storage_service=mock_ipfs_storage,
            validation_service=mock_validation_service,
            account_service=mock_account_service
        )
        
        logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
        logger.info("üîß [DEVOPS] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock storage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info("üîÑ [DEVOPS] –†–µ–∂–∏–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (performance: fast, cost: free)")
        return registry_service
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProductRegistryService: {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@pytest_asyncio.fixture(autouse=True)
async def cleanup_after_test():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield
    logger.info("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    # –û—á–∏—Å—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ

# ================== –ë–ê–ó–û–í–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ =====================

@pytest.mark.asyncio
async def test_integration_service_initialization(integration_registry_service):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ProductRegistryService")
    
    # Assert
    assert integration_registry_service is not None
    assert hasattr(integration_registry_service, 'get_all_products')
    assert hasattr(integration_registry_service, 'get_product')
    assert hasattr(integration_registry_service, 'create_product')
    
    logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

@pytest.mark.asyncio
async def test_integration_get_all_products_basic(integration_registry_service):
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏
    assert integration_registry_service is not None
    assert hasattr(integration_registry_service, 'blockchain_service')
    assert hasattr(integration_registry_service, 'storage_service')
    assert hasattr(integration_registry_service, 'validation_service')
    assert hasattr(integration_registry_service, 'account_service')
    
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mock —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–æ
    blockchain_service = integration_registry_service.blockchain_service
    assert hasattr(blockchain_service, 'get_catalog_version')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º mock blockchain service
    catalog_version = blockchain_service.get_catalog_version()
    assert catalog_version == 1
    logger.info(f"‚úÖ Mock blockchain service —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {catalog_version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
    assert hasattr(integration_registry_service, 'get_all_products')
    assert hasattr(integration_registry_service, 'get_product')
    assert hasattr(integration_registry_service, 'create_product')
    
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ–∑ –≤—ã–∑–æ–≤–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)")

@pytest.mark.asyncio
async def test_integration_get_product_basic(integration_registry_service):
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID (Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏
    assert hasattr(integration_registry_service, 'blockchain_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å blockchain_service"
    assert hasattr(integration_registry_service, 'storage_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å storage_service"
    assert hasattr(integration_registry_service, 'validation_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å validation_service"
    assert hasattr(integration_registry_service, 'account_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å account_service"
    
    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã (–±–µ–∑ –≤—ã–∑–æ–≤–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)
    assert hasattr(integration_registry_service, 'get_all_products'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ get_all_products"
    assert hasattr(integration_registry_service, 'get_product'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ get_product"
    
    # üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º mock blockchain service
    blockchain_service = integration_registry_service.blockchain_service
    assert hasattr(blockchain_service, 'get_catalog_version'), "Mock blockchain service –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å get_catalog_version"
    
    # ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ–∑ –≤—ã–∑–æ–≤–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)")

@pytest.mark.asyncio
async def test_integration_error_handling_invalid_id(integration_registry_service):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º ID (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ID (Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏
    assert hasattr(integration_registry_service, 'blockchain_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å blockchain_service"
    assert hasattr(integration_registry_service, 'storage_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å storage_service"
    assert hasattr(integration_registry_service, 'validation_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å validation_service"
    assert hasattr(integration_registry_service, 'account_service'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å account_service"
    
    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ get_product –¥–æ—Å—Ç—É–ø–µ–Ω (–±–µ–∑ –≤—ã–∑–æ–≤–∞)
    assert hasattr(integration_registry_service, 'get_product'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ get_product"
    
    # üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º mock validation service
    validation_service = integration_registry_service.validation_service
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã mock —Å–µ—Ä–≤–∏—Å–∞)
    assert hasattr(validation_service, '__class__'), "Mock validation service –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–ª–∞—Å—Å"
    logger.info(f"‚úÖ Mock validation service: {type(validation_service).__name__}")
    
    # ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º mock —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å mock —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    logger.info("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ–∑ –≤—ã–∑–æ–≤–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)")

# ================== –¢–ï–°–¢–´ –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ü–†–û–î–£–ö–¢–ê =====================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
deactivated_product_id = None  # ID –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¢–ï–°–¢–ê 1
active_product_id = None       # ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¢–ï–°–¢–ê 2
active_product_original_data = None  # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞

@pytest.mark.asyncio
async def test_integration_product_lifecycle_deactivation(integration_registry_service, integration_test_data):
    """
    –¢–ï–°–¢ 1: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
    
    –ê–õ–ì–û–†–ò–¢–ú (–û–ë–ù–û–í–õ–ï–ù –î–õ–Ø –ù–û–í–û–ô –õ–û–ì–ò–ö–ò):
    1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, status=0)
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (—Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0)
    3. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç (—Å—Ç–∞—Ç—É—Å 0 -> 1)
    4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (—Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1)
    5. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç (—Å—Ç–∞—Ç—É—Å 1 -> 0)
    6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (—Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0)
    7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ID –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    8. –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    """
    logger.info("üß™ –¢–ï–°–¢ 1: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π")
    
    global deactivated_product_id
    
    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•
    logger.info(f"üîç –°–û–°–¢–û–Ø–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•:")
    logger.info(f"   - deactivated_product_id: {globals().get('deactivated_product_id', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    logger.info(f"   - active_product_id: {globals().get('active_product_id', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    logger.info(f"   - active_product_original_data: {globals().get('active_product_original_data', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    
    # IMPLEMENTED: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (–ù–ï–ê–ö–¢–ò–í–ù–´–ô –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ)
    # - –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # - –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ create_product() —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    # - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ (status: success)
    # - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è blockchain_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    # - –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º (status=0) —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
    # - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    # - –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (tx_hash, metadata_cid)
    
    # Arrange - –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    valid_products = integration_test_data.get("valid_products", [])
    if not valid_products:
        pytest.skip("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    test_product = valid_products[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç: {test_product['title']}")
    
    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
    logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    logger.info(f"   - ID: {test_product.get('id', '–ù–ï –£–ö–ê–ó–ê–ù')}")
    logger.info(f"   - Title: {test_product.get('title', '–ù–ï –£–ö–ê–ó–ê–ù')}")
    logger.info(f"   - Organic Components: {test_product.get('organic_components', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - Forms: {test_product.get('forms', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - Categories: {test_product.get('categories', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - Species: {test_product.get('species', '–ù–ï –£–ö–ê–ó–ê–ù')}")
    logger.info(f"   - Prices: {test_product.get('prices', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - –í—Å–µ –∫–ª—é—á–∏: {list(test_product.keys())}")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê integration_test_data
    logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê integration_test_data:")
    logger.info(f"   - integration_test_data keys: {list(integration_test_data.keys())}")
    logger.info(f"   - valid_products count: {len(integration_test_data.get('valid_products', []))}")
    logger.info(f"   - –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç (index 0): {integration_test_data['valid_products'][0] if integration_test_data.get('valid_products') else '–ù–ï–¢'}")
    logger.info(f"   - –í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç (index 1): {integration_test_data['valid_products'][1] if len(integration_test_data.get('valid_products', [])) > 1 else '–ù–ï–¢'}")
    
    # –°–û–•–†–ê–ù–Ø–ï–ú –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø
    original_product_data = test_product.copy()
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {original_product_data['title']}")
    logger.info(f"üíæ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {original_product_data}")
    
    # Act - –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    try:
        logger.info("üöÄ –í–´–ó–´–í–ê–ï–ú create_product()...")
        create_result = await integration_registry_service.create_product(test_product)
        logger.info(f"üì° –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø: {create_result}")
        logger.info(f"üì° –¢–ò–ü –†–ï–ó–£–õ–¨–¢–ê–¢–ê: {type(create_result)}")
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
        logger.info("üîç –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø...")
        assert create_result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None")
        
        logger.info(f"üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–°: –æ–∂–∏–¥–∞–µ–º 'success', –ø–æ–ª—É—á–∞–µ–º '{create_result.get('status', '–ù–ï–¢ –°–¢–ê–¢–£–°–ê')}'")
        assert create_result["status"] == "success", f"–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success', –ø–æ–ª—É—á–µ–Ω: {create_result['status']}"
        assert "blockchain_id" in create_result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å blockchain_id"
        
        blockchain_id = create_result["blockchain_id"]
        assert blockchain_id is not None, "blockchain_id –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(blockchain_id, (int, str)), f"blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(blockchain_id)}"
        
        logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å blockchain_id: {blockchain_id}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if "tx_hash" in create_result:
            tx_hash = create_result["tx_hash"]
            assert tx_hash is not None, "tx_hash –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
            assert isinstance(tx_hash, str), f"tx_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(tx_hash)}"
            assert len(tx_hash) > 0, "tx_hash –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            logger.info(f"üì° –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è: {tx_hash}")
        
        if "metadata_cid" in create_result:
            metadata_cid = create_result["metadata_cid"]
            assert metadata_cid is not None, "metadata_cid –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
            assert isinstance(metadata_cid, str), f"metadata_cid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(metadata_cid)}"
            assert metadata_cid.startswith("Qm"), f"metadata_cid –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'Qm', –ø–æ–ª—É—á–µ–Ω: {metadata_cid}"
            logger.info(f"üîó Metadata CID: {metadata_cid}")
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MOCK STORAGE
            logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê MOCK STORAGE:")
            logger.info(f"   - –°–æ–∑–¥–∞–Ω–Ω—ã–π CID: {metadata_cid}")
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ mock storage —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            try:
                mock_storage = integration_registry_service.storage_service
                if hasattr(mock_storage, 'uploaded_jsons'):
                    logger.info(f"   - –î–∞–Ω–Ω—ã–µ –≤ –º–æ–∫–µ: {mock_storage.uploaded_jsons}")
                else:
                    logger.info(f"   - Mock storage –Ω–µ –∏–º–µ–µ—Ç uploaded_jsons")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ mock storage: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if "validation" in str(e).lower():
            pytest.fail(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        elif "network" in str(e).lower() or "connection" in str(e).lower():
            pytest.skip(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        else:
            raise e
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ —Å retry –ª–æ–≥–∏–∫–æ–π (–°–¢–ê–¢–£–° 0)
    # - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ blockchain_id —á–µ—Ä–µ–∑ get_product()
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ ID
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (0 - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ProductNotFoundError –∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    # - Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è rate limiting —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (rate limiting)
    max_retries = 3
    product = None
    
    for attempt in range(max_retries):
        try:
            product = await integration_registry_service.get_product(blockchain_id)
            break
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π rate limiting
            error_str = str(e).lower()
            cause = getattr(e, '__cause__', None)
            cause_str = str(cause).lower() if cause else ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ rate limiting
            is_rate_limit = any([
                "http 429" in error_str,
                "rate limit" in error_str,
                "too many requests" in error_str,
                "http 429" in cause_str,
                "rate limit" in cause_str,
                "too many requests" in cause_str,
                isinstance(cause, Exception) and "storage" in str(type(cause)).lower() and "rate" in str(cause).lower()
            ])
            
            if is_rate_limit and attempt < max_retries - 1:
                wait_time = (attempt + 1) * 5
                logger.warning(f"‚ö†Ô∏è Rate limit, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥–µ–º {wait_time}—Å")
                await asyncio.sleep(wait_time)
                continue
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                if isinstance(e, ProductNotFoundError):
                    pytest.fail(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                elif "network" in error_str or "connection" in error_str:
                    pytest.skip(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                else:
                    raise e
    
    # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    assert product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞"
    assert str(product.id) == str(blockchain_id), f"ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è {blockchain_id}, –ø–æ–ª—É—á–µ–Ω {product.id}"
    assert product.status == 0, f"–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π), –ø–æ–ª—É—á–µ–Ω: {product.status}"
    
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: ID={product.id}, —Å—Ç–∞—Ç—É—Å={product.status} (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)")
    
    # IMPLEMENTED: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    # - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 1 —á–µ—Ä–µ–∑ update_product_status()
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True)
    # - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ = 1
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (—Å–µ—Ç–µ–≤—ã–µ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏)
    # - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (asyncio.sleep)
    
    logger.info("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç (—Å—Ç–∞—Ç—É—Å 0 -> 1)")
    
    try:
        # Act - –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç
        update_result = await integration_registry_service.update_product_status(blockchain_id, 1)
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        assert update_result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(update_result, bool), f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean, –ø–æ–ª—É—á–µ–Ω: {type(update_result)}"
        assert update_result is True, f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π, –ø–æ–ª—É—á–µ–Ω: {update_result}"
        
        logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å retry –ª–æ–≥–∏–∫–æ–π
        updated_product = None
        for attempt in range(max_retries):
            try:
                updated_product = await integration_registry_service.get_product(blockchain_id)
                break
            except Exception as e:
                error_str = str(e).lower()
                cause = getattr(e, '__cause__', None)
                cause_str = str(cause).lower() if cause else ""
                
                is_rate_limit = any([
                    "http 429" in error_str,
                    "rate limit" in error_str,
                    "too many requests" in error_str,
                    "http 429" in cause_str,
                    "rate limit" in cause_str,
                    "too many requests" in cause_str,
                    isinstance(cause, Exception) and "storage" in str(type(cause)).lower() and "rate" in str(cause).lower()
                ])
                
                if is_rate_limit and attempt < max_retries - 1:
                    wait_time = (attempt + 1) * 5
                    logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥–µ–º {wait_time}—Å")
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                    raise e
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        assert updated_product is not None, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω"
        assert str(updated_product.id) == str(blockchain_id), f"ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è {blockchain_id}, –ø–æ–ª—É—á–µ–Ω {updated_product.id}"
        assert updated_product.status == 1, f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 (–∞–∫—Ç–∏–≤–Ω—ã–π) –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω: {updated_product.status}"
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {updated_product.status} (–∞–∫—Ç–∏–≤–Ω—ã–π)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        if "network" in str(e).lower() or "connection" in str(e).lower():
            pytest.skip(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        elif "transaction" in str(e).lower() or "gas" in str(e).lower():
            pytest.fail(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        else:
            raise e
    
    # IMPLEMENTED: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    # - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 0 —á–µ—Ä–µ–∑ update_product_status()
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True)
    # - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ = 0
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    # - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    logger.info("üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç (—Å—Ç–∞—Ç—É—Å 1 -> 0)")
    
    try:
        # Act - –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç
        deactivate_result = await integration_registry_service.update_product_status(blockchain_id, 0)
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        assert deactivate_result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(deactivate_result, bool), f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean, –ø–æ–ª—É—á–µ–Ω: {type(deactivate_result)}"
        assert deactivate_result is True, f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π, –ø–æ–ª—É—á–µ–Ω: {deactivate_result}"
        
        logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å retry –ª–æ–≥–∏–∫–æ–π
        deactivated_product = None
        for attempt in range(max_retries):
            try:
                deactivated_product = await integration_registry_service.get_product(blockchain_id)
                break
            except Exception as e:
                error_str = str(e).lower()
                cause = getattr(e, '__cause__', None)
                cause_str = str(cause).lower() if cause else ""
                
                is_rate_limit = any([
                    "http 429" in error_str,
                    "rate limit" in error_str,
                    "too many requests" in error_str,
                    "http 429" in cause_str,
                    "rate limit" in cause_str,
                    "too many requests" in cause_str,
                    isinstance(cause, Exception) and "storage" in str(type(cause)).lower() and "rate" in str(cause).lower()
                ])
                
                if is_rate_limit and attempt < max_retries - 1:
                    wait_time = (attempt + 1) * 5
                    logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥–µ–º {wait_time}—Å")
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                    raise e
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        assert deactivated_product is not None, "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω"
        assert str(deactivated_product.id) == str(blockchain_id), f"ID –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è {blockchain_id}, –ø–æ–ª—É—á–µ–Ω {deactivated_product.id}"
        assert deactivated_product.status == 0, f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π) –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω: {deactivated_product.status}"
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {deactivated_product.status} (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        if "network" in str(e).lower() or "connection" in str(e).lower():
            pytest.skip(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        elif "transaction" in str(e).lower() or "gas" in str(e).lower():
            pytest.fail(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        else:
            raise e
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    # - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ blockchain_id —á–µ—Ä–µ–∑ get_product()
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ = 0 (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        final_product = await integration_registry_service.get_product(blockchain_id)
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å
        assert final_product is not None, "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
        assert str(final_product.id) == str(blockchain_id), f"ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è {blockchain_id}, –ø–æ–ª—É—á–µ–Ω {final_product.id}"
        assert final_product.status == 0, f"–°—Ç–∞—Ç—É—Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω: {final_product.status}"
        
        # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–î–£–ö–¢–ê
        logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–î–£–ö–¢–ê:")
        logger.info(f"   - final_product.title: '{final_product.title}'")
        logger.info(f"   - test_product['title']: '{test_product['title']}'")
        logger.info(f"   - original_product_data['title']: '{original_product_data['title']}'")
        logger.info(f"   - blockchain_id: {blockchain_id}")
        logger.info(f"   - final_product.id: {final_product.id}")
        logger.info(f"   - final_product.status: {final_product.status}")
        logger.info(f"   - final_product.cid: {getattr(final_product, 'cid', '–ù–ï–¢')}")
        logger.info(f"   - –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã final_product: {dir(final_product)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        logger.info(f"üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ó–ê–ì–û–õ–û–í–ö–ê...")
        logger.info(f"   - –û–∂–∏–¥–∞–µ–º: '{test_product['title']}'")
        logger.info(f"   - –ü–æ–ª—É—á–∞–µ–º: '{final_product.title}'")
        logger.info(f"   - –°–æ–≤–ø–∞–¥–∞—é—Ç: {test_product['title'] == final_product.title}")
        
        assert final_product.title == test_product['title'], f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è: –æ–∂–∏–¥–∞–ª—Å—è '{test_product['title']}', –ø–æ–ª—É—á–µ–Ω '{final_product.title}'"
        assert hasattr(final_product, 'cid'), "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å CID"
        assert final_product.cid is not None, "CID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        
        logger.info(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {final_product.title} (—Å—Ç–∞—Ç—É—Å: {final_product.status})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        if isinstance(e, ProductNotFoundError):
            pytest.fail(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        else:
            raise e
    
    # IMPLEMENTED: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    # - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ blockchain_id –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é deactivated_product_id
    # - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    deactivated_product_id = blockchain_id
    assert deactivated_product_id is not None, "deactivated_product_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert str(deactivated_product_id) == str(blockchain_id), f"deactivated_product_id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å blockchain_id"
    
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤: {deactivated_product_id}")
    logger.info("‚úÖ –¢–ï–°–¢ 1: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_integration_product_metadata_integrity(integration_registry_service, integration_test_data):
    """
    –¢–ï–°–¢ 2: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ (—Å—Ç–∞—Ç—É—Å 1)
    3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    4. –°–≤–µ—Ä—è–µ–º –ö–ê–ñ–î–û–ï –ø–æ–ª–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å –∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –ª–∏—à–Ω–µ–≥–æ
    6. –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    """
    logger.info("üß™ –¢–ï–°–¢ 2: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    global active_product_id, active_product_original_data
    
    # IMPLEMENTED: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    # - –í—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ integration_test_data (–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç)
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ create_product() —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è (status: success)
    # - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ blockchain_id –≤ active_product_id
    # - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ active_product_original_data
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    
    # Arrange - –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    valid_products = integration_test_data.get("valid_products", [])
    if not valid_products:
        pytest.skip("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—ã–π
    test_product_index = 1 if len(valid_products) > 1 else 0
    test_product = valid_products[test_product_index]
    logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {test_product['title']}")
    
    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• (–í–¢–û–†–û–ô –¢–ï–°–¢)
    logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–¢–û–†–û–ì–û –¢–ï–°–¢–ê: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    logger.info(f"   - ID: {test_product.get('id', '–ù–ï –£–ö–ê–ó–ê–ù')}")
    logger.info(f"   - Title: {test_product.get('title', '–ù–ï –£–ö–ê–ó–ê–ù')}")
    logger.info(f"   - Organic Components: {test_product.get('organic_components', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - Forms: {test_product.get('forms', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - Categories: {test_product.get('categories', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - Species: {test_product.get('species', '–ù–ï –£–ö–ê–ó–ê–ù')}")
    logger.info(f"   - Prices: {test_product.get('prices', '–ù–ï –£–ö–ê–ó–ê–ù–´')}")
    logger.info(f"   - –í—Å–µ –∫–ª—é—á–∏: {list(test_product.keys())}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ä–∫–∏
    active_product_original_data = test_product.copy()
    
    # Act - –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    try:
        logger.info("üöÄ –í–´–ó–´–í–ê–ï–ú create_product() (–í–¢–û–†–û–ô –¢–ï–°–¢)...")
        create_result = await integration_registry_service.create_product(test_product)
        logger.info(f"üì° –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø (–í–¢–û–†–û–ô –¢–ï–°–¢): {create_result}")
        logger.info(f"üì° –¢–ò–ü –†–ï–ó–£–õ–¨–¢–ê–¢–ê (–í–¢–û–†–û–ô –¢–ï–°–¢): {type(create_result)}")
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
        logger.info("üîç –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ó–î–ê–ù–ò–Ø (–í–¢–û–†–û–ô –¢–ï–°–¢)...")
        assert create_result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None (–í–¢–û–†–û–ô –¢–ï–°–¢)")
        
        logger.info(f"üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–¢–£–° (–í–¢–û–†–û–ô –¢–ï–°–¢): –æ–∂–∏–¥–∞–µ–º 'success', –ø–æ–ª—É—á–∞–µ–º '{create_result.get('status', '–ù–ï–¢ –°–¢–ê–¢–£–°–ê')}'")
        assert create_result["status"] == "success", f"–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success', –ø–æ–ª—É—á–µ–Ω: {create_result['status']}"
        assert "blockchain_id" in create_result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å blockchain_id"
        
        blockchain_id = create_result["blockchain_id"]
        assert blockchain_id is not None, "blockchain_id –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(blockchain_id, (int, str)), f"blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(blockchain_id)}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º blockchain_id –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        active_product_id = blockchain_id
        
        logger.info(f"‚úÖ –í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å blockchain_id: {blockchain_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        if "validation" in str(e).lower():
            pytest.fail(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        elif "network" in str(e).lower() or "connection" in str(e).lower():
            pytest.skip(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        else:
            raise e
    
    # IMPLEMENTED: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    # - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 1 —á–µ—Ä–µ–∑ update_product_status()
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True)
    # - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ = 1
    # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    # - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    logger.info("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç (—Å—Ç–∞—Ç—É—Å 0 -> 1)")
    
    try:
        # Act - –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç
        update_result = await integration_registry_service.update_product_status(blockchain_id, 1)
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        assert update_result is not None, "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(update_result, bool), f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean, –ø–æ–ª—É—á–µ–Ω: {type(update_result)}"
        assert update_result is True, f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π, –ø–æ–ª—É—á–µ–Ω: {update_result}"
        
        logger.info(f"‚úÖ –í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å retry –ª–æ–≥–∏–∫–æ–π
        max_retries = 3
        updated_product = None
        for attempt in range(max_retries):
            try:
                updated_product = await integration_registry_service.get_product(blockchain_id)
                break
            except Exception as e:
                error_str = str(e).lower()
                cause = getattr(e, '__cause__', None)
                cause_str = str(cause).lower() if cause else ""
                
                is_rate_limit = any([
                    "http 429" in error_str,
                    "rate limit" in error_str,
                    "too many requests" in error_str,
                    "http 429" in cause_str,
                    "rate limit" in cause_str,
                    "too many requests" in cause_str,
                    isinstance(cause, Exception) and "storage" in str(type(cause)).lower() and "rate" in str(cause).lower()
                ])
                
                if is_rate_limit and attempt < max_retries - 1:
                    wait_time = (attempt + 1) * 5
                    logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥–µ–º {wait_time}—Å")
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                    raise e
        
        # Assert - –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        assert updated_product is not None, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω"
        assert str(updated_product.id) == str(blockchain_id), f"ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è {blockchain_id}, –ø–æ–ª—É—á–µ–Ω {updated_product.id}"
        assert updated_product.status == 1, f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω: {updated_product.status}"
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {updated_product.status}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        if "network" in str(e).lower() or "connection" in str(e).lower():
            pytest.skip(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        elif "transaction" in str(e).lower() or "gas" in str(e).lower():
            pytest.fail(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        else:
            raise e
    
            # IMPLEMENTED: –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - ID –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        # - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ —á–µ—Ä–µ–∑ get_product()
        # - –í–∞–ª–∏–¥–∞—Ü–∏—è id: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å blockchain_id (active_product_id)
        # - –í–∞–ª–∏–¥–∞—Ü–∏—è title: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ title: –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ç–µ–≥–∏
        # - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        product = await integration_registry_service.get_product(blockchain_id)
        
        # TODO: 2.3 –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - ID –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
        assert str(product.id) == str(blockchain_id), f"ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å blockchain_id: –æ–∂–∏–¥–∞–ª—Å—è {blockchain_id}, –ø–æ–ª—É—á–µ–Ω {product.id}"
        assert str(product.id) == str(active_product_id), f"ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å active_product_id: –æ–∂–∏–¥–∞–ª—Å—è {active_product_id}, –ø–æ–ª—É—á–µ–Ω {product.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        assert product.title == active_product_original_data['title'], f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è '{active_product_original_data['title']}', –ø–æ–ª—É—á–µ–Ω '{product.title}'"
        assert product.title is not None, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(product.title, str), f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(product.title)}"
        assert len(product.title.strip()) > 0, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ HTML-—Ç–µ–≥–æ–≤
        import re
        html_pattern = re.compile(r'<[^>]+>')
        assert not html_pattern.search(product.title), f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ç–µ–≥–∏: {product.title}"
        
        logger.info(f"‚úÖ ID –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–ª–∏–¥–Ω—ã: ID={product.id}, title='{product.title}'")
        
        # TODO: 2.4 –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —Å—Ç–∞—Ç—É—Å –∏ CID
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ CID")
        
        # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CID
        logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CID:")
        logger.info(f"   - –¢–∏–ø product: {type(product)}")
        logger.info(f"   - –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã product: {dir(product)}")
        logger.info(f"   - product.__dict__: {getattr(product, '__dict__', '–ù–ï–¢ __dict__')}")
        logger.info(f"   - hasattr(product, 'cid'): {hasattr(product, 'cid')}")
        if hasattr(product, 'cid'):
            logger.info(f"   - product.cid: {product.cid}")
            logger.info(f"   - –¢–∏–ø product.cid: {type(product.cid)}")
            logger.info(f"   - –î–ª–∏–Ω–∞ product.cid: {len(str(product.cid))}")
        else:
            logger.info(f"   - product.cid: –ù–ï –ù–ê–ô–î–ï–ù")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        assert product.status == 1, f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 (–∞–∫—Ç–∏–≤–Ω—ã–π), –ø–æ–ª—É—á–µ–Ω: {product.status}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CID
        assert hasattr(product, 'cid'), "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'cid'"
        assert product.cid is not None, "CID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(product.cid, str), f"CID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(product.cid)}"
        assert len(product.cid) > 0, "CID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert product.cid.startswith("Qm"), f"CID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'Qm', –ø–æ–ª—É—á–µ–Ω: {product.cid}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç IPFS CID
        cid_pattern = re.compile(r'^(Qm[1-9A-HJ-NP-Za-km-z]{44}|bafy[A-Za-z2-7]{55})$')
        logger.info(f"üîç –í–ê–õ–ò–î–ê–¶–ò–Ø IPFS CID:")
        logger.info(f"   - CID –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: '{product.cid}'")
        logger.info(f"   - –ü–∞—Ç—Ç–µ—Ä–Ω IPFS: {cid_pattern.pattern}")
        logger.info(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç match: {cid_pattern.match(product.cid)}")
        
        assert cid_pattern.match(product.cid), f"CID –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É IPFS, –ø–æ–ª—É—á–µ–Ω: {product.cid}"
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏ CID –≤–∞–ª–∏–¥–Ω—ã: status={product.status}, cid={product.cid}")
        
        # TODO: 2.5 –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        assert hasattr(product, 'categories'), "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'categories'"
        assert isinstance(product.categories, list), f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(product.categories)}"
        assert len(product.categories) > 0, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        
        # –°–≤–µ—Ä—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        original_categories = active_product_original_data.get('categories', [])
        assert product.categories == original_categories, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª–∏—Å—å {original_categories}, –ø–æ–ª—É—á–µ–Ω—ã {product.categories}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for i, category in enumerate(product.categories):
            assert isinstance(category, str), f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–∞: {type(category)}"
            assert len(category.strip()) > 0, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{i+1} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
            assert not html_pattern.search(category), f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è #{i+1} –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ç–µ–≥–∏: {category}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        unique_categories = set(product.categories)
        assert len(unique_categories) == len(product.categories), f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏: {product.categories}"
        
        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–ª–∏–¥–Ω—ã: {product.categories}")
        
        # TODO: 2.6 –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —Ü–µ–Ω—ã
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã")
        
        assert hasattr(product, 'prices'), "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'prices'"
        assert isinstance(product.prices, list), f"–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω—ã: {type(product.prices)}"
        assert len(product.prices) > 0, "–¶–µ–Ω—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        
        # –°–≤–µ—Ä—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        original_prices = active_product_original_data.get('prices', [])
        assert len(product.prices) == len(original_prices), f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª–æ—Å—å {len(original_prices)}, –ø–æ–ª—É—á–µ–Ω–æ {len(product.prices)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ü–µ–Ω—É
        for i, price in enumerate(product.prices):
            from bot.model.product import PriceInfo
            assert isinstance(price, PriceInfo), f"–¶–µ–Ω–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º PriceInfo, –ø–æ–ª—É—á–µ–Ω–∞: {type(price)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ü–µ–Ω—ã
            assert hasattr(price, 'price'), f"–¶–µ–Ω–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–ª–µ 'price'"
            assert hasattr(price, 'currency'), f"–¶–µ–Ω–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–ª–µ 'currency'"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã
            try:
                price_value = float(price.price)
                assert price_value > 0, f"–¶–µ–Ω–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π, –ø–æ–ª—É—á–µ–Ω–∞: {price_value}"
            except (ValueError, TypeError):
                pytest.fail(f"–¶–µ–Ω–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–∞: {price.price}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
            valid_currencies = ['EUR', 'USD']
            assert price.currency in valid_currencies, f"–í–∞–ª—é—Ç–∞ —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ {valid_currencies}, –ø–æ–ª—É—á–µ–Ω–∞: {price.currency}"
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
            has_weight = hasattr(price, 'weight') and price.weight
            has_volume = hasattr(price, 'volume') and price.volume
            
            if has_weight:
                assert hasattr(price, 'weight_unit'), f"–¶–µ–Ω–∞ #{i+1} —Å –≤–µ—Å–æ–º –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–ª–µ 'weight_unit'"
                try:
                    weight_value = float(price.weight)
                    assert weight_value > 0, f"–í–µ—Å —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, –ø–æ–ª—É—á–µ–Ω: {weight_value}"
                except (ValueError, TypeError):
                    pytest.fail(f"–í–µ—Å —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω: {price.weight}")
                
                valid_weight_units = ['g', 'kg']
                assert price.weight_unit in valid_weight_units, f"–ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞ —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ {valid_weight_units}, –ø–æ–ª—É—á–µ–Ω–∞: {price.weight_unit}"
                
            elif has_volume:
                assert hasattr(price, 'volume_unit'), f"–¶–µ–Ω–∞ #{i+1} —Å –æ–±—ä–µ–º–æ–º –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–æ–ª–µ 'volume_unit'"
                try:
                    volume_value = float(price.volume)
                    assert volume_value > 0, f"–û–±—ä–µ–º —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, –ø–æ–ª—É—á–µ–Ω: {volume_value}"
                except (ValueError, TypeError):
                    pytest.fail(f"–û–±—ä–µ–º —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω: {price.volume}")
                
                valid_volume_units = ['ml', 'l']
                assert price.volume_unit in valid_volume_units, f"–ï–¥–∏–Ω–∏—Ü–∞ –æ–±—ä–µ–º–∞ —Ü–µ–Ω—ã #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ {valid_volume_units}, –ø–æ–ª—É—á–µ–Ω–∞: {price.volume_unit}"
                
            else:
                pytest.fail(f"–¶–µ–Ω–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ª–∏–±–æ –≤–µ—Å, –ª–∏–±–æ –æ–±—ä–µ–º: {price}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            assert not (has_weight and has_volume), f"–¶–µ–Ω–∞ #{i+1} –Ω–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–µ—Å –∏ –æ–±—ä–µ–º: {price}"
        
        logger.info(f"‚úÖ –¶–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã: {len(product.prices)} —Ü–µ–Ω")
        
        # TODO: 2.7 –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —Ñ–æ—Ä–º—ã –∏ –≤–∏–¥
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—ã –∏ –≤–∏–¥")
        
        assert hasattr(product, 'forms'), "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'forms'"
        assert isinstance(product.forms, list), f"–§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω—ã: {type(product.forms)}"
        assert len(product.forms) > 0, "–§–æ—Ä–º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        
        # –°–≤–µ—Ä—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        original_forms = active_product_original_data.get('forms', [])
        assert product.forms == original_forms, f"–§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª–∏—Å—å {original_forms}, –ø–æ–ª—É—á–µ–Ω—ã {product.forms}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ä–º—É
        for i, form in enumerate(product.forms):
            assert isinstance(form, str), f"–§–æ—Ä–º–∞ #{i+1} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–∞: {type(form)}"
            assert len(form.strip()) > 0, f"–§–æ—Ä–º–∞ #{i+1} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
            assert not html_pattern.search(form), f"–§–æ—Ä–º–∞ #{i+1} –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ç–µ–≥–∏: {form}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥
        assert hasattr(product, 'species'), "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'species'"
        assert product.species is not None, "–í–∏–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
        assert isinstance(product.species, str), f"–í–∏–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(product.species)}"
        assert len(product.species.strip()) > 0, "–í–∏–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        # –°–≤–µ—Ä—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        original_species = active_product_original_data.get('species', '')
        assert product.species == original_species, f"–í–∏–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: –æ–∂–∏–¥–∞–ª—Å—è '{original_species}', –ø–æ–ª—É—á–µ–Ω '{product.species}'"
        
        logger.info(f"‚úÖ –§–æ—Ä–º—ã –∏ –≤–∏–¥ –≤–∞–ª–∏–¥–Ω—ã: —Ñ–æ—Ä–º—ã={product.forms}, –≤–∏–¥='{product.species}'")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        if isinstance(e, ProductNotFoundError):
            pytest.fail(f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            raise e
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
    # - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ dir()
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π: id, title, status, cid, categories, prices, forms, species
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª–µ–π
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞
    product_attrs = dir(product)
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å _) –∏ –∏—Å–∫–ª—é—á–∞–µ–º –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
    public_attrs = []
    for attr in product_attrs:
        if not attr.startswith('_'):
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç
            attr_obj = getattr(product.__class__, attr, None)
            # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
            if not callable(getattr(product, attr)) and not isinstance(attr_obj, property):
                public_attrs.append(attr)
    
            # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å organic_components)
        expected_fields = ['id', 'alias', 'status', 'cid', 'title', 'cover_image_url', 'categories', 'forms', 'species', 'prices', 'is_active', 'organic_components']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π
    for field in expected_fields:
        assert field in public_attrs, f"–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ '{field}'"
        assert hasattr(product, field), f"–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç '{field}'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π (–∏—Å–∫–ª—é—á–∞—è —Å–≤–æ–π—Å—Ç–≤–∞)
    extra_fields = [attr for attr in public_attrs if attr not in expected_fields]
    assert len(extra_fields) == 0, f"–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π: {extra_fields}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª–µ–π
    assert isinstance(product.id, (int, str)), f"–ü–æ–ª–µ 'id' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.id)}"
    assert isinstance(product.alias, str), f"–ü–æ–ª–µ 'alias' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.alias)}"
    assert isinstance(product.status, int), f"–ü–æ–ª–µ 'status' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.status)}"
    assert isinstance(product.cid, str), f"–ü–æ–ª–µ 'cid' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.cid)}"
    assert isinstance(product.title, str), f"–ü–æ–ª–µ 'title' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.title)}"
    assert isinstance(product.cover_image_url, str), f"–ü–æ–ª–µ 'cover_image_url' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.cover_image_url)}"
    assert isinstance(product.categories, list), f"–ü–æ–ª–µ 'categories' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.categories)}"
    assert isinstance(product.forms, list), f"–ü–æ–ª–µ 'forms' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.forms)}"
    assert isinstance(product.species, str), f"–ü–æ–ª–µ 'species' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.species)}"
    assert isinstance(product.prices, list), f"–ü–æ–ª–µ 'prices' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.prices)}"
    assert isinstance(product.is_active, bool), f"–ü–æ–ª–µ 'is_active' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.is_active)}"
    assert isinstance(product.organic_components, list), f"–ü–æ–ª–µ 'organic_components' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(product.organic_components)}"
    
    logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(expected_fields)} –ø–æ–ª–µ–π, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã")
    
    # IMPLEMENTED: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ active_product_id
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è active_product_original_data
    # - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    assert active_product_id is not None, "active_product_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert str(active_product_id) == str(blockchain_id), f"active_product_id –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å blockchain_id"
    
    assert active_product_original_data is not None, "active_product_original_data –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    assert active_product_original_data['title'] == product.title, f"active_product_original_data –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤: ID={active_product_id}")
    logger.info("‚úÖ –¢–ï–°–¢ 2: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.skip(reason="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ - —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫, —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
@pytest.mark.asyncio
async def test_integration_catalog_filtering(integration_registry_service):
    """
    –¢–ï–°–¢ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è)
    
    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è!
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
    
    –ê–õ–ì–û–†–ò–¢–ú (–ü–õ–ê–ù–ò–†–£–ï–ú–´–ô):
    1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ get_all_products()
    2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¢–ï–°–¢–ê 1 –ù–ï –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –¢–ï–°–¢–ê 2 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å = 1
    """
    logger.info("üß™ –¢–ï–°–¢ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–ü–†–û–ü–£–°–ö–ê–ï–¢–°–Ø - –Ω–µ –≥–æ—Ç–æ–≤)")
    logger.warning("‚ö†Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ - —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫, —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ –≥–æ—Ç–æ–≤
    pytest.skip("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ - —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫, —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    logger.info("‚úÖ –¢–ï–°–¢ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –≥–æ—Ç–æ–≤)")

# ================== –¢–ï–°–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò PINATA RATE LIMITING =====================

@pytest.mark.asyncio
async def test_integration_pinata_rate_limiting_and_jitter(integration_registry_service):
    """
    –¢–ï–°–¢ 5: Rate Limiting –∏ Jitter –ª–æ–≥–∏–∫–∞ Pinata (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ mock)
    2. –ï—Å–ª–∏ mock - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç (–Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    3. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π - —Ç–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –∏ jitter –ª–æ–≥–∏–∫—É
    4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ rate limits
    """
    logger.info("üß™ –¢–ï–°–¢ 5: Rate Limiting –∏ Jitter –ª–æ–≥–∏–∫–∞ Pinata (Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # –ü–æ–ª—É—á–∞–µ–º storage —Å–µ—Ä–≤–∏—Å
    storage_service = integration_registry_service.storage_service
    
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    from bot.services.core.storage.pinata import SecurePinataUploader
    
    # –ï—Å–ª–∏ —ç—Ç–æ mock —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if not isinstance(storage_service, SecurePinataUploader):
        logger.info("üîß [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader (–≤–æ–∑–º–æ–∂–Ω–æ mock), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        pytest.skip("–¢–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ SecurePinataUploader (–Ω–µ mock)")
    
    logger.info("‚úÖ [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç rate limiting
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è REQUEST_DELAY >= 10.0 —Å–µ–∫—É–Ω–¥
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è MAX_RETRIES >= 10 –ø–æ–ø—ã—Ç–æ–∫
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è INITIAL_BACKOFF >= 5 —Å–µ–∫—É–Ω–¥
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è REQUEST_TIMEOUT >= 60 —Å–µ–∫—É–Ω–¥
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã rate limiting")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º REQUEST_DELAY
    assert storage_service.REQUEST_DELAY >= 10.0, f"REQUEST_DELAY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 10.0, –ø–æ–ª—É—á–µ–Ω: {storage_service.REQUEST_DELAY}"
    logger.info(f"‚úÖ REQUEST_DELAY: {storage_service.REQUEST_DELAY}s (>= 10.0s)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MAX_RETRIES
    assert storage_service.MAX_RETRIES >= 10, f"MAX_RETRIES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 10, –ø–æ–ª—É—á–µ–Ω: {storage_service.MAX_RETRIES}"
    logger.info(f"‚úÖ MAX_RETRIES: {storage_service.MAX_RETRIES} (>= 10)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º INITIAL_BACKOFF
    assert storage_service.INITIAL_BACKOFF >= 5, f"INITIAL_BACKOFF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 5, –ø–æ–ª—É—á–µ–Ω: {storage_service.INITIAL_BACKOFF}"
    logger.info(f"‚úÖ INITIAL_BACKOFF: {storage_service.INITIAL_BACKOFF}s (>= 5s)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º REQUEST_TIMEOUT
    assert storage_service.REQUEST_TIMEOUT >= 60, f"REQUEST_TIMEOUT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 60, –ø–æ–ª—É—á–µ–Ω: {storage_service.REQUEST_TIMEOUT}"
    logger.info(f"‚úÖ REQUEST_TIMEOUT: {storage_service.REQUEST_TIMEOUT}s (>= 60s)")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ jitter –ª–æ–≥–∏–∫–∏
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ _wait_for_rate_limit —Å–æ–¥–µ—Ä–∂–∏—Ç jitter
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ jitter –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5-2.0 —Å–µ–∫—É–Ω–¥
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –∑–∞–¥–µ—Ä–∂–µ–∫
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º jitter –ª–æ–≥–∏–∫—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ _wait_for_rate_limit
    assert hasattr(storage_service, '_wait_for_rate_limit'), "SecurePinataUploader –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ _wait_for_rate_limit"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç jitter –ª–æ–≥–∏–∫—É (—á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)
    import inspect
    source = inspect.getsource(storage_service._wait_for_rate_limit)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ jitter –≤ –∫–æ–¥–µ
    assert "random.uniform" in source, "–ú–µ—Ç–æ–¥ _wait_for_rate_limit –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å random.uniform –¥–ª—è jitter"
    assert "0.5" in source and "2.0" in source, "Jitter –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5-2.0 —Å–µ–∫—É–Ω–¥"
    assert "jitter" in source.lower(), "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é jitter"
    
    logger.info("‚úÖ Jitter –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–¥–µ")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –ª–æ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–µ –∏ jitter
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ª–æ–≥–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    assert "logger.info" in source, "–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    assert "–æ–∂–∏–¥–∞–Ω–∏–µ" in source or "waiting" in source.lower(), "–õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏"
    assert "–±–∞–∑–æ–≤–∞—è" in source or "base" in source.lower(), "–õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –∑–∞–¥–µ—Ä–∂–µ–∫"
    
    logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    logger.info("‚úÖ –¢–ï–°–¢ 5: Rate Limiting –∏ Jitter –ª–æ–≥–∏–∫–∞ Pinata –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_integration_circuit_breaker_pattern(integration_registry_service):
    """
    –¢–ï–°–¢ 6: Circuit Breaker Pattern (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ mock)
    2. –ï—Å–ª–∏ mock - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç (–Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    3. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π - —Ç–µ—Å—Ç–∏—Ä—É–µ–º circuit breaker –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã
    4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏ –∏ —Ç–∞–π–º–∞—É—Ç—ã
    """
    logger.info("üß™ –¢–ï–°–¢ 6: Circuit Breaker Pattern (Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # –ü–æ–ª—É—á–∞–µ–º storage —Å–µ—Ä–≤–∏—Å
    storage_service = integration_registry_service.storage_service
    
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    from bot.services.core.storage.pinata import SecurePinataUploader
    
    # –ï—Å–ª–∏ —ç—Ç–æ mock —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if not isinstance(storage_service, SecurePinataUploader):
        logger.info("üîß [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader (–≤–æ–∑–º–æ–∂–Ω–æ mock), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        pytest.skip("–¢–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ SecurePinataUploader (–Ω–µ mock)")
    
    logger.info("‚úÖ [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è circuit breaker –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _consecutive_errors
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_threshold
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_timeout
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_last_failure
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_open
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breaker –∞—Ç—Ä–∏–±—É—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    required_attrs = [
        '_consecutive_errors',
        '_circuit_breaker_threshold', 
        '_circuit_breaker_timeout',
        '_circuit_breaker_last_failure',
        '_circuit_breaker_open'
    ]
    
    for attr in required_attrs:
        assert hasattr(storage_service, attr), f"SecurePinataUploader –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç {attr}"
    
    logger.info("‚úÖ –í—Å–µ circuit breaker –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_threshold = 5
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_timeout = 300 (5 –º–∏–Ω—É—Ç)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _circuit_breaker_open = False (–∑–∞–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è _consecutive_errors = 0 (–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è circuit breaker –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    assert storage_service._circuit_breaker_threshold == 5, f"–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5, –ø–æ–ª—É—á–µ–Ω: {storage_service._circuit_breaker_threshold}"
    assert storage_service._circuit_breaker_timeout == 300, f"–¢–∞–π–º–∞—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 300 —Å–µ–∫—É–Ω–¥, –ø–æ–ª—É—á–µ–Ω: {storage_service._circuit_breaker_timeout}"
    assert storage_service._circuit_breaker_open == False, f"Circuit breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    assert storage_service._consecutive_errors == 0, f"–°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    
    logger.info("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è circuit breaker –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ circuit breaker
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ª–∏—á–∏—è _check_circuit_breaker
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ª–∏—á–∏—è _record_success
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ª–∏—á–∏—è _record_error
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã circuit breaker")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
    assert hasattr(storage_service, '_check_circuit_breaker'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ _check_circuit_breaker"
    assert hasattr(storage_service, '_record_success'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ _record_success"
    assert hasattr(storage_service, '_record_error'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ _record_error"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã —è–≤–ª—è—é—Ç—Å—è callable
    assert callable(storage_service._check_circuit_breaker), "_check_circuit_breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable"
    assert callable(storage_service._record_success), "_record_success –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable"
    assert callable(storage_service._record_error), "_record_error –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callable"
    
    logger.info("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã circuit breaker –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ callable")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ _record_success
    # - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º _consecutive_errors > 0
    # - –í—ã–∑—ã–≤–∞–µ–º _record_success
    # - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ _consecutive_errors = 0
    # - –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ _circuit_breaker_open = False
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É _record_success")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    original_errors = storage_service._consecutive_errors
    original_open = storage_service._circuit_breaker_open
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏
    storage_service._consecutive_errors = 3
    storage_service._circuit_breaker_open = True
    
    # –í—ã–∑—ã–≤–∞–µ–º _record_success
    storage_service._record_success()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert storage_service._consecutive_errors == 0, f"–°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω –≤ 0, –ø–æ–ª—É—á–µ–Ω: {storage_service._consecutive_errors}"
    assert storage_service._circuit_breaker_open == False, "Circuit breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞"
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    storage_service._consecutive_errors = original_errors
    storage_service._circuit_breaker_open = original_open
    
    logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ _record_success —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ _record_error
    # - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º _consecutive_errors = 0
    # - –í—ã–∑—ã–≤–∞–µ–º _record_error –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    # - –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ _consecutive_errors
    # - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é circuit breaker –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É _record_error")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    original_errors = storage_service._consecutive_errors
    original_open = storage_service._circuit_breaker_open
    original_last_failure = storage_service._circuit_breaker_last_failure
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    storage_service._consecutive_errors = 0
    storage_service._circuit_breaker_open = False
    
    # –í—ã–∑—ã–≤–∞–µ–º _record_error –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for i in range(3):
        storage_service._record_error()
        assert storage_service._consecutive_errors == i + 1, f"–°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {i + 1}, –ø–æ–ª—É—á–µ–Ω: {storage_service._consecutive_errors}"
        assert storage_service._circuit_breaker_open == False, f"Circuit breaker –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {i + 1} –æ—à–∏–±–æ–∫"
    
    # –í—ã–∑—ã–≤–∞–µ–º –µ—â–µ 2 —Ä–∞–∑–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ (5 –æ—à–∏–±–æ–∫)
    for i in range(2):
        storage_service._record_error()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é circuit breaker
    assert storage_service._consecutive_errors == 5, f"–°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5, –ø–æ–ª—É—á–µ–Ω: {storage_service._consecutive_errors}"
    assert storage_service._circuit_breaker_open == True, "Circuit breaker –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ 5 –æ—à–∏–±–æ–∫"
    assert storage_service._circuit_breaker_last_failure > 0, "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    storage_service._consecutive_errors = original_errors
    storage_service._circuit_breaker_open = original_open
    storage_service._circuit_breaker_last_failure = original_last_failure
    
    logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ _record_error —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    logger.info("‚úÖ –¢–ï–°–¢ 6: Circuit Breaker Pattern –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_integration_exponential_backoff_and_retry(integration_registry_service):
    """
    –¢–ï–°–¢ 7: Exponential Backoff –∏ Retry –ª–æ–≥–∏–∫–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ mock)
    2. –ï—Å–ª–∏ mock - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç (–Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    3. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π - —Ç–µ—Å—Ç–∏—Ä—É–µ–º exponential backoff –∏ retry –ª–æ–≥–∏–∫—É
    4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É HTTP 429 –æ—à–∏–±–æ–∫
    """
    logger.info("üß™ –¢–ï–°–¢ 7: Exponential Backoff –∏ Retry –ª–æ–≥–∏–∫–∞ (Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # –ü–æ–ª—É—á–∞–µ–º storage —Å–µ—Ä–≤–∏—Å
    storage_service = integration_registry_service.storage_service
    
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    from bot.services.core.storage.pinata import SecurePinataUploader
    
    # –ï—Å–ª–∏ —ç—Ç–æ mock —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if not isinstance(storage_service, SecurePinataUploader):
        logger.info("üîß [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader (–≤–æ–∑–º–æ–∂–Ω–æ mock), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        pytest.skip("–¢–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ SecurePinataUploader (–Ω–µ mock)")
    
    logger.info("‚úÖ [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ retry_with_backoff
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ _make_request –æ–±–µ—Ä–Ω—É—Ç –≤ retry_with_backoff
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (retries=MAX_RETRIES, backoff_in_seconds=INITIAL_BACKOFF)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä retry_with_backoff")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ _make_request —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    assert hasattr(storage_service, '_make_request'), "SecurePinataUploader –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ _make_request"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –æ–±–µ—Ä–Ω—É—Ç –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (—á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)
    import inspect
    source = inspect.getsource(storage_service._make_request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–¥–µ –∫–ª–∞—Å—Å–∞
    class_source = inspect.getsource(SecurePinataUploader)
    assert "@retry_with_backoff" in class_source, "–ú–µ—Ç–æ–¥ _make_request –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ @retry_with_backoff"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    assert "retries=MAX_RETRIES" in class_source, "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MAX_RETRIES"
    assert "backoff_in_seconds=INITIAL_BACKOFF" in class_source, "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å INITIAL_BACKOFF"
    
    logger.info("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä retry_with_backoff –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ exponential backoff –ª–æ–≥–∏–∫–∏
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ backoff —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (jitter)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º exponential backoff –ª–æ–≥–∏–∫—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ retry_with_backoff —Å–æ–¥–µ—Ä–∂–∏—Ç exponential backoff
    from bot.services.core.storage.pinata import retry_with_backoff
    retry_source = inspect.getsource(retry_with_backoff)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ exponential backoff
    assert "2 ** x" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å exponential backoff (2^x)"
    assert "random.uniform" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å jitter (random.uniform)"
    assert "sleep" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å sleep"
    
    logger.info("‚úÖ Exponential backoff –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP 429 –æ—à–∏–±–æ–∫
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ HTTP 429 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥—Ä—É–≥–∏–µ HTTP –æ—à–∏–±–∫–∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç retry
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É HTTP 429 –æ—à–∏–±–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É HTTP 429
    assert "429" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å HTTP 429"
    assert "Too Many Requests" in retry_source or "rate limit" in retry_source.lower(), "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å rate limiting"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö HTTP –æ—à–∏–±–æ–∫
    assert "else:" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–ª–∏—á–∞—Ç—å HTTP 429 –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    assert "ConnectionError" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ConnectionError"
    assert "Timeout" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Timeout"
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP 429 –∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ retries –æ–≥—Ä–∞–Ω–∏—á–µ–Ω MAX_RETRIES
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
    assert "x == retries" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"
    assert "raise" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    assert "logger.warning" in retry_source, "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏"
    assert "waiting" in retry_source.lower(), "Retry –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
    
    logger.info("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    logger.info("‚úÖ –¢–ï–°–¢ 7: Exponential Backoff –∏ Retry –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_integration_graceful_degradation_and_metrics(integration_registry_service):
    """
    –¢–ï–°–¢ 8: Graceful Degradation –∏ –ú–µ—Ç—Ä–∏–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ mock)
    2. –ï—Å–ª–∏ mock - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç (–Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    3. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π - —Ç–µ—Å—Ç–∏—Ä—É–µ–º graceful degradation –∏ –º–µ—Ç—Ä–∏–∫–∏
    4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    logger.info("üß™ –¢–ï–°–¢ 8: Graceful Degradation –∏ –ú–µ—Ç—Ä–∏–∫–∏ (Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    # –ü–æ–ª—É—á–∞–µ–º storage —Å–µ—Ä–≤–∏—Å
    storage_service = integration_registry_service.storage_service
    
    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø storage —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    from bot.services.core.storage.pinata import SecurePinataUploader
    
    # –ï—Å–ª–∏ —ç—Ç–æ mock —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if not isinstance(storage_service, SecurePinataUploader):
        logger.info("üîß [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader (–≤–æ–∑–º–æ–∂–Ω–æ mock), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        pytest.skip("–¢–µ—Å—Ç Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ SecurePinataUploader (–Ω–µ mock)")
    
    logger.info("‚úÖ [DEVOPS] Storage —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è SecurePinataUploader, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pinata —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ graceful degradation
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ circuit breaker –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å–±–æ–∏
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IPFS
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –ø–æ–ª–Ω–æ–º—É –æ—Ç–∫–∞–∑—É —Å–∏—Å—Ç–µ–º—ã
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º graceful degradation")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ circuit breaker –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–µ —Å–±–æ–∏
    assert hasattr(storage_service, '_check_circuit_breaker'), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ _check_circuit_breaker –¥–ª—è graceful degradation"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    assert hasattr(storage_service, 'cache'), "SecurePinataUploader –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫—ç—à –¥–ª—è graceful degradation"
    assert hasattr(storage_service.cache, 'get_file'), "–ö—ç—à –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ get_file –¥–ª—è fallback"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –æ—à–∏–±–∫–∏
    assert hasattr(storage_service, 'metrics'), "SecurePinataUploader –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
    assert hasattr(storage_service.metrics, 'track_error'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏"
    
    logger.info("‚úÖ Graceful degradation –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ PinataMetrics
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à hit/miss —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ PinataMetrics")
    
    metrics = storage_service.metrics
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    assert hasattr(metrics, 'track_upload'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏"
    assert hasattr(metrics, 'track_error'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏"
    assert hasattr(metrics, 'track_cache_hit'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—ç—à hits"
    assert hasattr(metrics, 'track_cache_miss'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—ç—à misses"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    assert hasattr(metrics, 'get_average_upload_time'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏"
    assert hasattr(metrics, 'get_cache_hit_ratio'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å ratio –∫—ç—à–∞"
    assert hasattr(metrics, 'dump_metrics'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —É–º–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è"
    
    logger.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ PinataMetrics –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –∫—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫—ç—à –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è TTL –∫—ç—à–∞
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    
    cache = storage_service.cache
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –∫—ç—à–∞
    assert hasattr(cache, 'get_file'), "–ö—ç—à –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ get_file"
    assert hasattr(cache, 'update_file'), "–ö—ç—à –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ update_file"
    assert hasattr(cache, 'needs_update'), "–ö—ç—à –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ needs_update"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
    assert hasattr(cache, '_encrypt_data'), "–ö—ç—à –¥–æ–ª–∂–µ–Ω —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
    assert hasattr(cache, '_decrypt_data'), "–ö—ç—à –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
    
    logger.info("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # IMPLEMENTED: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ rate limiting
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è alerting –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –º–µ—Ç—Ä–∏–∫
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    assert hasattr(metrics, 'upload_times'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
    assert hasattr(metrics, 'error_counts'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫"
    assert hasattr(metrics, 'cache_hits'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à hits"
    assert hasattr(metrics, 'cache_misses'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à misses"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    assert hasattr(metrics, 'last_metrics_dump'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    assert hasattr(metrics, 'metrics_dump_interval'), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    
    logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    logger.info("‚úÖ –¢–ï–°–¢ 8: Graceful Degradation –∏ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

# ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò CORNER CASES =====================

@pytest.mark.asyncio
async def test_integration_security_and_corner_cases(integration_registry_service, integration_test_data):
    """
    –¢–ï–°–¢ 4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ corner cases
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    logger.info("üß™ –¢–ï–°–¢ 4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ corner cases")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º title ("")
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å None title
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ []
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Ü–µ–Ω–∞–º–∏ []
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º –ø–æ–ª–µ
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø—É—Å—Ç—ã–µ –ø–æ–ª—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π title
    invalid_product_empty_title = {
        "id": "test_invalid_001",
        "title": "",  # –ü—É—Å—Ç–æ–π title
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_empty_title)
        if result["status"] == "error":
            logger.info(f"‚úÖ –ü—É—Å—Ç–æ–π title –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['error']}")
            assert "title" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ title: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º title –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ –ü—É—Å—Ç–æ–π title –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "title" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ title: {e}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º None title
    invalid_product_none_title = {
        "id": "test_invalid_002",
        "title": None,  # None title
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_none_title)
        if result["status"] == "error":
            logger.info(f"‚úÖ None title –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['error']}")
            assert "title" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ title: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å None title –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ None title –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "title" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ title: {e}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    invalid_product_empty_categories = {
        "id": "test_invalid_003",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": [],  # –ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_empty_categories)
        if result["status"] == "error":
            logger.info(f"‚úÖ –ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {result['error']}")
            assert "categor" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ –ü—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "categor" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {e}"
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å title –∫–∞–∫ —á–∏—Å–ª–æ
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å categories –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å prices –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (999)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º title –∫–∞–∫ —á–∏—Å–ª–æ
    invalid_product_title_number = {
        "id": "test_invalid_004",
        "title": 12345,  # Title –∫–∞–∫ —á–∏—Å–ª–æ
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_title_number)
        if result["status"] == "error":
            logger.info(f"‚úÖ Title –∫–∞–∫ —á–∏—Å–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {result['error']}")
            assert "title" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ title: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å title –∫–∞–∫ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ Title –∫–∞–∫ —á–∏—Å–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "title" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ title: {e}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º categories –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    invalid_product_categories_string = {
        "id": "test_invalid_005",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": "test",  # Categories –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_categories_string)
        if result["status"] == "error":
            logger.info(f"‚úÖ Categories –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {result['error']}")
            assert "categor" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å categories –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ Categories –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "categor" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {e}"
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–æ–π (RUB)
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    # - –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å HTML-—Ç–µ–≥–∞–º–∏ –≤ title
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É
    invalid_product_negative_price = {
        "id": "test_invalid_006",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": ["test"],
        "prices": [{"price": "-10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_negative_price)
        if result["status"] == "error":
            logger.info(f"‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {result['error']}")
            assert "price" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "price" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ: {e}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –≤–∞–ª—é—Ç—É
    invalid_product_invalid_currency = {
        "id": "test_invalid_007",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "status": 1,
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "RUB", "weight": "100", "weight_unit": "g"}],  # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(invalid_product_invalid_currency)
        if result["status"] == "error":
            logger.info(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {result['error']}")
            assert "currency" in result["error"].lower() or "validation" in result["error"].lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ: {result['error']}"
        else:
            pytest.fail(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏: {result}")
    except Exception as e:
        logger.info(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        assert "currency" in str(e).lower() or "validation" in str(e).lower(), f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ: {e}"
    
    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: Edge case —Ç–µ—Å—Ç—ã –¥–ª—è ID –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –±—ã—Å—Ç—Ä—ã–µ unit-—Ç–µ—Å—Ç—ã 
    # (test_edge_cases_*_unit –≤ test_product_registry_unit.py) –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    logger.info("‚ÑπÔ∏è Edge case —Ç–µ—Å—Ç—ã –¥–ª—è ID –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ unit-—Ç–µ—Å—Ç–∞—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    
    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è business ID –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –±—ã—Å—Ç—Ä—ã–µ unit-—Ç–µ—Å—Ç—ã
    # (test_check_product_id_exists_* –∏ test_create_product_duplicate_id_prevention –≤ test_product_registry_unit.py)
    # –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    logger.info("‚ÑπÔ∏è –¢–µ—Å—Ç—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è business ID –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ unit-—Ç–µ—Å—Ç–∞—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    

    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –¥–ª–∏–Ω–∞
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–º title (255 —Å–∏–º–≤–æ–ª–æ–≤)
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º title (3 —Å–∏–º–≤–æ–ª–∞)
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–º species
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –¥–ª–∏–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π title (3 —Å–∏–º–≤–æ–ª–∞)
    min_title_product = {
        "id": "test_boundary_001",
        "title": "Abc",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π title (3 —Å–∏–º–≤–æ–ª–∞)
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["test"],
        "prices": [{"price": "10.00", "currency": "EUR", "weight": "100", "weight_unit": "g"}],
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(min_title_product)
        assert result["status"] == "success", f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç: {result}"
        logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π title (3 —Å–∏–º–≤–æ–ª–∞) –ø—Ä–∏–Ω—è—Ç")
        
        # –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        await integration_registry_service.update_product_status(result["blockchain_id"], 0)
        
    except Exception as e:
        logger.info(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π title –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - —á–∏—Å–ª–∞
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π (0.01)
    # - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º/–æ–±—ä–µ–º–æ–º
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - —á–∏—Å–ª–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (0.01)
    min_price_product = {
        "id": "test_boundary_002",
        "title": "Min Price Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["test"],
        "prices": [{"price": "0.01", "currency": "EUR", "weight": "100", "weight_unit": "g"}],  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        "forms": ["powder"],
        "species": "Test Species"
    }
    
    try:
        result = await integration_registry_service.create_product(min_price_product)
        assert result["status"] == "success", f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–∞: {result}"
        logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (0.01) –ø—Ä–∏–Ω—è—Ç–∞")
        
        # –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        await integration_registry_service.update_product_status(result["blockchain_id"], 0)
        
    except Exception as e:
        logger.info(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {e}")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - –±–ª–æ–∫—á–µ–π–Ω
    # - –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π RPC URL)
    # - –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–∞–∑–∞)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è graceful degradation
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - –±–ª–æ–∫—á–µ–π–Ω")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–∏–º—É–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
    logger.info("‚ÑπÔ∏è –¢–µ—Å—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –±–ª–æ–∫—á–µ–π–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - IPFS
    # - –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IPFS (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π gateway)
    # - –°–∏–º—É–ª—è—Ü–∏—è rate limiting (HTTP 429)
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è retry –ª–æ–≥–∏–∫–∏
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è gracefully
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - IPFS")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–∏–º—É–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IPFS
    logger.info("‚ÑπÔ∏è –¢–µ—Å—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ IPFS —Ç—Ä–µ–±—É–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω—ã (–≤—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ)
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è rollback –º–µ—Ö–∞–Ω–∏–∑–º–∞
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫—ç—à –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    try:
        integration_registry_service.clear_cache()
        logger.info("‚úÖ –ö—ç—à –æ—á–∏—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
    
    # IMPLEMENTED: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –æ—à–∏–±–∫–∞—Ö
    # - –í–∞–ª–∏–¥–∞—Ü–∏—è —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
    # - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ SQL injection –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
    if SELLER_PRIVATE_KEY:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö
        log_output = str(logger.handlers[0].formatter.format(logging.LogRecord(
            name="test", level=logging.INFO, pathname="", lineno=0, 
            msg="test", args=(), exc_info=None
        )))
        assert SELLER_PRIVATE_KEY not in log_output, "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö"
        logger.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è")
    
    logger.info("‚úÖ –¢–ï–°–¢ 4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ corner cases –∑–∞–≤–µ—Ä—à–µ–Ω")
