import pytest
import logging
import sys
import os
import json
import time
from pathlib import Path
from dotenv import load_dotenv
import pytest_asyncio
from bot.services.product.registry import ProductRegistryService
from bot.services.core.blockchain import BlockchainService
from bot.services.core.ipfs_factory import IPFSFactory
from bot.services.product.validation import ProductValidationService
from bot.services.core.account import AccountService
from bot.model.product import Product, Description, PriceInfo
from .utils.performance_metrics import measure_performance, measure_fixture_performance

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

print("\n=== –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")

# Assert –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
AMANITA_REGISTRY_CONTRACT_ADDRESS = os.getenv("AMANITA_REGISTRY_CONTRACT_ADDRESS")

# ================== –§–ò–ö–°–¢–£–†–´ =====================

@pytest_asyncio.fixture
async def event_loop():
    import asyncio
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest_asyncio.fixture
async def integration_test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏)"""
    logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    with open(fixtures_path) as f:
        data = json.load(f)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ 3 –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    valid_products = data.get('valid_products', [])[:3]
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(valid_products)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 3 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    
    return {
        "valid_products": valid_products,
        "invalid_products": data.get('invalid_products', [])
    }

@pytest_asyncio.fixture
async def setup_test_catalog(integration_test_data):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    logger.info("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–∫—Å—Ç—É—Ä–∞—Ö
    valid_products = integration_test_data.get("valid_products", [])
    if not valid_products:
        pytest.skip("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ fixtures/products.json")
    
    logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(valid_products)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
    return {
        "products": valid_products,
        "count": len(valid_products),
        "product_ids": [p["id"] for p in valid_products]
    }

@pytest_asyncio.fixture
@measure_fixture_performance("integration_registry_service")
async def integration_registry_service(setup_test_catalog):
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProductRegistryService (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞)"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ProductRegistryService")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not SELLER_PRIVATE_KEY:
        pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    if not AMANITA_REGISTRY_CONTRACT_ADDRESS:
        pytest.skip("AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        # –°–æ–∑–¥–∞–µ–º BlockchainService (–ø—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ JS —Å–∫—Ä–∏–ø—Ç–∞—Ö)
        blockchain_service = BlockchainService()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        storage_service = IPFSFactory().get_storage()
        validation_service = ProductValidationService()
        account_service = AccountService(blockchain_service)
        
        # –°–æ–∑–¥–∞–µ–º ProductRegistryService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        registry_service = ProductRegistryService(
            blockchain_service=blockchain_service,
            storage_service=storage_service,
            validation_service=validation_service,
            account_service=account_service
        )
        
        logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        logger.info("üöÄ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥...")
        catalog_info = setup_test_catalog
        created_products = []
        failed_products = []
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑-–∑–∞ Pinata rate limiting
        logger.info("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Pinata rate limiting)")
        logger.info("üì¶ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        for i, product_data in enumerate(catalog_info["products"], 1):
            try:
                logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç {i}/{catalog_info['count']}: {product_data['title']}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑-–∑–∞ Pinata rate limiting
                logger.info(f"üì¶ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç {product_data['id']} (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
                result = await registry_service.create_product(product_data)
                
                if result["status"] == "success":
                    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç {product_data['id']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (blockchain_id: {result['blockchain_id']})")
                    created_products.append({
                        "id": product_data["id"],
                        "title": product_data["title"],
                        "blockchain_id": result["blockchain_id"],
                        "metadata_cid": result["metadata_cid"],
                        "tx_hash": result["tx_hash"],
                        "status": "created"
                    })
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_data['id']}: {result.get('error', 'Unknown error')}")
                    failed_products.append({
                        "id": product_data["id"],
                        "title": product_data["title"],
                        "error": result.get("error", "Unknown error"),
                        "status": "failed"
                    })
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_data['id']}: {e}")
                failed_products.append({
                    "id": product_data["id"],
                    "title": product_data["title"],
                    "error": str(e),
                    "status": "exception"
                })
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
        total_created = len([p for p in created_products if p["status"] == "created"])
        total_existing = len([p for p in created_products if p["status"] == "already_exists"])
        total_failed = len(failed_products)
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞:")
        logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {total_created}")
        logger.info(f"   üîÑ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {total_existing}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {total_failed}")
        logger.info(f"   üì¶ –í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {len(created_products) + len(failed_products)}")
        
        if total_failed > 0:
            logger.warning(f"‚ö†Ô∏è {total_failed} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
            for failed in failed_products:
                logger.warning(f"   - {failed['id']}: {failed['error']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ –≤ registry_service –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
        registry_service.test_catalog_info = {
            "created_products": created_products,
            "failed_products": failed_products,
            "total_created": total_created,
            "total_existing": total_existing,
            "total_failed": total_failed
        }
        
        logger.info("‚úÖ ProductRegistryService –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–µ—Å—Ç–∞—Ö")
        return registry_service
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProductRegistryService: {e}")
        pytest.skip(f"–ë–ª–æ–∫—á–µ–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@pytest_asyncio.fixture(autouse=True)
async def cleanup_after_test(integration_registry_service):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield
    logger.info("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        integration_registry_service.clear_cache()
        logger.info("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

# ================== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ =====================

@pytest.mark.asyncio
async def test_integration_create_product_with_real_data(integration_registry_service, integration_test_data):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # Arrange
    valid_products = integration_test_data.get("valid_products", [])
    if not valid_products:
        pytest.skip("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    test_product = valid_products[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    logger.info(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {test_product['title']}")
    
    # Act
    result = await integration_registry_service.create_product(test_product)
    
    # Assert
    assert result["status"] == "success", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {result.get('error', 'Unknown error')}"
    assert result["id"] == test_product["id"]
    assert result["metadata_cid"] is not None
    assert result["blockchain_id"] is not None
    assert result["tx_hash"] is not None
    
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:")
    logger.info(f"   - ID: {result['id']}")
    logger.info(f"   - Blockchain ID: {result['blockchain_id']}")
    logger.info(f"   - Metadata CID: {result['metadata_cid']}")
    logger.info(f"   - TX Hash: {result['tx_hash']}")
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.skip(reason="–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
@pytest.mark.asyncio
async def test_integration_get_all_products_with_real_data(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –ò–°–ö–õ–Æ–ß–ï–ù"""
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫:
    # 1. –î–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ IPFS –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    # 2. –ú–æ–∂–µ—Ç –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (Pinata rate limiting)
    # 3. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    # 4. –ë–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pytest.skip("–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")

@pytest.mark.asyncio
async def test_integration_get_product_with_real_data(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID")
    
    # Arrange
    all_products = integration_registry_service.get_all_products()
    if not all_products:
        pytest.skip("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    test_product_id = all_products[0].id
    logger.info(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID: {test_product_id}")
    
    # Act
    product = integration_registry_service.get_product(test_product_id)
    
    # Assert
    assert product is not None, f"–ü—Ä–æ–¥—É–∫—Ç —Å ID {test_product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    assert isinstance(product, Product)
    assert product.id == test_product_id
    assert product.title is not None
    assert product.status is not None
    
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product.title}")
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_full_product_lifecycle(integration_registry_service, integration_test_data):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    valid_products = integration_test_data.get("valid_products", [])
    if len(valid_products) < 2:
        pytest.skip("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    
    lifecycle_product = valid_products[1]  # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç
    logger.info(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥—É–∫—Ç–∞: {lifecycle_product['title']}")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    logger.info("üöÄ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    create_result = await integration_registry_service.create_product(lifecycle_product)
    assert create_result["status"] == "success"
    product_id = create_result["blockchain_id"]
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    logger.info("üîç –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    product = integration_registry_service.get_product(product_id)
    assert product is not None
    assert str(product.id) == str(product_id)
    
    # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    logger.info("üìù –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    update_result = await integration_registry_service.update_product_status(product_id, 1)
    assert update_result is True
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    logger.info("üîç –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    updated_product = integration_registry_service.get_product(product_id)
    assert updated_product is not None
    assert updated_product.status == 1
    
    logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.skip(reason="–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
@pytest.mark.asyncio
@measure_performance("catalog_retrieval_performance")
async def test_integration_catalog_retrieval_performance(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ - –ò–°–ö–õ–Æ–ß–ï–ù"""
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫:
    # 1. –î–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ IPFS –∏ –±–ª–æ–∫—á–µ–π–Ω—É
    # 2. –ú–æ–∂–µ—Ç –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    # 3. –ë–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # 4. –ó–∞–º–µ–¥–ª—è–µ—Ç –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pytest.skip("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")

@pytest.mark.skip(reason="–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
@pytest.mark.asyncio
@measure_performance("cache_performance")
async def test_integration_cache_performance(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ö–õ–Æ–ß–ï–ù"""
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫:
    # 1. –î–µ–ª–∞–µ—Ç –¥–≤–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ get_all_products()
    # 2. –ú–æ–∂–µ—Ç –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    # 3. –ë–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pytest.skip("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")

@pytest.mark.asyncio
async def test_integration_empty_catalog_handling(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # Arrange
    all_products = integration_registry_service.get_all_products()
    logger.info(f"üìä –¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(all_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # Act & Assert
    if len(all_products) == 0:
        logger.info("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ –ø—É—Å—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
        empty_result = integration_registry_service.get_all_products()
        assert isinstance(empty_result, list)
        assert len(empty_result) == 0
        logger.info("‚úÖ –ü—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.info("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç - —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_catalog_version_retrieval(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # Act
    version = integration_registry_service.get_catalog_version()
    
    # Assert
    assert isinstance(version, int)
    assert version >= 0
    
    logger.info(f"üìä –í–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {version}")
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_product_metadata_structure(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    products = integration_registry_service.get_all_products()
    if not products:
        pytest.skip("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    
    # Act & Assert
    for product in products:
        logger.info(f"üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞: {product.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        assert hasattr(product, 'id')
        assert hasattr(product, 'title')
        assert hasattr(product, 'status')
        assert hasattr(product, 'cid')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        assert isinstance(product.id, (int, str))
        assert isinstance(product.title, str)
        assert isinstance(product.status, int)
        assert isinstance(product.cid, str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        assert product.title.strip() != ""
        assert product.status >= 0
        assert len(product.cid) > 0
        
        logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_product_prices_structure(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    products = integration_registry_service.get_all_products()
    if not products:
        pytest.skip("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω")
    
    # Act & Assert
    for product in products:
        logger.info(f"üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞: {product.title}")
        
        assert hasattr(product, 'prices')
        assert isinstance(product.prices, list)
        assert len(product.prices) > 0, f"–ü—Ä–æ–¥—É–∫—Ç {product.title} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ü–µ–Ω—ã"
        
        for price in product.prices:
            assert isinstance(price, PriceInfo)
            assert hasattr(price, 'price')
            assert hasattr(price, 'currency')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
            assert float(price.price) > 0
            assert price.currency in ['EUR', 'USD']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if hasattr(price, 'weight') and price.weight:
                assert hasattr(price, 'weight_unit')
                assert price.weight_unit in ['g', 'kg']
            elif hasattr(price, 'volume') and price.volume:
                assert hasattr(price, 'volume_unit')
                assert price.volume_unit in ['ml', 'l']
            
            logger.info(f"‚úÖ –¶–µ–Ω–∞: {price.price} {price.currency}")
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_product_categories_structure(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # Arrange
    products = integration_registry_service.get_all_products()
    if not products:
        pytest.skip("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    # Act & Assert
    for product in products:
        logger.info(f"üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {product.title}")
        
        assert hasattr(product, 'categories')
        assert isinstance(product.categories, list)
        assert len(product.categories) > 0, f"–ü—Ä–æ–¥—É–∫—Ç {product.title} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        for category in product.categories:
            assert isinstance(category, str)
            assert len(category) > 0
            logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_cache_clear_functionality(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞")
    
    # Arrange
    logger.info("üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ (–∑–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à)")
    products_before = integration_registry_service.get_all_products()
    assert len(products_before) > 0
    
    # Act
    logger.info("üßπ –û—á–∏—â–∞–µ–º –∫—ç—à")
    integration_registry_service.clear_cache()
    
    # Assert
    logger.info("üöÄ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞)")
    products_after = integration_registry_service.get_all_products()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    assert len(products_after) == len(products_before)
    assert products_after[0].id == products_before[0].id
    
    logger.info("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_integration_error_handling_invalid_product_id(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º ID")
    
    # Arrange
    invalid_product_id = "invalid_id_12345"
    logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID: {invalid_product_id}")
    
    # Act
    logger.info("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ID")
    product = integration_registry_service.get_product(invalid_product_id)
    
    # Assert
    assert product is None
    logger.info("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤–æ–∑–≤—Ä–∞—â–µ–Ω None)")
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.skip(reason="–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
@pytest.mark.asyncio
@measure_performance("concurrent_catalog_access")
async def test_integration_concurrent_catalog_access(integration_registry_service):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É - –ò–°–ö–õ–Æ–ß–ï–ù"""
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫:
    # 1. –î–µ–ª–∞–µ—Ç 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ get_all_products()
    # 2. –ú–æ–∂–µ—Ç –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    # 3. –ë–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pytest.skip("–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")

# ================== –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====================

def test_integration_final_summary():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-—Ä–µ–∑—é–º–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCT REGISTRY –ó–ê–í–ï–†–®–ï–ù–û!")
    
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
    logger.info("‚úÖ –¢–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    logger.info("‚úÖ –¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    logger.info("‚è≠Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –∏—Å–∫–ª—é—á–µ–Ω—ã (–∑–∞–≤–∏—Å–∞—é—Ç)")
    logger.info("‚úÖ –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    logger.info("‚è≠Ô∏è –¢–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: –∏—Å–∫–ª—é—á–µ–Ω—ã (–∑–∞–≤–∏—Å–∞—é—Ç)")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        from .utils.performance_metrics import performance_collector
        performance_collector.log_summary()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    logger.info("üèÜ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    logger.info("üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: –±–∞–∑–æ–≤–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProductRegistryService!")

print("\n=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")
