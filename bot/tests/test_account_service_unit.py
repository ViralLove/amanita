"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è AccountService

–ë–ê–ó–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:
=====================
- –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∫–æ–≤
- –ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–æ–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
"""

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import pytest
import logging
import sys
import os
from dotenv import load_dotenv
import pytest_asyncio
from unittest.mock import Mock, AsyncMock

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from bot.services.core.account import AccountService
from bot.services.core.blockchain import BlockchainService

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from bot.tests.conftest import (
    mock_blockchain_service,
    mock_account_service,
    web3,
    invite_nft_contract
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

print("\n=== –ù–ê–ß–ê–õ–û UNIT-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ACCOUNT SERVICE ===")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
NODE_ADMIN_PRIVATE_KEY = os.getenv("NODE_ADMIN_PRIVATE_KEY")

# ================== –ë–ê–ó–û–í–´–ï –£–¢–ò–õ–ò–¢–´ =====================

def setup_mock_account_service(mock_blockchain_service):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç mock_blockchain_service –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –∫–æ—Ä—É—Ç–∏–Ω"""
    # Mock —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ conftest.py
    return mock_blockchain_service

# ================== UNIT –¢–ï–°–¢–´ =====================

class TestAccountServiceUnit:
    """Unit —Ç–µ—Å—Ç—ã –¥–ª—è AccountService —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–∫–æ–≤"""
    
    def test_account_service_initialization(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AccountService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AccountService")
        
        account_service = AccountService(mock_blockchain_service)
        
        assert account_service is not None
        assert account_service.blockchain_service == mock_blockchain_service
        logger.info("‚úÖ AccountService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def test_get_seller_account_success(self, mock_blockchain_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ["SELLER_PRIVATE_KEY"] = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        
        account_service = AccountService(mock_blockchain_service)
        seller_account = account_service.get_seller_account()
        
        assert seller_account is not None
        assert hasattr(seller_account, 'address')
        logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    
    def test_get_seller_account_missing_key(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY")
        
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if "SELLER_PRIVATE_KEY" in os.environ:
            del os.environ["SELLER_PRIVATE_KEY"]
        
        account_service = AccountService(mock_blockchain_service)
        
        with pytest.raises(ValueError, match="SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"):
            account_service.get_seller_account()
        
        logger.info("‚úÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    
    def test_is_seller_true(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ - True"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ - True")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ True
        mock_blockchain_service._call_contract_read_function = Mock(return_value=True)
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
        result = account_service.is_seller("0x1234567890abcdef1234567890abcdef12345678")
        
        assert result == True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_blockchain_service._call_contract_read_function.assert_called_once()
        logger.info("‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
    
    def test_is_seller_false(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ - False"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ - False")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ False
        mock_blockchain_service._call_contract_read_function = Mock(return_value=False)
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å
        result = account_service.is_seller("0x0987654321098765432109876543210987654321")
        
        assert result == False
        logger.info("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    
    def test_validate_invite_code_true(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ - True"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ - True")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≤–∞–π—Ç–æ–≤
        mock_blockchain_service._call_contract_read_function = Mock(return_value=5)
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏
        result = account_service.validate_invite_code("0x1234567890abcdef1234567890abcdef12345678")
        
        assert result == True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_blockchain_service._call_contract_read_function.assert_called_once()
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def test_validate_invite_code_false(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ - False"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ - False")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ 0 (–Ω–µ—Ç –∏–Ω–≤–∞–π—Ç–æ–≤)
        mock_blockchain_service._call_contract_read_function = Mock(return_value=0)
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –±–µ–∑ –∏–Ω–≤–∞–π—Ç–æ–≤
        result = account_service.validate_invite_code("0x0987654321098765432109876543210987654321")
        
        assert result == False
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω–≤–∞–π—Ç–æ–≤")
    
    def test_is_user_activated_true(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - True"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - True")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ True
        mock_blockchain_service._call_contract_read_function = Mock(return_value=True)
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = account_service.is_user_activated("0x1234567890abcdef1234567890abcdef12345678")
        
        assert result == True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_blockchain_service._call_contract_read_function.assert_called_once()
        logger.info("‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    
    def test_is_user_activated_false(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - False"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - False")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ False
        mock_blockchain_service._call_contract_read_function = Mock(return_value=False)
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = account_service.is_user_activated("0x0987654321098765432109876543210987654321")
        
        assert result == False
        logger.info("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    
    def test_get_all_activated_users(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        mock_blockchain_service._call_contract_read_function = Mock(return_value=[
            "0x1234567890abcdef1234567890abcdef12345678",
            "0x0987654321098765432109876543210987654321"
        ])
        
        account_service = AccountService(mock_blockchain_service)
        
        users = account_service.get_all_activated_users()
        
        assert isinstance(users, list)
        assert len(users) > 0
        assert all(isinstance(user, str) for user in users)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def test_batch_validate_invite_codes_success(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ - —É—Å–ø–µ—Ö"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ - —É—Å–ø–µ—Ö")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        mock_blockchain_service._call_contract_read_function = Mock(return_value=([True, False, True], ["", "Invalid", ""]))
        
        account_service = AccountService(mock_blockchain_service)
        
        invite_codes = ["AMANITA-TEST-CODE1", "AMANITA-TEST-CODE2", "AMANITA-TEST-CODE3"]
        user_address = "0x1234567890abcdef1234567890abcdef12345678"
        
        valid_codes, invalid_codes = account_service.batch_validate_invite_codes(invite_codes, user_address)
        
        assert isinstance(valid_codes, list)
        assert isinstance(invalid_codes, list)
        assert len(valid_codes) + len(invalid_codes) == len(invite_codes)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_blockchain_service._call_contract_read_function.assert_called_once()
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(valid_codes)} –≤–∞–ª–∏–¥–Ω—ã—Ö, {len(invalid_codes)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö")
    
    def test_batch_validate_invite_codes_empty_list(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        mock_blockchain_service._call_contract_read_function = Mock(return_value=([], []))
        
        account_service = AccountService(mock_blockchain_service)
        
        invite_codes = []
        user_address = "0x1234567890abcdef1234567890abcdef12345678"
        
        valid_codes, invalid_codes = account_service.batch_validate_invite_codes(invite_codes, user_address)
        
        assert valid_codes == []
        assert invalid_codes == []
        logger.info("‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    
    @pytest.mark.asyncio
    async def test_activate_and_mint_invites_success(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –º–∏–Ω—Ç–∞ –∏–Ω–≤–∞–π—Ç–æ–≤ - —É—Å–ø–µ—Ö"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∏ –º–∏–Ω—Ç –∏–Ω–≤–∞–π—Ç–æ–≤ - —É—Å–ø–µ—Ö")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ["SELLER_PRIVATE_KEY"] = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        
        # –ú–æ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        mock_blockchain_service.get_contract = Mock()
        mock_blockchain_service.estimate_gas_with_multiplier = AsyncMock(return_value=100000)
        mock_blockchain_service.transact_contract_function = AsyncMock(return_value="0xtx_hash")
        mock_blockchain_service.web3 = Mock()
        mock_blockchain_service.web3.eth.wait_for_transaction_receipt = Mock(return_value={'status': 1, 'gasUsed': 50000})
        
        account_service = AccountService(mock_blockchain_service)
        
        invite_code = "AMANITA-TEST-CODE1"
        wallet_address = "0x1234567890abcdef1234567890abcdef12345678"
        
        new_codes = await account_service.activate_and_mint_invites(invite_code, wallet_address)
        
        assert isinstance(new_codes, list)
        assert len(new_codes) == 12
        assert all(code.startswith("AMANITA-") for code in new_codes)
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –º–∏–Ω—Ç –∏–Ω–≤–∞–π—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {len(new_codes)} –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤")
    
    @pytest.mark.asyncio
    async def test_activate_and_mint_invites_missing_key(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY –≤ activate_and_mint_invites"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY –≤ activate_and_mint_invites")
        
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if "SELLER_PRIVATE_KEY" in os.environ:
            del os.environ["SELLER_PRIVATE_KEY"]
        
        account_service = AccountService(mock_blockchain_service)
        
        invite_code = "AMANITA-TEST-CODE1"
        wallet_address = "0x1234567890abcdef1234567890abcdef12345678"
        
        with pytest.raises(ValueError, match="SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"):
            await account_service.activate_and_mint_invites(invite_code, wallet_address)
        
        logger.info("‚úÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ SELLER_PRIVATE_KEY –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

# ================== EDGE CASES –ò ERROR SCENARIOS =====================

class TestAccountServiceEdgeCases:
    """–¢–µ—Å—Ç—ã edge cases –∏ error scenarios –¥–ª—è AccountService"""
    
    def test_invalid_wallet_address_format(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞")
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        invalid_addresses = [
            "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            "invalid_address",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            "0x123",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        ]
        
        for address in invalid_addresses:
            # –ú–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            try:
                result = account_service.is_seller(address)
                assert isinstance(result, bool)
                logger.info(f"‚úÖ –ê–¥—Ä–µ—Å {address} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ê–¥—Ä–µ—Å {address} –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def test_empty_invite_codes_list(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤")
        
        # –ú–æ–∫–∞–µ–º _call_contract_read_function –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        mock_blockchain_service._call_contract_read_function = Mock(return_value=([], []))
        
        account_service = AccountService(mock_blockchain_service)
        
        invite_codes = []
        user_address = "0x1234567890abcdef1234567890abcdef12345678"
        
        valid_codes, invalid_codes = account_service.batch_validate_invite_codes(invite_codes, user_address)
        
        assert valid_codes == []
        assert invalid_codes == []
        logger.info("‚úÖ –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    def test_none_values_handling(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ None –∑–Ω–∞—á–µ–Ω–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É None –∑–Ω–∞—á–µ–Ω–∏–π")
        
        account_service = AccountService(mock_blockchain_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö
        try:
            # is_seller —Å None
            result = account_service.is_seller(None)
            assert isinstance(result, bool)
            logger.info("‚úÖ None –∑–Ω–∞—á–µ–Ω–∏–µ –≤ is_seller –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è None –∑–Ω–∞—á–µ–Ω–∏–µ –≤ is_seller –≤—ã–∑–≤–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        try:
            # validate_invite_code —Å None
            result = account_service.validate_invite_code(None)
            assert isinstance(result, bool)
            logger.info("‚úÖ None –∑–Ω–∞—á–µ–Ω–∏–µ –≤ validate_invite_code –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è None –∑–Ω–∞—á–µ–Ω–∏–µ –≤ validate_invite_code –≤—ã–∑–≤–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def test_blockchain_service_errors(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ä–≤–∏—Å–∞")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏
        error_mock = Mock()
        error_mock._call_contract_read_function = Mock(side_effect=Exception("Blockchain error"))
        
        account_service = AccountService(error_mock)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        try:
            result = account_service.is_seller("0x1234567890abcdef1234567890abcdef12345678")
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –±–ª–æ–∫—á–µ–π–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {result}")
        except Exception as e:
            logger.info(f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: {e}")
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# ================== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –ú–û–ö–ê–ú–ò =====================

class TestAccountServiceMockIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–∫–∞–º–∏"""
    
    def test_mock_blockchain_service_integration(self, mock_blockchain_service):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å mock_blockchain_service"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å mock_blockchain_service")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        assert hasattr(mock_blockchain_service, '_call_contract_read_function')
        # get_contract –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–æ–≤–æ–º –º–æ–∫–µ, –Ω–æ –º—ã –º–æ–∂–µ–º –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        logger.info("‚úÖ mock_blockchain_service —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã")
    
    def test_mock_account_service_integration(self, mock_account_service):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å mock_account_service"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å mock_account_service")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        assert hasattr(mock_account_service, 'is_seller')
        assert hasattr(mock_account_service, 'validate_invite_code')
        assert hasattr(mock_account_service, 'is_user_activated')
        assert hasattr(mock_account_service, 'get_all_activated_users')
        assert hasattr(mock_account_service, 'batch_validate_invite_codes')
        assert hasattr(mock_account_service, 'batch_validate_invite_codes')
        assert hasattr(mock_account_service, 'activate_and_mint_invites')
        
        logger.info("‚úÖ mock_account_service —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã")
    
    def test_web3_fixture_integration(self, web3):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å web3 —Ñ–∏–∫—Å—Ç—É—Ä–æ–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å web3 —Ñ–∏–∫—Å—Ç—É—Ä–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ web3 —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert hasattr(web3, 'eth')
        assert hasattr(web3.eth, 'contract')
        assert hasattr(web3.eth, 'get_transaction_receipt')
        assert hasattr(web3.eth, 'get_transaction')
        assert hasattr(web3.eth, 'estimate_gas')
        
        logger.info("‚úÖ web3 —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã")
    
    def test_invite_nft_contract_fixture_integration(self, invite_nft_contract):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å invite_nft_contract —Ñ–∏–∫—Å—Ç—É—Ä–æ–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å invite_nft_contract —Ñ–∏–∫—Å—Ç—É—Ä–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ invite_nft_contract —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert invite_nft_contract is not None
        assert hasattr(invite_nft_contract, 'functions')
        
        logger.info("‚úÖ invite_nft_contract —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã")

# ================== –ó–ê–í–ï–†–®–ï–ù–ò–ï =====================

print("\n=== –ó–ê–í–ï–†–®–ï–ù–ò–ï UNIT-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ACCOUNT SERVICE ===")
