# –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ 

import os
import pytest
import logging
from datetime import datetime
from bot.services.core.blockchain import BlockchainService
from eth_account import Account
from dotenv import load_dotenv
from bot.tests.utils.invite_code_generator import generate_invite_code, validate_invite_code

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env –≤ /bot
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), "..", ".env"))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ localhost –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["BLOCKCHAIN_PROFILE"] = "localhost"

# –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ä–µ–µ—Å—Ç—Ä–∞ –∏–∑ .env
AMANITA_REGISTRY_CONTRACT_ADDRESS = os.getenv("AMANITA_REGISTRY_CONTRACT_ADDRESS")
assert AMANITA_REGISTRY_CONTRACT_ADDRESS, "AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–µ–ø–ª–æ–µ—Ä–∞
NODE_ADMIN_PRIVATE_KEY = os.getenv("NODE_ADMIN_PRIVATE_KEY")
assert NODE_ADMIN_PRIVATE_KEY, "NODE_ADMIN_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
assert SELLER_PRIVATE_KEY, "SELLER_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"

@pytest.fixture
def blockchain_service():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ BlockchainService"""
    service = BlockchainService()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–µ—Å—Ç—Ä –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    assert service.registry is not None, "–†–µ–µ—Å—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    assert service.get_contract("InviteNFT") is not None, "–ö–æ–Ω—Ç—Ä–∞–∫—Ç InviteNFT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    return service

@pytest.fixture
def seller_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    seller_private_key = os.getenv("SELLER_PRIVATE_KEY")
    assert seller_private_key, "SELLER_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
    return Account.from_key(seller_private_key)

@pytest.fixture
def generate_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    return Account.create()

@pytest.fixture
def user1_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return Account.create()

@pytest.fixture
def user2_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return Account.create()

# –•–µ–ª–ø–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å —è–≤–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

def call_contract_function(self, contract_name, function_name, *args, **kwargs):
    contract = self.get_contract(contract_name)
    if not contract:
        self._log(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç {contract_name} –Ω–µ –Ω–∞–π–¥–µ–Ω", error=True)
        return None
    # –û—Ç–¥–µ–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    service_keys = ['sender', 'contract_address', 'gas', 'gasPrice', 'nonce']
    filtered_kwargs = {k: v for k, v in kwargs.items() if k not in service_keys}
    try:
        func = getattr(contract.functions, function_name)
        result = func(*args, **filtered_kwargs).call()
        self._log(f"–í—ã–∑–æ–≤ {contract_name}.{function_name} —É—Å–ø–µ—à–µ–Ω: {result}")
        return result
    except Exception as e:
        self._log(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ {contract_name}.{function_name}: {e}", error=True)
        return None

def call_contract_function_with_address(service, method, *args, sender=None):
    # –î–ª—è call_contract_function –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º sender –∏ contract_address –≤ kwargs
    return service.call_contract_function(
        "InviteNFT",
        method,
        *args
    )

# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inviteCodes –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def generate_invite_codes(prefix, count=12):
    return [f"{prefix}{i}" for i in range(count)]

def create_user():
    return Account.create()

def log_tx_result(tx_hash, operation, blockchain_service):
    """–•–µ–ª–ø–µ—Ä –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    receipt = blockchain_service.web3.eth.wait_for_transaction_receipt(tx_hash)
    status = "‚úÖ" if receipt["status"] == 1 else "‚ùå"
    logger.info(f"{status} {operation} (tx: {tx_hash[:10]}...)")
    return receipt

def test_onboarding_flow(blockchain_service, seller_account, generate_account):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ onboarding flow")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–µ—Å—Ç—Ä –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    assert blockchain_service.registry is not None, "–†–µ–µ—Å—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    invite_nft_contract = blockchain_service.get_contract("InviteNFT")
    assert invite_nft_contract is not None, "–ö–æ–Ω—Ç—Ä–∞–∫—Ç InviteNFT –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å SELLER_ROLE –ø—Ä–æ–¥–∞–≤—Ü—É (–µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ)
    logger.info("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ SELLER_ROLE –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞...")
    SELLER_ROLE = blockchain_service.web3.keccak(text="SELLER_ROLE")
    if not invite_nft_contract.functions.hasRole(SELLER_ROLE, seller_account.address).call():
        tx_hash = blockchain_service.transact_contract_function(
            "InviteNFT",
            "grantRole",
            NODE_ADMIN_PRIVATE_KEY,
            SELLER_ROLE,
            seller_account.address
        )
        blockchain_service.web3.eth.wait_for_transaction_receipt(tx_hash)
        logger.info("‚úÖ –†–æ–ª—å SELLER_ROLE —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É")
    else:
        logger.info("‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å SELLER_ROLE")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å ETH
    logger.info("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ETH –ø—Ä–æ–¥–∞–≤—Ü–∞...")
    seller_balance = blockchain_service.web3.eth.get_balance(seller_account.address)
    min_required_balance = blockchain_service.web3.to_wei(0.1, 'ether')
    assert seller_balance >= min_required_balance, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH —É –ø—Ä–æ–¥–∞–≤—Ü–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 0.1 ETH, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {blockchain_service.web3.from_wei(seller_balance, 'ether')} ETH"
    logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å ETH –ø—Ä–æ–¥–∞–≤—Ü–∞: {blockchain_service.web3.from_wei(seller_balance, 'ether')} ETH")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –±—ã–ª —Ä–∞–Ω–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞...")
    assert not call_contract_function_with_address(
        blockchain_service,
        "isUserActivated",
        seller_account.address
    ), "–ü—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ"
    logger.info("‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å)")

    # 3. –ü—Ä–æ–¥–∞–≤–µ—Ü –º–∏–Ω—Ç–∏—Ç 12 –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    logger.info("üé´ –ú–∏–Ω—Ç–∏–Ω–≥ 12 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤...")
    initial_invite_codes = [generate_invite_code(prefix="INVITE") for _ in range(12)]
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã mintInvites: invite_codes={initial_invite_codes}, expiry=0")
    try:
        tx_hash = blockchain_service.transact_contract_function(
            "InviteNFT",
            "mintInvites",
            SELLER_PRIVATE_KEY,
            initial_invite_codes,
            0,
            gas=3000000
        )
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, tx_hash={tx_hash}")
        receipt = blockchain_service.web3.eth.wait_for_transaction_receipt(tx_hash)
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, receipt={receipt}")
        logger.info("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∏–Ω–≤–∞–π—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ –∏–Ω–≤–∞–π—Ç–æ–≤: {e}")
        raise
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–Ω–≤–∞–π—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤...")
    for code in initial_invite_codes:
        token_id = call_contract_function_with_address(
            blockchain_service,
            "getTokenIdByInviteCode",
            code
        )
        assert token_id > 0
        assert not call_contract_function_with_address(
            blockchain_service,
            "isInviteTokenUsed",
            token_id
        )
    logger.info("‚úÖ –í—Å–µ –∏–Ω–≤–∞–π—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã")

    # 5. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç
    logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user1 = create_user()
    user1_invite_code = initial_invite_codes[0]
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–¥—Ä–µ—Å–æ–º: {user1.address}")
    
    # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 12 –Ω–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è user1
    logger.info("üé´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 12 –Ω–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user1_new_invites = [generate_invite_code(prefix="USER1") for _ in range(12)]
    
    # 7. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ –º–∏–Ω—Ç–∏–º –Ω–æ–≤—ã–µ
    logger.info("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç–∞ –∏ –º–∏–Ω—Ç –Ω–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã activateAndMintInvites: invite_code={user1_invite_code}, user_address={user1.address}, new_invites={user1_new_invites}, expiry=0")
    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {seller_account.address}")
    nonce = blockchain_service.web3.eth.get_transaction_count(seller_account.address)
    balance = blockchain_service.web3.eth.get_balance(seller_account.address)
    logger.info(f"Nonce: {nonce}, –ë–∞–ª–∞–Ω—Å: {blockchain_service.web3.from_wei(balance, 'ether')} ETH")
    gas_limit = 4000000
    logger.info(f"–õ–∏–º–∏—Ç –≥–∞–∑–∞: {gas_limit}")
    
    tx_hash = blockchain_service.transact_contract_function(
        "InviteNFT",
        "activateAndMintInvites",
        SELLER_PRIVATE_KEY,
        user1_invite_code,
        user1.address,
        user1_new_invites,
        0,
        gas=gas_limit
    )
    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
    receipt = blockchain_service.web3.eth.wait_for_transaction_receipt(tx_hash)
    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: gasUsed={receipt['gasUsed']}, status={receipt['status']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω–≤–∞–π—Ç–æ–≤
    invite_balance = blockchain_service.call_contract_function(
        "InviteNFT",
        "balanceOf",
        user1.address
    )
    logger.info(f"–ë–∞–ª–∞–Ω—Å –∏–Ω–≤–∞–π—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {invite_balance}")
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user1 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    assert call_contract_function_with_address(
        blockchain_service,
        "isUserActivated",
        user1.address
    )
    logger.info("‚úÖ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user1 –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ 12 –∏–Ω–≤–∞–π—Ç–æ–≤
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user1_invites = call_contract_function_with_address(
        blockchain_service,
        "getUserInvites",
        user1.address
    )
    assert len(user1_invites) == 12
    logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª {len(user1_invites)} –∏–Ω–≤–∞–π—Ç–æ–≤")

    # 10. –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω–≤–∞–π—Ç –æ—Ç user1
    logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user2 = create_user()
    user2_invite_code = user1_new_invites[0]
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–¥—Ä–µ—Å–æ–º: {user2.address}")
    
    # 11. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 12 –Ω–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è user2
    logger.info("üé´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 12 –Ω–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user2_new_invites = [generate_invite_code(prefix="USER2") for _ in range(12)]
    
    # 12. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç –∏ –º–∏–Ω—Ç–∏–º –Ω–æ–≤—ã–µ
    logger.info("\nüîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç–∞ –∏ –º–∏–Ω—Ç –Ω–æ–≤—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã activateAndMintInvites: invite_code={user2_invite_code}, user_address={user2.address}, new_invites={user2_new_invites}, expiry=0")
    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {seller_account.address}")
    nonce = blockchain_service.web3.eth.get_transaction_count(seller_account.address)
    balance = blockchain_service.web3.eth.get_balance(seller_account.address)
    logger.info(f"Nonce: {nonce}, –ë–∞–ª–∞–Ω—Å: {blockchain_service.web3.from_wei(balance, 'ether')} ETH")
    gas_limit = 4000000
    logger.info(f"–õ–∏–º–∏—Ç –≥–∞–∑–∞: {gas_limit}")
    
    tx_hash = blockchain_service.transact_contract_function(
        "InviteNFT",
        "activateAndMintInvites",
        SELLER_PRIVATE_KEY,
        user2_invite_code,
        user2.address,
        user2_new_invites,
        0,
        gas=gas_limit
    )
    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
    receipt = blockchain_service.web3.eth.wait_for_transaction_receipt(tx_hash)
    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: gasUsed={receipt['gasUsed']}, status={receipt['status']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω–≤–∞–π—Ç–æ–≤
    invite_balance = blockchain_service.call_contract_function(
        "InviteNFT",
        "balanceOf",
        user2.address
    )
    logger.info(f"–ë–∞–ª–∞–Ω—Å –∏–Ω–≤–∞–π—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {invite_balance}")
    
    # 13. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    assert call_contract_function_with_address(
        blockchain_service,
        "isUserActivated",
        user2.address
    )
    logger.info("‚úÖ –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # 14. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user2 –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ 12 –∏–Ω–≤–∞–π—Ç–æ–≤
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user2_invites = call_contract_function_with_address(
        blockchain_service,
        "getUserInvites",
        user2.address
    )
    assert len(user2_invites) == 12
    logger.info(f"‚úÖ –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª {len(user2_invites)} –∏–Ω–≤–∞–π—Ç–æ–≤")

    # 15. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
    
    # 16. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è InviteActivated
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π InviteActivated...")
    web3 = blockchain_service.web3
    contract = blockchain_service.get_contract("InviteNFT")
    # –°–∏–≥–Ω–∞—Ç—É—Ä–∞: event InviteActivated(address indexed user, string inviteCode, uint256 tokenId, uint256 timestamp);
    event_signature_hash = web3.keccak(text="InviteActivated(address,string,uint256,uint256)").hex()
    logs = web3.eth.get_logs({
        "fromBlock": receipt['blockNumber'] - 10,
        "toBlock": receipt['blockNumber'],
        "address": contract.address,
        "topics": [event_signature_hash]
    })
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(logs)} raw –ª–æ–≥–æ–≤ InviteActivated")
    for log in logs:
        event = contract.events.InviteActivated().process_log(log)
        logger.info(f"–°–æ–±—ã—Ç–∏–µ InviteActivated:")
        logger.info(f"  - –ê–¥—Ä–µ—Å: {event['args']['user']}")
        logger.info(f"  - –ò–Ω–≤–∞–π—Ç –∫–æ–¥: {event['args']['inviteCode']}")
        logger.info(f"  - Token ID: {event['args']['tokenId']}")
        logger.info(f"  - Timestamp: {event['args']['timestamp']}")
    
    # 17. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è BatchInvitesMinted
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π BatchInvitesMinted...")
    # –°–∏–≥–Ω–∞—Ç—É—Ä–∞: event BatchInvitesMinted(address indexed to, uint256[] tokenIds, string[] inviteCodes, uint256 expiry);
    batch_event_signature_hash = web3.keccak(text="BatchInvitesMinted(address,uint256[],string[],uint256)").hex()
    batch_logs = web3.eth.get_logs({
        "fromBlock": receipt['blockNumber'] - 10,
        "toBlock": receipt['blockNumber'],
        "address": contract.address,
        "topics": [batch_event_signature_hash]
    })
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(batch_logs)} raw –ª–æ–≥–æ–≤ BatchInvitesMinted")
    for log in batch_logs:
        event = contract.events.BatchInvitesMinted().process_log(log)
        logger.info(f"–°–æ–±—ã—Ç–∏–µ BatchInvitesMinted:")
        logger.info(f"  - –ö–æ–º—É: {event['args']['to']}")
        logger.info(f"  - TokenIds: {event['args']['tokenIds']}")
        logger.info(f"  - InviteCodes: {event['args']['inviteCodes']}")
        logger.info(f"  - Expiry: {event['args']['expiry']}")
    
    # 18. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤...")
    user1_token_id = call_contract_function_with_address(
        blockchain_service,
        "getTokenIdByInviteCode",
        user1_invite_code
    )
    user2_token_id = call_contract_function_with_address(
        blockchain_service,
        "getTokenIdByInviteCode",
        user2_invite_code
    )
    
    assert call_contract_function_with_address(
        blockchain_service,
        "isInviteTokenUsed",
        user1_token_id
    )
    assert call_contract_function_with_address(
        blockchain_service,
        "isInviteTokenUsed",
        user2_token_id
    )
    logger.info("‚úÖ –í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ")
    
    # 19. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–≤–∞–π—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç–æ–≤...")
    for invite_code in [user1_invite_code, user2_invite_code]:
        token_id = call_contract_function_with_address(
            blockchain_service,
            "getTokenIdByInviteCode",
            invite_code
        )
        is_used = call_contract_function_with_address(
            blockchain_service,
            "isInviteTokenUsed",
            token_id
        )
        owner = blockchain_service.call_contract_function(
            "InviteNFT",
            "ownerOf",
            token_id
        )
        created_at = blockchain_service.call_contract_function(
            "InviteNFT",
            "getInviteCreatedAt",
            token_id
        )
        expiry = blockchain_service.call_contract_function(
            "InviteNFT",
            "getInviteExpiry",
            token_id
        )
        minter = blockchain_service.call_contract_function(
            "InviteNFT",
            "getInviteMinter",
            token_id
        )
        first_owner = blockchain_service.call_contract_function(
            "InviteNFT",
            "getInviteFirstOwner",
            token_id
        )
        logger.info(f"–ò–Ω–≤–∞–π—Ç {invite_code} (tokenId={token_id}):")
        logger.info(f"  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {is_used}")
        logger.info(f"  - –í–ª–∞–¥–µ–ª–µ—Ü: {owner}")
        logger.info(f"  - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}")
        logger.info(f"  - –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry}")
        logger.info(f"  - –úinter: {minter}")
        logger.info(f"  - –ü–µ—Ä–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {first_owner}")
    
    logger.info("üéâ –¢–µ—Å—Ç onboarding flow —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")