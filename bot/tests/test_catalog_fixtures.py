import pytest
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def test_fixtures_products_json_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ fixtures/products.json"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fixtures/products.json")
    
    # Arrange - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    with open(fixtures_path) as f:
        data = json.load(f)
    
    # Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert "valid_products" in data, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'valid_products'"
    assert "invalid_products" in data, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'invalid_products'"
    
    valid_products = data["valid_products"]
    invalid_products = data["invalid_products"]
    
    # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert len(valid_products) == 9, f"–û–∂–∏–¥–∞–ª–æ—Å—å 9 –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(valid_products)}"
    assert len(invalid_products) == 8, f"–û–∂–∏–¥–∞–ª–æ—Å—å 8 –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(invalid_products)}"
    
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(valid_products)}")
    logger.info(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(invalid_products)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    first_product = valid_products[0]
    # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_fields = ["id", "title", "cid", "categories", "cover_image_url", "forms", "species", "prices", "organic_components"]
    
    for field in required_fields:
        assert field in first_product, f"–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ '{field}'"
    
    logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {first_product['title']} (ID: {first_product['id']})")
    logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {first_product['categories']}")
    logger.info(f"‚úÖ –¶–µ–Ω—ã: {len(first_product['prices'])} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    logger.info(f"‚úÖ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(first_product['organic_components'])} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    valid_product_ids = [p["id"] for p in valid_products]
    assert len(valid_product_ids) == len(set(valid_product_ids)), "–í—Å–µ ID –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    invalid_product_ids = [p["id"] for p in invalid_products]
    assert len(invalid_product_ids) == len(set(invalid_product_ids)), "–í—Å–µ ID –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏"
    
    logger.info("‚úÖ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fixtures/products.json –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

def test_catalog_info_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    # Arrange - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    with open(fixtures_path) as f:
        data = json.load(f)
    
    valid_products = data["valid_products"]
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
    catalog_info = {
        "products": valid_products,
        "count": len(valid_products),
        "product_ids": [p["id"] for p in valid_products]
    }
    
    # Assert
    # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert catalog_info["count"] == 9, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 9"
    assert len(catalog_info["product_ids"]) == 9, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 9"
    
    # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    expected_ids = ["amanita1", "blue_lotus_tincture", "amanita_multiple_forms", "sleep_formula_1", "focus_enhancer_1"]
    for expected_id in expected_ids:
        assert expected_id in catalog_info["product_ids"], f"–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID '{expected_id}'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    for product in catalog_info["products"]:
        assert "id" in product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'id'"
        assert "title" in product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'title'"
        assert "categories" in product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'categories'"
        assert "prices" in product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'prices'"
        assert "organic_components" in product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ 'organic_components'"
        assert isinstance(product["categories"], list), "–ü–æ–ª–µ 'categories' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        assert isinstance(product["prices"], list), "–ü–æ–ª–µ 'prices' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        assert isinstance(product["organic_components"], list), "–ü–æ–ª–µ 'organic_components' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        assert len(product["prices"]) > 0, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–Ω—É"
        assert len(product["organic_components"]) > 0, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"
    
    logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {catalog_info['product_ids'][:5]}... (–≤—Å–µ–≥–æ {len(catalog_info['product_ids'])})")
    logger.info("‚úÖ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

def test_product_validation_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # Arrange - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    with open(fixtures_path) as f:
        data = json.load(f)
    
    valid_products = data["valid_products"]
    invalid_products = data["invalid_products"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    for product in valid_products:
        assert product["id"], "ID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert product["title"], "Title –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –ó–∞–º–µ–Ω–µ–Ω–æ description_cid –Ω–∞ cid
        assert product["cid"], "CID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        assert product["categories"], "Categories –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        assert product["prices"], "Prices –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        assert product["organic_components"], "Organic components –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ cover_image_url
        assert product["cover_image_url"], "Cover image URL –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ forms
        assert product["forms"], "Forms –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏)
    for product in invalid_products:
        product_id = product.get('id', 'unknown')
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {product_id}")
        
        # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if product_id == "invalid_empty_fields":
            # –í—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ (–∫—Ä–æ–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö)
            assert not product.get("title"), "Title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            assert not product.get("categories"), "Categories –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
            assert not product.get("prices"), "Prices –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
            assert not product.get("organic_components"), "Organic components –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
            # CID –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        elif product_id == "invalid_missing_organic_components":
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            assert not product.get("organic_components"), "Organic components –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
        elif product_id == "invalid_price_format":
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã
            prices = product.get("prices", [])
            assert prices, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            price = prices[0]
            # üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω
            if "weight" in price:
                assert price.get("weight") == "-100", "Weight –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
            if "volume" in price:
                assert price.get("volume") == "-50", "Volume –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
            assert price.get("price") == "not_a_number", "Price –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —á–∏—Å–ª–æ–º"
            assert price.get("currency") == "INVALID", "Currency –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        elif product_id == "invalid_cid_format":
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID –≤ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∏–ª–∏ cover_image_url
            organic_components = product.get("organic_components", [])
            assert organic_components, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            component = organic_components[0]
            assert component.get("description_cid") == "invalid_cid", "Description CID –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
            assert product.get("cover_image_url") == "invalid_cid", "Cover image URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        elif product_id == "invalid_currency":
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
            prices = product.get("prices", [])
            assert prices, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            price = prices[0]
            assert price.get("currency") == "INVALID", "Currency –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        elif product_id == "invalid_proportion_format":
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            organic_components = product.get("organic_components", [])
            assert organic_components, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            component = organic_components[0]
            assert component.get("proportion") == "invalid_proportion", "Proportion –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
        elif product_id == "invalid_proportion_sum":
            # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            organic_components = product.get("organic_components", [])
            assert organic_components, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –Ω–µ —Ä–∞–≤–Ω–∞ 100%
            proportions = [float(c.get("proportion", "0").replace("%", "")) for c in organic_components]
            assert sum(proportions) != 100, "–°—É–º–º–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 100%"
        elif product_id == "invalid_duplicate_biounit_id":
            # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è biounit_id
            organic_components = product.get("organic_components", [])
            assert organic_components, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            biounit_ids = [c.get("biounit_id") for c in organic_components]
            assert len(biounit_ids) != len(set(biounit_ids)), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è biounit_id"
        
        logger.info(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id} –ø—Ä–æ–≤–µ—Ä–µ–Ω")
    
    logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(valid_products)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(invalid_products)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    logger.info("‚úÖ –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    test_fixtures_products_json_structure()
    test_catalog_info_structure()
    test_product_validation_data()
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–∏–∫—Å—Ç—É—Ä –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!") 