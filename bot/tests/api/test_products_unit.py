import pytest
import os
import json
from unittest.mock import AsyncMock, patch, Mock

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° MOCK –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô PRODUCTREGISTRYSERVICE ===
# –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≥–æ—Ç–æ–≤—ã–µ –º–æ–∫–∏ –∏–∑ conftest.py –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö
# –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
# - –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)
# - –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
# - –ò–∑–æ–ª—è—Ü–∏—é –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
# - –õ–µ–≥–∫–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–∫–æ–≤

# === –ú–æ–∫ –¥–ª—è IPFS storage –∏ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã DI ===
from bot.dependencies import get_product_storage_service, get_product_registry_service

# === HMAC –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ ===
from bot.tests.api.test_utils import generate_hmac_headers
AMANITA_API_KEY = os.getenv("AMANITA_API_KEY", "test-api-key-12345")
AMANITA_API_SECRET = os.getenv("AMANITA_API_SECRET", "default-secret-key-change-in-production")

# === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π ProductRegistryService ===
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –º–æ–∫–∏ –∏–∑ conftest.py –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö
from bot.tests.conftest import mock_product_registry_service

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===
async def create_test_product_for_update(mock_service, product_id: str, base_data: dict = None):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    
    Args:
        mock_service: Mock ProductRegistryService
        product_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
        base_data: –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if base_data is None:
        base_data = {
            "title": f"Test Product {product_id}",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": f"QmTestDescriptionCID{product_id}",
                    "proportion": "100%"
                }
            ],
            "cover_image_url": f"QmTestCoverCID{product_id}",
            "categories": ["mushroom", "test"],
            "forms": ["powder"],
            "species": "Amanita muscaria",
            "prices": [
                {
                    "weight": "100",
                    "weight_unit": "g",
                    "price": "50",
                    "currency": "EUR"
                }
            ]
        }
    
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º business_id
        product_data = {"business_id": product_id, **base_data}
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    result = await mock_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
    assert result["status"] == "success", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id}: {result}"
    assert result["business_id"] == product_id, f"business_id —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {result['business_id']} != {product_id}"
    
    return result

async def ensure_test_product_exists(mock_service, product_id: str, base_data: dict = None):
    """
    –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    
    Args:
        mock_service: Mock ProductRegistryService
        product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞
        base_data: –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
    existing_product = await mock_service.get_product(product_id)
    
    if existing_product is None:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print(f"üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return await create_test_product_for_update(mock_service, product_id, base_data)
    else:
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id}")
        return existing_product

class MockIPFSStorage:
    """–ú–æ–∫ –¥–ª—è IPFS storage"""
    def __init__(self, should_fail_upload=False):
        self.should_fail_upload = should_fail_upload
        self.uploaded_files = []
        self.uploaded_jsons = []
    async def download_json_async(self, cid: str):
        return {"mock": "data", "cid": cid}
    async def download_file(self, cid: str):
        return b"mock file content"
    def upload_file(self, file_path: str):
        if self.should_fail_upload:
            raise Exception("Mock IPFS upload failed")
        cid = f"QmMock{len(self.uploaded_files)}"
        self.uploaded_files.append((file_path, cid))
        return cid
    def upload_json(self, data: dict):
        if self.should_fail_upload:
            raise Exception("Mock IPFS upload failed")
        cid = f"QmMockJson{len(self.uploaded_jsons)}"
        self.uploaded_jsons.append((data, cid))
        return cid

@pytest.mark.asyncio
async def test_create_product_with_mock_ipfs_success(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º IPFS storage.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    test_data = {
        "id": "test_product_1",
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "test_component",
                "description_cid": "QmTestDescriptionCID",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmTestCoverCID",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Test species",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "100", "currency": "EUR"}]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    result = await mock_product_registry_service.create_product(test_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["status"] == "success", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert result["id"] == test_data["id"], "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("test_create_product_with_mock_ipfs_success: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_preloaded_products_integration(preloaded_products_basic, preloaded_categories, preloaded_forms):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    products = await preloaded_products_basic
    assert len(products) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    first_product = products[0]
    assert first_product["status"] == "success", "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    assert "id" in first_product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ID"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    assert len(preloaded_categories) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    assert "mushroom" in preloaded_categories, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'mushroom' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    assert len(preloaded_forms) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    assert "powder" in preloaded_forms, "–§–æ—Ä–º–∞ 'powder' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
    product_categories = first_product.get("categories", [])
    for category in product_categories:
        assert category in preloaded_categories, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö"
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω")

@pytest.mark.asyncio
async def test_parametrized_fixtures_integration(
    product_type_parametrized,
    category_for_basic,
    category_for_extended,
    category_for_validation,
    form_for_basic,
    form_for_extended,
    form_for_validation
):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    assert product_type_parametrized in ["basic", "extended", "validation"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product_type_parametrized}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîß [Parametrized] –¢–µ—Å—Ç–∏—Ä—É–µ–º: —Ç–∏–ø={product_type_parametrized}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if product_type_parametrized == "basic":
        assert "mushroom" in category_for_basic, "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é mushroom"
        assert "flower" in category_for_basic, "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é flower"
        assert "powder" in form_for_basic, "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É powder"
        assert "capsules" in form_for_basic, "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É capsules"
        assert "tincture" in form_for_basic, "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É tincture"
    elif product_type_parametrized == "extended":
        assert "mushroom" in category_for_extended, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é mushroom"
        assert "flower" in category_for_extended, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é flower"
        assert "powder" in form_for_extended, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É powder"
        assert "capsules" in form_for_extended, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É capsules"
        assert "tincture" not in form_for_extended, "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É tincture"
    elif product_type_parametrized == "validation":
        assert "mushroom" in category_for_validation, "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é mushroom"
        assert "flower" not in category_for_validation, "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é flower"
        assert "powder" in form_for_validation, "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É powder"
        assert "capsules" in form_for_validation, "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É capsules"
        assert "tincture" not in form_for_validation, "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É tincture"
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –ø—Ä–æ–π–¥–µ–Ω")

@pytest.mark.asyncio
async def test_complex_fixture_integration(preloaded_products_basic, preloaded_categories, preloaded_forms, preloaded_species, preloaded_biounits):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä
    basic_products = await preloaded_products_basic
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    assert len(basic_products) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert len(preloaded_categories) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    assert len(preloaded_forms) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–æ—Ä–º—ã"
    assert len(preloaded_species) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥—ã"
    assert len(preloaded_biounits) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert "mushroom" in preloaded_categories, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'mushroom' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    assert "powder" in preloaded_forms, "–§–æ—Ä–º–∞ 'powder' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    first_product = basic_products[0]
    assert first_product["status"] == "success", "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    
    print(f"üîß [Complex] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(basic_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, {len(preloaded_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(preloaded_forms)} —Ñ–æ—Ä–º, {len(preloaded_species)} –≤–∏–¥–æ–≤, {len(preloaded_biounits)} –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü")
    print("‚úÖ –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ñ–∏–∫—Å—Ç—É—Ä—ã –ø—Ä–æ–π–¥–µ–Ω")

@pytest.mark.asyncio
async def test_create_product_with_mock_ipfs_failure():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ IPFS —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º storage.
    """
    mock_storage = MockIPFSStorage(should_fail_upload=True)
    storage_service = get_product_storage_service(storage_provider=mock_storage)
    test_data = {"title": "Test Product", "price": 100}
    cid = storage_service.upload_json(test_data)
    assert cid is None  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None –ø—Ä–∏ –æ—à–∏–±–∫–µ

@pytest.mark.asyncio
async def test_dependency_injection_with_fastapi():
    """
    –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ FastAPI —Å dependency_overrides.
    """
    from fastapi import FastAPI
    from bot.api.dependencies import get_product_storage_service
    app = FastAPI()
    mock_storage = MockIPFSStorage()
    app.dependency_overrides[get_product_storage_service] = lambda: get_product_storage_service(storage_provider=mock_storage)
    app.dependency_overrides.clear()

def test_backward_compatibility():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ProductStorageService() –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    """
    storage_service = get_product_storage_service()
    assert storage_service is not None
    assert hasattr(storage_service, 'ipfs')
    assert storage_service.ipfs is not None

# === –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∏–∂–µ ===

@pytest.mark.asyncio
async def test_create_product_success(test_app, mock_blockchain_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô organic_components:
    –≤–∞–ª–∏–¥–∞—Ü–∏—è ‚Üí —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ –≤ IPFS ‚Üí –∑–∞–ø–∏—Å—å –≤ –±–ª–æ–∫—á–µ–π–Ω.
    –û–∂–∏–¥–∞–µ—Ç—Å—è status: success, –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
    """
    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (ProductUploadIn) - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
    product_data = {
        "id": 999,
        "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "categories": [
            "mushroom",
            "mental health",
            "focus",
            "ADHD support",
            "mental force"
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    # 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å payload –¥–ª—è /products/upload (ProductUploadRequest)
    payload = {
        "products": [product_data]
    }
    # 3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    method = "POST"
    path = "/products/upload"
    body = json.dumps(payload)
    headers = generate_hmac_headers(method, path, body, AMANITA_API_KEY, AMANITA_API_SECRET)
    # 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /products/upload —Å –ø–æ–º–æ—â—å—é test_app
    response = test_app.post(
        "/products/upload",
        json=payload,
        headers=headers
    )
    # 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200 OK
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    # 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ results[0].status == "success"
    data = response.json()
    assert "results" in data, f"–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∫–ª—é—á–∞ 'results': {data}"
    assert isinstance(data["results"], list) and len(data["results"]) > 0, f"'results' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º: {data}"
    assert data["results"][0]["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {data['results'][0]}"
    # 7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ results[0] –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç id, blockchain_id, tx_hash, metadata_cid
    for key in ("id", "blockchain_id", "tx_hash", "metadata_cid"):
        assert key in data["results"][0], f"–í results[0] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}': {data['results'][0]}"
    # 8. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª–µ error –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None
    assert ("error" not in data["results"][0]) or (data["results"][0]["error"] in (None, "")), f"–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ: {data['results'][0].get('error')}"
    
    # 9. üîß –ü–†–û–í–ï–†–ò–¢–¨ –í–´–ó–û–í –ë–õ–û–ö–ß–ï–ô–ù –°–ï–†–í–ò–°–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
    # –ü—Ä–∏–Ω—Ü–∏–ø: VALIDATE_REAL_FUNCTIONALITY - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω
    assert mock_blockchain_service.create_product_called, "Blockchain —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
    
    # 10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ blockchain_id –∏ tx_hash –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è
    result = data["results"][0]
    assert result["blockchain_id"] is not None, "blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    assert result["tx_hash"] is not None, "tx_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    
    # 11. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç blockchain_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
    assert isinstance(result["blockchain_id"], int), f"blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(result['blockchain_id'])}"
    assert result["blockchain_id"] > 0, f"blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {result['blockchain_id']}"
    
    # 12. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç tx_hash (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å hex —Å—Ç—Ä–æ–∫–æ–π)
    assert result["tx_hash"].startswith("0x"), f"tx_hash –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x, –ø–æ–ª—É—á–µ–Ω–æ: {result['tx_hash']}"
    assert len(result["tx_hash"]) >= 3, f"tx_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ (0x + hex), –ø–æ–ª—É—á–µ–Ω–æ: {len(result['tx_hash'])}"
    
    # 13. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ metadata_cid –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ IPFS
    assert result["metadata_cid"].startswith("Qm"), f"metadata_cid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å IPFS CID, –ø–æ–ª—É—á–µ–Ω–æ: {result['metadata_cid']}"
    
    # 14. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
    # Mock —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–∞–ø–∏—Å—å –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
    blockchain_id = result["blockchain_id"]
    assert blockchain_id in mock_blockchain_service.product_cids, f"–ü—Ä–æ–¥—É–∫—Ç —Å blockchain_id {blockchain_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"
    
    # 15. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
    print(f"test_create_product_success: —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    print(f"   - blockchain_id: {result['blockchain_id']}")
    print(f"   - tx_hash: {result['tx_hash']}")
    print(f"   - metadata_cid: {result['metadata_cid']}")
    print(f"   - blockchain_service.create_product_called: {mock_blockchain_service.create_product_called}")

@pytest.mark.asyncio
async def test_create_product_validation_error(mock_product_registry_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ —ç—Ç–∞–ø–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'title' - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
    product_data_missing_title = {
        "id": 3,
        # "title": "Amanita muscaria ‚Äî powder",  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    result = await mock_product_registry_service.validate_product(product_data_missing_title)
    assert result is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è title"
    
    print("test_create_product_validation_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_create_product_ipfs_upload_failure(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ IPFS
    –ü—Ä–∏–Ω—Ü–∏–ø: VALIDATE_REAL_FUNCTIONALITY - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–±–æ–∏
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–±–æ—è IPFS
    mock_product_registry_service.storage_service.upload_json = AsyncMock(return_value=None)
    
    product_data = {
        "id": 2,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–±–æ–µ–º IPFS
    result = await mock_product_registry_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ–π IPFS –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
    assert result["status"] == "error", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ —Å–±–æ–µ IPFS"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
    assert "name" in result["error"].lower() or "defined" in result["error"].lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ"
    
    print("test_create_product_ipfs_upload_failure: —Å–±–æ–π IPFS —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

@pytest.mark.asyncio
async def test_create_product_blockchain_write_failure(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
    –ü—Ä–∏–Ω—Ü–∏–ø: VALIDATE_REAL_FUNCTIONALITY - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–±–æ–∏ –±–ª–æ–∫—á–µ–π–Ω–∞
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–±–æ—è –±–ª–æ–∫—á–µ–π–Ω–∞
    mock_product_registry_service.blockchain_service.create_product = AsyncMock(return_value=None)
    
    product_data = {
        "id": 7,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–±–æ–µ–º –±–ª–æ–∫—á–µ–π–Ω–∞
    result = await mock_product_registry_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
    assert result["status"] == "error", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ —Å–±–æ–µ –±–ª–æ–∫—á–µ–π–Ω–∞"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
    assert "name" in result["error"].lower() or "defined" in result["error"].lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ"
    
    print("test_create_product_blockchain_write_failure: —Å–±–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

@pytest.mark.asyncio
async def test_create_product_blockchain_id_retrieval_failure(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ blockchain_id –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    –ü—Ä–∏–Ω—Ü–∏–ø: VALIDATE_REAL_FUNCTIONALITY - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–±–æ–∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–±–æ—è –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º side_effect –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    mock_product_registry_service.blockchain_service.get_product_id_from_tx = AsyncMock(side_effect=Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id"))
    
    product_data = {
        "id": 8,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Å–±–æ–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id
    result = await mock_product_registry_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–±–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
    assert result["status"] == "error", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ —Å–±–æ–µ –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id"
    assert "blockchain" in result["error"].lower() or "id" in result["error"].lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º ID"
    
    print("test_create_product_blockchain_id_retrieval_failure: —Å–±–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

@pytest.mark.asyncio
async def test_create_product_idempotency(mock_product_registry_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    product_data = {
        "id": 9,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    result1 = await mock_product_registry_service.create_product(product_data)
    assert result1["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {result1}"
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
    result2 = await mock_product_registry_service.create_product(product_data)
    assert result2["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {result2}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    assert result1["id"] == result2["id"], f"ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏: {result1['id']} vs {result2['id']}"
    
    print("test_create_product_idempotency: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

def test_create_product_logging(api_client, mock_blockchain_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —ç—Ç–∞–ø—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è, IPFS, –±–ª–æ–∫—á–µ–π–Ω, –æ—à–∏–±–∫–∏) –ª–æ–≥–∏—Ä—É—é—Ç—Å—è."""
    assert True 

# === –¢–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (PUT) ===

@pytest.mark.asyncio
async def test_update_product_success(mock_product_registry_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service –≤–º–µ—Å—Ç–æ API –∫–ª–∏–µ–Ω—Ç–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    product_id = "update_success_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
        "title": "Updated Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmUpdatedDescriptionCID",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmUpdatedCoverCID",
        "categories": ["mushroom", "updated"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": 200,
                "weight_unit": "g",
                "price": 150.0,
                "currency": "EUR"
            }
        ]
    }
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success
    assert result["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {result}"
    assert result["business_id"] == product_id, f"–û–∂–∏–¥–∞–ª—Å—è business_id '{product_id}', –ø–æ–ª—É—á–µ–Ω–æ: {result['business_id']}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    for key in ("metadata_cid", "blockchain_id", "tx_hash"):
        assert key in result, f"–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}': {result}"
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ error –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None
    assert ("error" not in result) or (result["error"] in (None, "")), f"–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ: {result.get('error')}"
    
    print("test_update_product_success: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_validation_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    product_id = "update_validation_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_data = {
        "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title - –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    is_valid = await mock_product_registry_service.validate_product(invalid_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ title"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_validation_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_not_found(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "999"  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    update_data = {
        "id": 999,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "test_component",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    product = await mock_product_registry_service.get_product(product_id)
    assert product is None, f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å error
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å error"
    assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result["error"], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
    
    print("test_update_product_not_found: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_access_denied(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –û–¢–ö–ê–ó–ê –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    –ü—Ä–∏–Ω—Ü–∏–ø: NO_FALSE_SUCCESSES - —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ Mock —Å–µ—Ä–≤–∏—Å–µ
    mock_product_registry_service.check_permissions = True
    mock_product_registry_service.simulate_permission_denied = True
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "restricted_product_001"
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    update_data = {
        "business_id": product_id,
        "title": "Test Product - Access Denied",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # 3. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ë–ï–ó –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    # –û–ñ–ò–î–ê–ï–ú –û–®–ò–ë–ö–£ (–Ω–µ —É—Å–ø–µ—Ö!) —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É NO_FALSE_SUCCESSES
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Mock —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –û–®–ò–ë–ö–£ –¥–æ—Å—Ç—É–ø–∞
    assert result["status"] == "error", f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ª—É—á–µ–Ω–æ: {result['status']}"
    assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in result["error"], f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∞–≤, –ø–æ–ª—É—á–µ–Ω–æ: {result['error']}"
    assert result.get("error_code") == "403", f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏ 403, –ø–æ–ª—É—á–µ–Ω–æ: {result.get('error_code')}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –ù–ï –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product.title != update_data["title"], "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∞–≤–∞—Ö"
    
    print("test_update_product_access_denied: —Ç–µ—Å—Ç –û–¢–ö–ê–ó–ê –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!") 

# === –¢–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (POST) ===

@pytest.mark.asyncio
async def test_update_product_status_success(mock_product_registry_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service –≤–º–µ—Å—Ç–æ API –∫–ª–∏–µ–Ω—Ç–∞.
    –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: 1 = active, 0 = inactive.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    product_id = "update_status_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    # –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: 1 = active, 0 = inactive
    status_data = {
        "status": 1  # 1 = active (–≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ "active")
    }
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å True (—É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    assert result is True, f"–û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç True, –ø–æ–ª—É—á–µ–Ω–æ: {result}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    
    print("test_update_product_status_success: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º!")

@pytest.mark.asyncio
async def test_update_product_status_any_value_accepted(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ Mock —Å–µ—Ä–≤–∏—Å–æ–º
    –ü—Ä–∏–Ω—Ü–∏–ø: CORRECT_LOGIC - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    product_id = "update_status_any_value_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã - Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π
    test_statuses = [0, 1, 999, -1, 1000]
    
    for status in test_statuses:
        result = await mock_product_registry_service.update_product_status(product_id, status)
        # Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
        assert result is True, f"Mock —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å {status}"
    
    print("test_update_product_status_any_value_accepted: Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å!")

@pytest.mark.asyncio
async def test_update_product_status_not_found(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "999"  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    status_data = {
        "status": 1  # 1 = active (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    product = await mock_product_registry_service.get_product(product_id)
    assert product is None, f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    assert result is False, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å False"
    
    print("test_update_product_status_not_found: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_idempotency(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ç—É—Å
    product_id = "update_status_idempotency_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    status_data = {
        "status": 1  # 1 = active (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    result1 = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    assert result1 is True, "–ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    
    # –í—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    result2 = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    assert result2 is True, "–í—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    assert result1 == result2, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏"
    
    print("test_update_product_status_idempotency: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_inactive(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ inactive
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    product_id = "update_status_inactive_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    status_data = {
        "status": 0  # 0 = inactive (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—Ö
    assert result is True, "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    
    print("test_update_product_status_inactive: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!") 

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===

@pytest.mark.asyncio
async def test_update_product_missing_required_fields(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    product_id = "update_missing_fields_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    incomplete_data = {
        "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: title, organic_components, cover_image, forms, species, prices
        "categories": ["mushroom"]
        # –£–±—Ä–∞–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è: description, description_cid, attributes
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(incomplete_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_missing_required_fields: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_invalid_cid_format(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ CID
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º CID
    product_id = "update_invalid_cid_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CID
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_cid_data = {
            "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
            "title": "Test Product",
            "cover_image_url": "invalid-cid-format",  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π CID
            "categories": ["mushroom"],
            "forms": ["powder"],
            "species": "Amanita muscaria",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                    "proportion": "100%"
                }
            ],
            "prices": [
                {
                    "price": 25.99,
                    "currency": "EUR",
                    "weight": 10,
                    "weight_unit": "g"
                }
            ]
        }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–≤–µ—Ä–Ω—ã–º CID
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(invalid_cid_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ CID"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CID
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_invalid_cid_format: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_invalid_price_format(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω
    product_id = "update_invalid_price_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_price_data = {
        "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
        "title": "Test Product",
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "prices": [
            {
                "price": "invalid_price",  # –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
                "currency": "INVALID",  # –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞
                "weight": -5,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å
                "weight_unit": "invalid_unit"  # –ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(invalid_price_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_invalid_price_format: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_mock_accepts_all_formats(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç–∞—Ç—É—Å–∞
    –ü—Ä–∏–Ω—Ü–∏–ø: CORRECT_LOGIC - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Mock
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
    product_id = "update_status_all_formats_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç–∞—Ç—É—Å–∞
    test_formats = [
        123,    # –ß–∏—Å–ª–æ
        True,   # Boolean
        "active", # –°—Ç—Ä–æ–∫–∞
        999,    # –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
        -1,     # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        0,      # –ù–æ–ª—å
        1       # –ï–¥–∏–Ω–∏—Ü–∞
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    # –≠—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ API, –Ω–æ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à Mock
    for status in test_formats:
        result = await mock_product_registry_service.update_product_status(product_id, status)
        # Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
        assert result is True, f"Mock —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ä–º–∞—Ç–∞ {type(status).__name__}: {status}"
    
    print("test_update_product_status_mock_accepts_all_formats: Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ç–∞—Ç—É—Å–∞!")

@pytest.mark.asyncio
async def test_update_product_empty_categories_validation_fails(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    –ü—Ä–∏–Ω—Ü–∏–ø: CORRECT_LOGIC - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    product_id = "update_empty_categories_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    empty_categories_data = {
        "business_id": product_id,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": [],  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(empty_categories_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_empty_categories_validation_fails: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö!") 

# === –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö HTTP –æ—à–∏–±–æ–∫ ===

@pytest.mark.asyncio
async def test_update_product_404_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–∫–∏ - –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "999999"  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    update_data = {
        "business_id": 999999,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    product = await mock_product_registry_service.get_product(product_id)
    assert product is None, f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å error –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å error"
    assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result["error"], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
    
    print("test_update_product_404_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_403_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 403 –æ—à–∏–±–∫–∏ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    –ü—Ä–∏–Ω—Ü–∏–ø: CORRECT_LOGIC - —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    """
    # 1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–∫–∞–∑–∞ –≤ –ø—Ä–∞–≤–∞—Ö
    # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑
    mock_product_registry_service.check_permissions = True
    mock_product_registry_service.simulate_permission_denied = True
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "permission_test_001"
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 403 –æ—à–∏–±–∫–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    update_data = {
        "business_id": product_id,
        "title": "Test Product - Permission Denied",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # 3. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ë–ï–ó –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    # –û–ñ–ò–î–ê–ï–ú –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–£–Æ –û–®–ò–ë–ö–£ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É CORRECT_LOGIC
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Mock —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    assert result["status"] == "error", f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ª—É—á–µ–Ω–æ: {result['status']}"
    assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in result["error"], f"–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∞–≤, –ø–æ–ª—É—á–µ–Ω–æ: {result['error']}"
    assert result.get("error_code") == "403", f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏ 403, –ø–æ–ª—É—á–µ–Ω–æ: {result.get('error_code')}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –ù–ï –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product.title != update_data["title"], "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –ø—Ä–∞–≤–∞—Ö"
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Mock —Å–µ—Ä–≤–∏—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–ª –æ—Ç–∫–∞–∑ –≤ –ø—Ä–∞–≤–∞—Ö
    assert mock_product_registry_service.check_permissions, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞"
    assert mock_product_registry_service.simulate_permission_denied, "–û—Ç–∫–∞–∑ –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω"
    
    print("test_update_product_403_error: —Ç–µ—Å—Ç 403 –æ—à–∏–±–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")

@pytest.mark.asyncio
async def test_update_product_missing_title_validation_fails(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è title
    –ü—Ä–∏–Ω—Ü–∏–ø: CORRECT_LOGIC - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    product_id = "update_missing_title_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ title)
    invalid_update_data = {
        "business_id": product_id,
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title - –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        "cover_image_url": "QmYrs5eZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    result = await mock_product_registry_service.update_product(product_id, invalid_update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–≤–∞–ª–∏ –æ—à–∏–±–∫—É
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å error"
    assert "–Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é" in result["error"], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    
    print("test_update_product_missing_title_validation_fails: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ title!")

@pytest.mark.asyncio
async def test_update_product_internal_server_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π 500 –æ—à–∏–±–∫–∏ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    –ü—Ä–∏–Ω—Ü–∏–ø: VALIDATE_REAL_FUNCTIONALITY - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "update_internal_error_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ë–ï–ó –º–æ–∫–∞ –æ—à–∏–±–∫–∏)
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # 2. –¢–ï–ü–ï–†–¨ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ Mock —Å–µ—Ä–≤–∏—Å–µ)
    mock_product_registry_service.validate_product = AsyncMock(return_value=False)
    
    update_data = {
        "business_id": product_id,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–µ"
    assert "–æ—à–∏–±–∫–∞" in result["error"].lower() or "error" in result["error"].lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–±–ª–µ–º—É"
    
    print("test_update_product_internal_server_error: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")

@pytest.mark.asyncio
async def test_update_product_status_success_no_500_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ 500 –æ—à–∏–±–æ–∫
    –ü—Ä–∏–Ω—Ü–∏–ø: CORRECT_LOGIC - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "update_status_success_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    status_data = {
        "status": 1  # 1 = active (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    assert result is True, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    
    print("test_update_product_status_success_no_500_error: —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫!") 

# ============================================================================
# –¢–ï–°–¢–´ –î–õ–Ø –ù–û–í–û–ì–û ENDPOINT GET /products/{seller_address}
# ============================================================================

def test_get_seller_catalog_success(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ GET /products/{seller_address}
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Product –º–æ–¥–µ–ª–∏
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from bot.model.product import Product, PriceInfo, OrganicComponent
    
    mock_products = [
        Product(
            business_id="amanita_powder_123",  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
            blockchain_id=123,                  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ blockchain_id
            status=1,
            cid="QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
            title="Amanita Muscaria Powder",
            organic_components=[
                OrganicComponent(
                    biounit_id="amanita_muscaria",
                    description_cid="QmDescCID",
                    proportion="100%"
                )
            ],
            cover_image_url="QmImageCID",  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ URL –Ω–∞ CID
            categories=["mushroom", "powder"],
            forms=["powder"],
            species="Amanita Muscaria",
            prices=[
                PriceInfo(
                    price=50,
                    currency="EUR",
                    weight="100",
                    weight_unit="g",
                    volume=None,
                    volume_unit=None,
                    form="powder"
                )
            ]
        )
    ]
    
    # –ú–æ–∫–∞–µ–º get_all_products –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö Product –æ–±—ä–µ–∫—Ç–æ–≤
    mock_product_registry_service.get_all_products = AsyncMock(return_value=mock_products)
    
    # Act
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º test_app –≤–º–µ—Å—Ç–æ api_client
    response = test_app.get(f"/products/{seller_address}")
    
    # Assert
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    
    data = response.json()
    assert data["seller_address"] == seller_address
    assert data["total_count"] == 1
    assert len(data["products"]) == 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–∑ Product –º–æ–¥–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ
    product = data["products"][0]
    assert product["business_id"] == "amanita_powder_123"  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id
    assert product["title"] == "Amanita Muscaria Powder"
    assert product["status"] == 1
    assert product["cid"] == "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG"
    assert "mushroom" in product["categories"]
    assert "powder" in product["categories"]
    assert "powder" in product["forms"]
    assert product["species"] == "Amanita Muscaria"
    assert product["cover_image_url"] == "QmImageCID"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω
    assert len(product["prices"]) == 1
    price = product["prices"][0]
    assert price["price"] == 50
    assert price["currency"] == "EUR"
    assert float(price["weight"]) == 100.0  # Decimal('100') -> 100.0
    assert price["weight_unit"] == "g"
    assert price["form"] == "powder"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ volume –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (None –≤ PriceInfo)
    assert "volume" not in price or price["volume_unit"] is None
    assert "volume_unit" not in price or price["volume_unit"] is None

def test_get_seller_catalog_response_model_compliance(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞ ProductCatalogResponse –º–æ–¥–µ–ª–∏
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    mock_product_registry_service.get_all_products = AsyncMock(return_value=[])
    
    # Act
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º test_app –≤–º–µ—Å—Ç–æ api_client
    response = test_app.get(f"/products/{seller_address}")
    
    # Assert
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    
    data = response.json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ProductCatalogResponse –º–æ–¥–µ–ª–∏
    from bot.api.models.product import ProductCatalogResponse
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å ProductCatalogResponse –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        catalog_response = ProductCatalogResponse(**data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        assert catalog_response.seller_address == seller_address
        assert catalog_response.total_count == 0
        assert catalog_response.products == []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        assert catalog_response.catalog_version is None
        assert catalog_response.last_updated is None
        
    except Exception as e:
        pytest.fail(f"–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ProductCatalogResponse –º–æ–¥–µ–ª–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON
    try:
        response_json = catalog_response.model_dump_json()
        assert response_json is not None
    except Exception as e:
        pytest.fail(f"ProductCatalogResponse –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –≤ JSON: {e}")

@pytest.mark.asyncio
async def test_get_seller_catalog_invalid_ethereum_address(api_client):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Ethereum –∞–¥—Ä–µ—Å–∞ –≤ GET /products/{seller_address}
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ EthereumAddress –º–æ–¥–µ–ª—å
    """
    # Arrange - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ Ethereum –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å ValueError –≤ EthereumAddress
    invalid_addresses = [
        "invalid_address",
        "0x123",  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8bG",  # –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (G –Ω–µ hex)
        "742d35cc6634c0532925a3b8d4c9db96c4b4d8b6",  # –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 0x
        "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6extra"  # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    ]
    
    for invalid_address in invalid_addresses:
        # Act
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HMAC –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
        method = "GET"
        path = f"/products/{invalid_address}"
        body = ""
        headers = generate_hmac_headers(method, path, body, AMANITA_API_KEY, AMANITA_API_SECRET)
        
        response = await api_client.get(f"/products/{invalid_address}", headers=headers)
        
        # Assert - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å HTTP 400 Bad Request
        assert response.status_code == 400, f"–î–ª—è –∞–¥—Ä–µ—Å–∞ '{invalid_address}' –æ–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert "message" in data, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{invalid_address}'"
        assert "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Ethereum –∞–¥—Ä–µ—Å–∞" in data["message"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{invalid_address}': {data['message']}"
        assert invalid_address in data["message"], f"–ê–¥—Ä–µ—Å '{invalid_address}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–ø–æ–º—è–Ω—É—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ"

def test_get_seller_catalog_ethereum_address_normalization(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Ethereum –∞–¥—Ä–µ—Å–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    """
    # Arrange - –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
    valid_addresses = [
        "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6",  # –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        "0x742D35CC6634C0532925A3B8D4C9DB96C4B4D8B6",  # –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        "0x742d35Cc6634c0532925a3b8d4c9db96c4b4d8b6"   # —Å–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
    ]
    
    for address in valid_addresses:
        # –ú–æ–∫–∞–µ–º seller_account.address –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
        mock_product_registry_service.seller_account.address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
        
        # –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        mock_product_registry_service.get_all_products = AsyncMock(return_value=[])
        
        # Act
        response = test_app.get(f"/products/{address}")
        
        # Assert - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø (HTTP 200) –∏ –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
        assert response.status_code == 200, f"–î–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ '{address}' –æ–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data["seller_address"] == "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6", f"–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è '{address}'"
        assert data["total_count"] == 0

def test_get_seller_catalog_access_denied(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
    """
    # Arrange - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
    requested_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    current_seller_address = "0x1234567890123456789012345678901234567890"  # –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å
    
    # –ú–æ–∫–∞–µ–º seller_account.address - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ endpoint
    mock_product_registry_service.seller_account.address = current_seller_address
    
    # Act
    response = test_app.get(f"/products/{requested_address}")
    
    # Assert - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å HTTP 403 Forbidden
    assert response.status_code == 403, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 403, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    
    data = response.json()
    assert "detail" in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'detail' –≤ –æ—Ç–≤–µ—Ç–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"
    assert "Access denied: can only view own catalog" in data["detail"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ: {data['detail']}"

def test_get_seller_catalog_real_product_structure(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ Product –º–æ–¥–µ–ª–∏
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from bot.model.product import Product, PriceInfo, OrganicComponent
    
    mock_product = Product(
        business_id="test_product_123",
        blockchain_id=123,
        status=1,
        cid="QmTestCID",
        title="Test Product",
        organic_components=[
            OrganicComponent(
                biounit_id="amanita_muscaria",
                description_cid="QmDescCID",
                proportion="100%"
            )
        ],
        cover_image_url="QmExampleImageCID",
        categories=["mushroom", "test"],
        forms=["powder"],
        species="Test Species",
        prices=[
            PriceInfo(
                price=100,
                currency="USD",
                weight="200",
                weight_unit="g",
                volume=None,
                volume_unit=None,
                form="powder"
            )
        ]
    )
    
    # –ú–æ–∫–∞–µ–º get_all_products –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Product –æ–±—ä–µ–∫—Ç–∞
    mock_product_registry_service.get_all_products = AsyncMock(return_value=[mock_product])
    
    # Act
    response = test_app.get(f"/products/{seller_address}")
    
    # Assert
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    
    data = response.json()
    assert data["seller_address"] == seller_address
    assert data["total_count"] == 1
    assert len(data["products"]) == 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–∑ Product –º–æ–¥–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ
    product = data["products"][0]
    assert product["business_id"] == "test_product_123"  # product.business_id
    assert product["blockchain_id"] == 123  # product.blockchain_id
    assert product["title"] == "Test Product"
    assert product["status"] == 1
    assert product["cid"] == "QmTestCID"
    assert product["categories"] == ["mushroom", "test"]
    assert product["forms"] == ["powder"]
    assert product["species"] == "Test Species"
    assert product["cover_image_url"] == "QmExampleImageCID"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω
    assert len(product["prices"]) == 1
    price = product["prices"][0]
    assert price["price"] == 100
    assert price["currency"] == "USD"
    assert price["weight"] == 200
    assert price["weight_unit"] == "g"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ volume –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (None –≤ PriceInfo)
    assert "volume" not in price or price["volume"] is None
    assert "volume_unit" not in price or price["volume_unit"] is None
    assert price["form"] == "powder"

def test_get_seller_catalog_empty_catalog(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥
    mock_product_registry_service.get_all_products = AsyncMock(return_value=[])
    
    # Act
    response = test_app.get(f"/products/{seller_address}")
    
    # Assert
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    
    data = response.json()
    assert data["seller_address"] == seller_address
    assert data["total_count"] == 0
    assert len(data["products"]) == 0
    assert data["products"] == []

def test_get_seller_catalog_service_error(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ get_all_products
    mock_product_registry_service.get_all_products = AsyncMock(
        side_effect=Exception("Database connection failed")
    )
    
    # Act
    response = test_app.get(f"/products/{seller_address}")
    
    # Assert
    assert response.status_code == 500, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 500, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    
    data = response.json()
    assert "detail" in data
    assert "Internal server error" in data["detail"]

def test_get_seller_catalog_case_insensitive_address(test_app, mock_product_registry_service):
    """
    –¢–µ—Å—Ç –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É Ethereum –∞–¥—Ä–µ—Å–æ–≤
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    """
    # Arrange - –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
    seller_address_lower = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    seller_address_upper = "0x742D35CC6634C0532925A3B8D4C9DB96C4B4D8B6"
    seller_address_mixed = "0x742d35Cc6634c0532925a3b8d4c9db96c4b4d8b6"
    
    # –ú–æ–∫–∞–µ–º seller_account.address –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
    mock_product_registry_service.seller_account.address = seller_address_lower
    
    # –ú–æ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    from bot.model.product import Product, PriceInfo
    
    mock_products = [
        Product(
            business_id="test_product_123",
            blockchain_id=123,
            status=1,
            cid="QmTestCID",
            title="Test Product",
            organic_components=[
                OrganicComponent(
                    biounit_id="amanita_muscaria",
                    description_cid="QmDescCID",
                    proportion="100%"
                )
            ],
            cover_image_url="QmTestProductCID",
            categories=["test"],
            forms=["test"],
            species="Test Species",
            prices=[
                PriceInfo(
                    price=100,
                    currency="USD",
                    weight="200",
                    weight_unit="g",
                    volume=None,
                    volume_unit=None,
                    form="test"
                )
            ]
        )
    ]
    
    mock_product_registry_service.get_all_products = AsyncMock(return_value=mock_products)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
    test_addresses = [seller_address_upper, seller_address_mixed]
    
    for address in test_addresses:
        # Act - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –∞–¥—Ä–µ—Å–æ–º –≤ –¥—Ä—É–≥–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        response = test_app.get(f"/products/{address}")
        
        # Assert - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø (HTTP 200) –∏ –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
        assert response.status_code == 200, f"–î–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ '{address}' –æ–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        assert data["seller_address"] == seller_address_lower, f"–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è '{address}'. –û–∂–∏–¥–∞–ª—Å—è: {seller_address_lower}, –ø–æ–ª—É—á–µ–Ω: {data['seller_address']}"
        assert data["total_count"] == 1, f"–û–∂–∏–¥–∞–ª—Å—è 1 –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}'"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        assert len(data["products"]) == 1
        product = data["products"][0]
        assert product["business_id"] == "test_product_123"
        assert product["title"] == "Test Product"

# ============================================================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–û–í
# ============================================================================

# ============================================================================
# UNIT –¢–ï–°–¢–´ –î–õ–Ø ENDPOINT GET /products/{seller_address} (–±–µ–∑ HTTP)
# ============================================================================

from bot.api.routes.products import get_seller_catalog
from bot.api.models.common import EthereumAddress
from fastapi import HTTPException
from unittest.mock import Mock
from bot.model.product import Product, PriceInfo, OrganicComponent

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_success(mock_product_registry_service):
    """
    Unit —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ endpoint get_seller_catalog - —É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    mock_request = Mock()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from bot.model.product import Product, PriceInfo, OrganicComponent
    
    mock_products = [
        Product(
            business_id="amanita_powder_123",
            blockchain_id=123,
            status=1,
            cid="QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
            title="Amanita Muscaria Powder",
            organic_components=[
                OrganicComponent(
                    biounit_id="amanita_muscaria",
                    description_cid="QmDescCID",
                    proportion="100%"
                )
            ],
            cover_image_url="QmImageCID",
            categories=["mushroom", "powder"],
            forms=["powder"],
            species="Amanita Muscaria",
            prices=[
                PriceInfo(
                    price=50,
                    currency="EUR",
                    weight="100",
                    weight_unit="g",
                    volume=None,
                    volume_unit=None,
                    form="powder"
                )
            ]
        )
    ]
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –ú–æ–∫–∞–µ–º get_all_products –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö Product –æ–±—ä–µ–∫—Ç–æ–≤
    mock_product_registry_service.get_all_products = AsyncMock(return_value=mock_products)
    
    # Act
    result = await get_seller_catalog(
        seller_address=seller_address,
        registry_service=mock_product_registry_service,
        http_request=mock_request
    )
    
    # Assert
    assert result["seller_address"] == seller_address
    assert result["total_count"] == 1
    assert len(result["products"]) == 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–∑ Product –º–æ–¥–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ
    product = result["products"][0]
    assert product["business_id"] == "amanita_powder_123"  # product.business_id
    assert product["blockchain_id"] == 123  # product.blockchain_id
    assert product["title"] == "Amanita Muscaria Powder"
    assert product["status"] == 1
    assert product["cid"] == "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG"
    assert "mushroom" in product["categories"]
    assert "powder" in product["categories"]
    assert "powder" in product["forms"]
    assert product["species"] == "Amanita Muscaria"
    assert product["cover_image_url"] == "QmImageCID"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–Ω
    assert len(product["prices"]) == 1
    price = product["prices"][0]
    assert price["price"] == 50
    assert price["currency"] == "EUR"
    assert float(price["weight"]) == 100.0  # Decimal('100') -> 100.0
    assert price["weight_unit"] == "g"
    assert price["form"] == "powder"

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_invalid_ethereum_address():
    """
    Unit —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ endpoint get_seller_catalog - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å
    """
    # Arrange
    invalid_address = "invalid_address"
    mock_registry_service = Mock()
    mock_request = Mock()
    
    # Act & Assert
    with pytest.raises(HTTPException) as exc_info:
        await get_seller_catalog(
            seller_address=invalid_address,
            registry_service=mock_registry_service,
            http_request=mock_request
        )
    
    assert exc_info.value.status_code == 400
    assert "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Ethereum –∞–¥—Ä–µ—Å–∞" in exc_info.value.detail
    assert invalid_address in exc_info.value.detail

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_access_denied(mock_product_registry_service):
    """
    Unit —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ endpoint get_seller_catalog - –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ
    """
    # Arrange
    requested_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    current_seller_address = "0x1234567890123456789012345678901234567890"  # –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å
    mock_request = Mock()
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = current_seller_address
    
    # Act & Assert
    with pytest.raises(HTTPException) as exc_info:
        await get_seller_catalog(
            seller_address=requested_address,
            registry_service=mock_product_registry_service,
            http_request=mock_request
        )
    
    assert exc_info.value.status_code == 403
    assert "Access denied: can only view own catalog" in exc_info.value.detail

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_empty_catalog(mock_product_registry_service):
    """
    Unit —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ endpoint get_seller_catalog - –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    mock_request = Mock()
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥
    mock_product_registry_service.get_all_products = AsyncMock(return_value=[])
    
    # Act
    result = await get_seller_catalog(
        seller_address=seller_address,
        registry_service=mock_product_registry_service,
        http_request=mock_request
    )
    
    # Assert
    assert result["seller_address"] == seller_address
    assert result["total_count"] == 0
    assert len(result["products"]) == 0
    assert result["products"] == []

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_service_error(mock_product_registry_service):
    """
    Unit —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ endpoint get_seller_catalog - –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    """
    # Arrange
    seller_address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    mock_request = Mock()
    
    # –ú–æ–∫–∞–µ–º seller_account.address
    mock_product_registry_service.seller_account.address = seller_address
    
    # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ get_all_products
    mock_product_registry_service.get_all_products = AsyncMock(
        side_effect=Exception("Database connection failed")
    )
    
    # Act & Assert
    with pytest.raises(HTTPException) as exc_info:
        await get_seller_catalog(
            seller_address=seller_address,
            registry_service=mock_product_registry_service,
            http_request=mock_request
        )
    
    assert exc_info.value.status_code == 500
    assert "Internal server error" in exc_info.value.detail

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_case_insensitive_address(mock_product_registry_service):
    """
    Unit —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ endpoint get_seller_catalog - –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
    """
    # Arrange - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –∞–¥—Ä–µ—Å–æ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    seller_address_upper = "0x742D35CC6634C0532925A3B8D4C9DB96C4B4D8B6"
    seller_address_lower = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"
    mock_request = Mock()
    
    # –ú–æ–∫–∞–µ–º seller_account.address –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
    mock_product_registry_service.seller_account.address = seller_address_lower
    
    # –ú–æ–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    mock_product_registry_service.get_all_products = AsyncMock(return_value=[])
    
    # Act
    result = await get_seller_catalog(
        seller_address=seller_address_upper,
        registry_service=mock_product_registry_service,
        http_request=mock_request
    )
    
    # Assert - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∏ –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
    assert result["seller_address"] == seller_address_lower
    assert result["total_count"] == 0

@pytest.mark.asyncio
async def test_get_seller_catalog_logic_ethereum_address_validation():
    """
    Unit —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Ethereum –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Pydantic –º–æ–¥–µ–ª—å
    """
    # Arrange - –≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    valid_addresses = [
        "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6",
        "0x1234567890123456789012345678901234567890",
        "0xABCDEF1234567890ABCDEF1234567890ABCDEF12"
    ]
    
    for address in valid_addresses:
        # Act
        validated_address = EthereumAddress(address)
        
        # Assert
        assert str(validated_address) == address.lower()  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    
    # Arrange - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    invalid_addresses = [
        "invalid_address",
        "0x123",  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8bG",  # –Ω–µ–≤–µ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        "742d35cc6634c0532925a3b8d4c9db96c4b4d8b6",  # –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 0x
        "",  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6extra"  # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    ]
    
    for address in invalid_addresses:
        # Act & Assert
        with pytest.raises(ValueError):
            EthereumAddress(address)

@pytest.mark.asyncio
async def test_create_product_integration_blockchain_ipfs_failures(test_app, mock_blockchain_service):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–±–æ–µ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ IPFS –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ü—Ä–∏–Ω—Ü–∏–ø: MINIMAL_MOCK_OVERUSE - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–±–æ–µ–≤
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–±–æ–µ–≤
    mock_blockchain_service.create_product = AsyncMock(return_value=None)  # –°–±–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞
    
    product_data = {
        "id": 999,
        "title": "Amanita muscaria ‚Äî integration test",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "categories": ["mushroom"],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    payload = {"products": [product_data]}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    method = "POST"
    path = "/products/upload"
    body = json.dumps(payload)
    headers = generate_hmac_headers(method, path, body, AMANITA_API_KEY, AMANITA_API_SECRET)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–±–æ–µ–º –±–ª–æ–∫—á–µ–π–Ω–∞
    response = test_app.post("/products/upload", json=payload, headers=headers)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ–π –±–ª–æ–∫—á–µ–π–Ω–∞
    # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å –æ—à–∏–±–∫–æ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∞ –Ω–µ 500
    assert response.status_code == 200, "API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ"
    
    data = response.json()
    assert data["results"][0]["status"] == "error", "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫—É"
    assert "blockchain" in data["results"][0]["error"].lower() or "name" in data["results"][0]["error"].lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã"
    
    print("test_create_product_integration_blockchain_ipfs_failures: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–±–æ–µ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")

@pytest.mark.asyncio
async def test_create_product_network_timeout_error(test_app, mock_blockchain_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ü—Ä–∏–Ω—Ü–∏–ø: VALIDATE_REAL_FUNCTIONALITY - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
    mock_blockchain_service.create_product = AsyncMock(side_effect=TimeoutError("Network timeout"))
    
    product_data = {
        "id": 998,
        "title": "Amanita muscaria ‚Äî timeout test",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "categories": ["mushroom"],
        "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    payload = {"products": [product_data]}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    method = "POST"
    path = "/products/upload"
    body = json.dumps(payload)
    headers = generate_hmac_headers(method, path, body, AMANITA_API_KEY, AMANITA_API_SECRET)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
    response = test_app.post("/products/upload", json=payload, headers=headers)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
    # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å –æ—à–∏–±–∫–æ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∞ –Ω–µ 500
    assert response.status_code == 200, "API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ"
    
    data = response.json()
    assert data["results"][0]["status"] == "error", "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫—É"
    assert "timeout" in data["results"][0]["error"].lower() or "network" in data["results"][0]["error"].lower(), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–µ—Ç–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É"
    
    print("test_create_product_network_timeout_error: —Å–µ—Ç–µ–≤–æ–π —Ç–∞–π–º–∞—É—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")