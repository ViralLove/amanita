import pytest

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° MOCK –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô PRODUCTREGISTRYSERVICE ===
# –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≥–æ—Ç–æ–≤—ã–µ –º–æ–∫–∏ –∏–∑ conftest.py –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö
# –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
# - –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)
# - –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
# - –ò–∑–æ–ª—è—Ü–∏—é –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
# - –õ–µ–≥–∫–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–∫–æ–≤

# === –ú–æ–∫ –¥–ª—è IPFS storage –∏ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã DI ===
from bot.dependencies import get_product_storage_service, get_product_registry_service

# === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π ProductRegistryService ===
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –º–æ–∫–∏ –∏–∑ conftest.py –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö
from bot.tests.conftest import mock_product_registry_service

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===
async def create_test_product_for_update(mock_service, product_id: str, base_data: dict = None):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    
    Args:
        mock_service: Mock ProductRegistryService
        product_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
        base_data: –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    """
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if base_data is None:
        base_data = {
            "title": f"Test Product {product_id}",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": f"QmTestDescriptionCID{product_id}",
                    "proportion": "100%"
                }
            ],
            "cover_image": f"QmTestCoverCID{product_id}",
            "categories": ["mushroom", "test"],
            "forms": ["powder"],
            "species": "Amanita muscaria",
            "prices": [
                {
                    "weight": "100",
                    "weight_unit": "g",
                    "price": "50",
                    "currency": "EUR"
                }
            ]
        }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
    product_data = {"id": product_id, **base_data}
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    result = await mock_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
    assert result["status"] == "success", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id}: {result}"
    assert result["id"] == product_id, f"ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {result['id']} != {product_id}"
    
    return result

async def ensure_test_product_exists(mock_service, product_id: str, base_data: dict = None):
    """
    –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    
    Args:
        mock_service: Mock ProductRegistryService
        product_id: ID –ø—Ä–æ–¥—É–∫—Ç–∞
        base_data: –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
    existing_product = await mock_service.get_product(product_id)
    
    if existing_product is None:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print(f"üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return await create_test_product_for_update(mock_service, product_id, base_data)
    else:
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç {product_id}")
        return existing_product

class MockIPFSStorage:
    """–ú–æ–∫ –¥–ª—è IPFS storage"""
    def __init__(self, should_fail_upload=False):
        self.should_fail_upload = should_fail_upload
        self.uploaded_files = []
        self.uploaded_jsons = []
    async def download_json_async(self, cid: str):
        return {"mock": "data", "cid": cid}
    async def download_file(self, cid: str):
        return b"mock file content"
    def upload_file(self, file_path: str):
        if self.should_fail_upload:
            raise Exception("Mock IPFS upload failed")
        cid = f"QmMock{len(self.uploaded_files)}"
        self.uploaded_files.append((file_path, cid))
        return cid
    def upload_json(self, data: dict):
        if self.should_fail_upload:
            raise Exception("Mock IPFS upload failed")
        cid = f"QmMockJson{len(self.uploaded_jsons)}"
        self.uploaded_jsons.append((data, cid))
        return cid

@pytest.mark.asyncio
async def test_create_product_with_mock_ipfs_success(mock_product_registry_service):
    """
    –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º IPFS storage.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    test_data = {
        "id": "test_product_1",
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "test_component",
                "description_cid": "QmTestDescriptionCID",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmTestCoverCID",
        "categories": ["test"],
        "forms": ["test"],
        "species": "Test species",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "100", "currency": "EUR"}]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    result = await mock_product_registry_service.create_product(test_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert result["status"] == "success", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    assert result["id"] == test_data["id"], "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("test_create_product_with_mock_ipfs_success: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_preloaded_products_integration(preloaded_products_basic, preloaded_categories, preloaded_forms):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    assert len(preloaded_products_basic) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    first_product = preloaded_products_basic[0]
    assert first_product["status"] == "success", "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    assert "id" in first_product, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ID"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    assert len(preloaded_categories) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    assert "mushroom" in preloaded_categories, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 'mushroom' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    assert len(preloaded_forms) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    assert "powder" in preloaded_forms, "–§–æ—Ä–º–∞ 'powder' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
    product_categories = first_product.get("categories", [])
    for category in product_categories:
        assert category in preloaded_categories, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö"
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω")

@pytest.mark.asyncio
async def test_parametrized_fixtures_integration(product_type_parametrized, category_parametrized, form_parametrized):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    assert product_type_parametrized in ["basic", "extended", "validation"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product_type_parametrized}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    assert category_parametrized in ["mushroom", "flower", "herb"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_parametrized}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    assert form_parametrized in ["powder", "capsules", "tincture"], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞: {form_parametrized}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîß [Parametrized] –¢–µ—Å—Ç–∏—Ä—É–µ–º: —Ç–∏–ø={product_type_parametrized}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category_parametrized}, —Ñ–æ—Ä–º–∞={form_parametrized}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if product_type_parametrized == "basic":
        assert category_parametrized in ["mushroom", "flower"], "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö mushroom –∏–ª–∏ flower"
    elif product_type_parametrized == "extended":
        assert form_parametrized in ["powder", "capsules"], "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ö powder –∏–ª–∏ capsules"
    elif product_type_parametrized == "validation":
        assert category_parametrized == "mushroom", "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ mushroom"
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –ø—Ä–æ–π–¥–µ–Ω")

@pytest.mark.asyncio
async def test_complex_fixture_integration(preloaded_all_data):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ñ–∏–∫—Å—Ç—É—Ä—ã preloaded_all_data.
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    assert "products" in preloaded_all_data, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
    assert "reference" in preloaded_all_data, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    products = preloaded_all_data["products"]
    assert "basic" in products, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    assert "extended" in products, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    assert "validation" in products, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    reference = preloaded_all_data["reference"]
    assert "categories" in reference, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    assert "forms" in reference, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–æ—Ä–º—ã"
    assert "species" in reference, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥—ã"
    assert "biounits" in reference, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    total_products = len(products["basic"]) + len(products["extended"]) + len(products["validation"])
    assert total_products > 0, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    
    total_categories = len(reference["categories"])
    total_forms = len(reference["forms"])
    total_species = len(reference["species"])
    total_biounits = len(reference["biounits"])
    
    assert total_categories > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    assert total_forms > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–æ—Ä–º—ã"
    assert total_species > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥—ã"
    assert total_biounits > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã"
    
    print(f"üîß [Complex] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total_products} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, {total_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {total_forms} —Ñ–æ—Ä–º, {total_species} –≤–∏–¥–æ–≤, {total_biounits} –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü")
    print("‚úÖ –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ñ–∏–∫—Å—Ç—É—Ä—ã –ø—Ä–æ–π–¥–µ–Ω")

@pytest.mark.asyncio
async def test_create_product_with_mock_ipfs_failure():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ IPFS —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º storage.
    """
    mock_storage = MockIPFSStorage(should_fail_upload=True)
    storage_service = get_product_storage_service(storage_provider=mock_storage)
    test_data = {"title": "Test Product", "price": 100}
    cid = storage_service.upload_json(test_data)
    assert cid is None  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None –ø—Ä–∏ –æ—à–∏–±–∫–µ

@pytest.mark.asyncio
async def test_dependency_injection_with_fastapi():
    """
    –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ FastAPI —Å dependency_overrides.
    """
    from fastapi import FastAPI
    from bot.api.dependencies import get_product_storage_service
    app = FastAPI()
    mock_storage = MockIPFSStorage()
    app.dependency_overrides[get_product_storage_service] = lambda: get_product_storage_service(storage_provider=mock_storage)
    app.dependency_overrides.clear()

def test_backward_compatibility():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: ProductStorageService() –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    """
    storage_service = get_product_storage_service()
    assert storage_service is not None
    assert hasattr(storage_service, 'ipfs')
    assert storage_service.ipfs is not None

# === –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∏–∂–µ ===

@pytest.mark.asyncio
async def test_create_product_success(api_client, mock_blockchain_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–û–ô organic_components:
    –≤–∞–ª–∏–¥–∞—Ü–∏—è ‚Üí —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ –≤ IPFS ‚Üí –∑–∞–ø–∏—Å—å –≤ –±–ª–æ–∫—á–µ–π–Ω.
    –û–∂–∏–¥–∞–µ—Ç—Å—è status: success, –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
    """
    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (ProductUploadIn) - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
    product_data = {
        "id": "AMANITA1",
        "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "categories": [
            "mushroom",
            "mental health",
            "focus",
            "ADHD support",
            "mental force"
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    # 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å payload –¥–ª—è /products/upload (ProductUploadRequest)
    payload = {
        "products": [product_data]
    }
    # 3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HMAC-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    import json
    from bot.tests.api.test_utils import generate_hmac_headers
    import os
    AMANITA_API_KEY = os.getenv("AMANITA_API_KEY", "test-api-key-12345")
    AMANITA_API_SECRET = os.getenv("AMANITA_API_SECRET", "default-secret-key-change-in-production")
    method = "POST"
    path = "/products/upload"
    body = json.dumps(payload)
    headers = generate_hmac_headers(method, path, body, AMANITA_API_KEY, AMANITA_API_SECRET)
    # –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ async_generator
    api_client_instance = await api_client.__anext__()
    # 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /products/upload —Å –ø–æ–º–æ—â—å—é api_client
    response = await api_client_instance.post(
        "/products/upload",
        json=payload,
        headers=headers
    )
    # 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200 OK
    assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
    # 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ results[0].status == "success"
    data = response.json()
    assert "results" in data, f"–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∫–ª—é—á–∞ 'results': {data}"
    assert isinstance(data["results"], list) and len(data["results"]) > 0, f"'results' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º: {data}"
    assert data["results"][0]["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {data['results'][0]}"
    # 7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ results[0] –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç id, blockchain_id, tx_hash, metadata_cid
    for key in ("id", "blockchain_id", "tx_hash", "metadata_cid"):
        assert key in data["results"][0], f"–í results[0] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}': {data['results'][0]}"
    # 8. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª–µ error –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None
    assert ("error" not in data["results"][0]) or (data["results"][0]["error"] in (None, "")), f"–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ: {data['results'][0].get('error')}"
    # 9. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–æ–∫ blockchain-—Å–µ—Ä–≤–∏—Å–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # (–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –º–æ–∫–∞ —É–±—Ä–∞–Ω–∞, –≤–∞–∂–Ω–∞ —Ç–æ–ª—å–∫–æ API-–ª–æ–≥–∏–∫–∞)
    # 10. –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    print("test_create_product_success: —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")

@pytest.mark.asyncio
async def test_create_product_validation_error(mock_product_registry_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ —ç—Ç–∞–ø–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'title' - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
    product_data_missing_title = {
        "id": 3,
        # "title": "Amanita muscaria ‚Äî powder",  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    result = await mock_product_registry_service.validate_product(product_data_missing_title)
    assert result is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è title"
    
    print("test_create_product_validation_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_create_product_ipfs_error(mock_product_registry_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ IPFS - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    product_data = {
        "id": 2,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    result = await mock_product_registry_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success —Ç–∞–∫ –∫–∞–∫ Mock —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç IPFS
    assert result["status"] == "success", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –≤ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
    assert result["id"] == product_data["id"], "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("test_create_product_ipfs_error: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_create_product_blockchain_error(mock_product_registry_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    product_data = {
        "id": 7,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    result = await mock_product_registry_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success —Ç–∞–∫ –∫–∞–∫ Mock —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫—á–µ–π–Ω
    assert result["status"] == "success", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –≤ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
    assert result["id"] == product_data["id"], "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("test_create_product_blockchain_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_create_product_blockchain_id_error(mock_product_registry_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ blockchain_id –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    product_data = {
        "id": 8,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    result = await mock_product_registry_service.create_product(product_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success —Ç–∞–∫ –∫–∞–∫ Mock —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫—á–µ–π–Ω
    assert result["status"] == "success", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –≤ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
    assert result["id"] == product_data["id"], "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("test_create_product_blockchain_id_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_create_product_idempotency(mock_product_registry_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    product_data = {
        "id": 9,
        "title": "Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "100",
                "weight_unit": "g",
                "price": "80",
                "currency": "EUR"
            }
        ]
    }
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
    result1 = await mock_product_registry_service.create_product(product_data)
    assert result1["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {result1}"
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
    result2 = await mock_product_registry_service.create_product(product_data)
    assert result2["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {result2}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    assert result1["id"] == result2["id"], f"ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏: {result1['id']} vs {result2['id']}"
    
    print("test_create_product_idempotency: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
def test_create_product_logging(api_client, mock_blockchain_service):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —ç—Ç–∞–ø—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è, IPFS, –±–ª–æ–∫—á–µ–π–Ω, –æ—à–∏–±–∫–∏) –ª–æ–≥–∏—Ä—É—é—Ç—Å—è."""
    assert True 

# === –¢–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (PUT) ===

@pytest.mark.asyncio
async def test_update_product_success(mock_product_registry_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service –≤–º–µ—Å—Ç–æ API –∫–ª–∏–µ–Ω—Ç–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    product_id = "update_success_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        "id": product_id,
        "title": "Updated Amanita muscaria ‚Äî powder",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmUpdatedDescriptionCID",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmUpdatedCoverCID",
        "categories": ["mushroom", "updated"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "weight": "200",
                "weight_unit": "g",
                "price": "150",
                "currency": "EUR"
            }
        ]
    }
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success
    assert result["status"] == "success", f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 'success', –ø–æ–ª—É—á–µ–Ω–æ: {result}"
    assert result["id"] == product_id, f"–û–∂–∏–¥–∞–ª—Å—è ID '{product_id}', –ø–æ–ª—É—á–µ–Ω–æ: {result['id']}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
    for key in ("metadata_cid", "blockchain_id", "tx_hash"):
        assert key in result, f"–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}': {result}"
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ error –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None
    assert ("error" not in result) or (result["error"] in (None, "")), f"–û–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ: {result.get('error')}"
    
    print("test_update_product_success: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_validation_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    product_id = "update_validation_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_data = {
        "id": product_id,
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title - –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    is_valid = await mock_product_registry_service.validate_product(invalid_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ title"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_validation_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_not_found(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "999"  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    update_data = {
        "id": 999,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "test_component",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    product = await mock_product_registry_service.get_product(product_id)
    assert product is None, f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å error
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å error"
    assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result["error"], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
    
    print("test_update_product_not_found: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_access_denied(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "update_access_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    update_data = {
        "id": product_id,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å success —Ç–∞–∫ –∫–∞–∫ Mock —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    assert result["status"] == "success", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –≤ Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"
    assert result["id"] == product_id, "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("test_update_product_access_denied: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!") 

# === –¢–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (POST) ===

@pytest.mark.asyncio
async def test_update_product_status_success(mock_product_registry_service):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service –≤–º–µ—Å—Ç–æ API –∫–ª–∏–µ–Ω—Ç–∞.
    –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: 1 = active, 0 = inactive.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    product_id = "update_status_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    # –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: 1 = active, 0 = inactive
    status_data = {
        "status": 1  # 1 = active (–≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ "active")
    }
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å True (—É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    assert result is True, f"–û–∂–∏–¥–∞–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç True, –ø–æ–ª—É—á–µ–Ω–æ: {result}"
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
    
    print("test_update_product_status_success: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º!")

@pytest.mark.asyncio
async def test_update_product_status_validation_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    product_id = "update_status_validation_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_status_data = {
        "status": 999  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ 1)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Mock —Å–µ—Ä–≤–∏—Å
    # –≠—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ, —á–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product_status(product_id, invalid_status_data["status"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - Mock —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
    assert result is True, "Mock —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    
    print("test_update_product_status_validation_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_not_found(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "999"  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    status_data = {
        "status": 1  # 1 = active (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    product = await mock_product_registry_service.get_product(product_id)
    assert product is None, f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    assert result is False, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å False"
    
    print("test_update_product_status_not_found: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_idempotency(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Å—Ç–∞—Ç—É—Å
    product_id = "update_status_idempotency_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    status_data = {
        "status": 1  # 1 = active (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    result1 = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    assert result1 is True, "–ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    
    # –í—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
    result2 = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    assert result2 is True, "–í—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    assert result1 == result2, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏"
    
    print("test_update_product_status_idempotency: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_inactive(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ inactive
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    product_id = "update_status_inactive_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    status_data = {
        "status": 0  # 0 = inactive (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—Ö
    assert result is True, "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    updated_product = await mock_product_registry_service.get_product(product_id)
    assert updated_product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    
    print("test_update_product_status_inactive: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!") 

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===

@pytest.mark.asyncio
async def test_update_product_missing_required_fields(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    product_id = "update_missing_fields_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    incomplete_data = {
        "id": product_id,
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: title, organic_components, cover_image, forms, species, prices
        "categories": ["mushroom"]
        # –£–±—Ä–∞–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è: description, description_cid, attributes
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(incomplete_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_missing_required_fields: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_invalid_cid_format(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ CID
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º CID
    product_id = "update_invalid_cid_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CID
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_cid_data = {
        "id": product_id,
        "title": "Test Product",
        "cover_image": "also-invalid-cid",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–≤–µ—Ä–Ω—ã–º CID
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(invalid_cid_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ CID"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CID
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_invalid_cid_format: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_invalid_price_format(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω
    product_id = "update_invalid_price_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_price_data = {
        "id": product_id,
        "title": "Test Product",
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "prices": [
            {
                "price": "invalid_price",  # –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
                "currency": "INVALID",  # –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞
                "weight": -5,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å
                "weight_unit": "invalid_unit"  # –ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(invalid_price_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_invalid_price_format: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_invalid_format(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
    product_id = "update_status_invalid_format_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    invalid_status_formats = [
        {"status": 123},  # –ß–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        {"status": True},  # Boolean –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        {"status": ["active"]},  # –ú–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        {"status": ""},  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        {"status": "   "},  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        {"status": 999},  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å
        {"status": -1},  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    for status_data in invalid_status_formats:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º API —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        # –í Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
        
        # –î–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω
        if isinstance(status_data["status"], int):
            result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
            # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å, –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º API —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
        # –í Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
    
    print("test_update_product_status_invalid_format: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_empty_categories(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    product_id = "update_empty_categories_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    empty_categories_data = {
        "id": product_id,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": [],  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –ø—É—Å—Ç—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    is_valid = await mock_product_registry_service.validate_product(empty_categories_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
    assert is_valid is False, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    print("test_update_product_empty_categories: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!") 

# === –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö HTTP –æ—à–∏–±–æ–∫ ===

@pytest.mark.asyncio
async def test_update_product_404_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–∫–∏ - –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "999999"  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    update_data = {
        "id": 999999,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    product = await mock_product_registry_service.get_product(product_id)
    assert product is None, f"–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å error –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å error"
    assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result["error"], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
    
    print("test_update_product_404_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_403_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 403 –æ—à–∏–±–∫–∏ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "update_403_error_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 403 –æ—à–∏–±–∫–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    update_data = {
        "id": product_id,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –ø—Ä–∞–≤
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    result = await mock_product_registry_service.update_product(product_id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å error –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–∞–≤
    assert result["status"] == "error", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∞–≤ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å error"
    assert "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in result["error"], "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∞–≤"
    
    print("test_update_product_403_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_400_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 400 –æ—à–∏–±–∫–∏ - –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (–ø—É—Å—Ç–æ–π ID –ø—Ä–æ–¥—É–∫—Ç–∞)
    product_id = "update_400_error_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 400 –æ—à–∏–±–∫–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    update_data = {
        "id": product_id,
        "title": "Test Product",
        "cover_image": "QmYrs5eZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Å—Ç–æ–π ID –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è
    if product_id:  # –ï—Å–ª–∏ ID –Ω–µ –ø—É—Å—Ç–æ–π
        product = await mock_product_registry_service.get_product(product_id)
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å None –¥–ª—è –ø—É—Å—Ç–æ–≥–æ ID
        assert product is None, f"–ü—É—Å—Ç–æ–π ID {product_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID
    # –í Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
    # –ü—É—Å—Ç–æ–π ID –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    print("test_update_product_400_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_500_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 500 –æ—à–∏–±–∫–∏ - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "update_500_error_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 500 –æ—à–∏–±–∫–∏
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    update_data = {
        "id": product_id,
        "title": "Test Product",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom"],
        "forms": ["powder"],
        "species": "Amanita muscaria",
        "prices": [
            {
                "price": 25.99,
                "currency": "EUR",
                "weight": 10,
                "weight_unit": "g"
            }
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    # –í Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    
    try:
        result = await mock_product_registry_service.update_product(product_id, update_data)
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result["status"] in ["success", "error"], "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å success –∏–ª–∏ error"
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" in str(e) or "error" in str(e).lower(), \
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    
    print("test_update_product_500_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")

@pytest.mark.asyncio
async def test_update_product_status_500_error(mock_product_registry_service):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 500 –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É ProductRegistryService
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ–∏–∫—Å—Ç—É—Ä—É mock_product_registry_service
    # –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    product_id = "update_status_500_error_001"
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 500 –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    await ensure_test_product_exists(mock_product_registry_service, product_id)
    
    status_data = {
        "status": 1  # 1 = active (—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    # Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    # –í Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    
    try:
        result = await mock_product_registry_service.update_product_status(product_id, status_data["status"])
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is True, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" in str(e) or "error" in str(e).lower(), \
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    
    print("test_update_product_status_500_error: —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!") 