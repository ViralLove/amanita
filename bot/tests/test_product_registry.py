import pytest
import logging
import sys
import os
import json
from pathlib import Path
from dotenv import load_dotenv
import pytest_asyncio
from unittest.mock import patch, MagicMock
from eth_account import Account
from bot.services.core.blockchain import BlockchainService
from bot.services.product.registry import ProductRegistryService
from bot.services.product.validation import ProductValidationService
from bot.services.core.account import AccountService
from bot.services.core.ipfs_factory import IPFSFactory
from bot.model.product import PriceInfo, Description

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

# Assert –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
NODE_ADMIN_PRIVATE_KEY = os.getenv("NODE_ADMIN_PRIVATE_KEY")
AMANITA_REGISTRY_CONTRACT_ADDRESS = os.getenv("AMANITA_REGISTRY_CONTRACT_ADDRESS")

assert SELLER_PRIVATE_KEY, "SELLER_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"
assert NODE_ADMIN_PRIVATE_KEY, "NODE_ADMIN_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"
assert AMANITA_REGISTRY_CONTRACT_ADDRESS, "AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_PRODUCT_DATA = {
    "id": "test_product_1",
    "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
    "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
    "categories": [
        "mushroom",
        "mental health",
        "focus",
        "ADHD support",
        "mental force"
    ],
    "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
    "form": "mixed slices",
    "species": "Amanita muscaria",
    "prices": [
        {
            "weight": "100",
            "weight_unit": "g",
            "price": "80",
            "currency": "EUR"
    }
    ]
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_DATA_PATH = os.path.join(os.path.dirname(__file__), "fixtures", "products.json")
with open(TEST_DATA_PATH) as f:
    TEST_PRODUCTS = json.load(f)

# ================== –§–ò–ö–°–¢–£–†–´ =====================

@pytest_asyncio.fixture
async def event_loop():
    import asyncio
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest_asyncio.fixture
async def test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä"""
    logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä")
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    with open(fixtures_path) as f:
        data = json.load(f)
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('valid_products', []))} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    return data

@pytest_asyncio.fixture
async def storage_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º storage —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º storage —á–µ—Ä–µ–∑ IPFSFactory")
    factory = IPFSFactory()
    storage = factory.get_storage()
    logger.info("‚úÖ Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return storage

@pytest_asyncio.fixture
async def validation_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    service = ProductValidationService()
    logger.info("‚úÖ ProductValidationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest_asyncio.fixture
async def account_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AccountService"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AccountService")
    BlockchainService.reset()
    service = AccountService(BlockchainService())
    logger.info("‚úÖ AccountService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest_asyncio.fixture
async def seller_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞")
    account = Account.from_key(SELLER_PRIVATE_KEY)
    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {account.address}")
    return account

@pytest_asyncio.fixture
async def user_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    account = Account.create()
    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {account.address}")
    return account

@pytest_asyncio.fixture
async def blockchain_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BlockchainService"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BlockchainService")
    BlockchainService.reset()
    service = BlockchainService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å SELLER_ROLE
    seller_account = Account.from_key(SELLER_PRIVATE_KEY)
    assert seller_account.address == service.seller_account.address, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    try:
        is_seller = service.call_contract_function("InviteNFT", "isSeller", seller_account.address)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ SELLER_ROLE: {seller_account.address} -> {is_seller}")
        if not is_seller:
            logger.warning(f"‚ö†Ô∏è –°–µ–ª–ª–µ—Ä {seller_account.address} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å SELLER_ROLE. –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å SELLER_ROLE: {e}")
    
    logger.info("‚úÖ BlockchainService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest_asyncio.fixture
async def product_registry(blockchain_service, storage_service, validation_service, account_service):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService")
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service,
        account_service=account_service
    )
    
    assert service.blockchain.seller_account.address == Account.from_key(SELLER_PRIVATE_KEY).address, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest.fixture(autouse=True)
def cleanup_after_test(product_registry):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    product_registry.clear_cache()

print("\n=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")

# –ß–ï–ö-–õ–ò–°–¢ –ü–û–ö–†–´–¢–ò–Ø –ú–ï–¢–û–î–û–í ProductRegistryService
# - [x] __init__ (—á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—É)
# - [x] clear_cache (—á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—É)
# - [x] get_catalog_version
# - [x] create_product_metadata (—é–Ω–∏—Ç)
# - [ ] upload_product_metadata (TODO)
# - [ ] upload_media_file (TODO)
# - [x] create_product_on_chain
# - [x] get_all_products
# - [x] get_product
# - [x] get_product_by_id
# - [x] validate_product (—é–Ω–∏—Ç)
# - [x] create_product
# - [x] update_product_status
# - [x] set_product_active

@pytest.mark.asyncio
async def test_get_full_catalog(product_registry):
    """
    Arrange: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å product_registry
    Act: –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IPFS
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")

    logger.info("üìä –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞")
    version = product_registry.get_catalog_version()
    assert isinstance(version, int)
    assert version > 0
    logger.info(f"‚úÖ –í–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {version}")
        
    logger.info("üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    products = product_registry.get_all_products()
    assert isinstance(products, list)
    catalogLength = len(products)
    assert catalogLength > 0
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {catalogLength}")
    
    if products:
        product = products[0]
        
        # üîç –ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–î–£–ö–¢–ê
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞")
        assert hasattr(product, 'id')
        assert hasattr(product, 'title')
        assert hasattr(product, 'status')
        assert hasattr(product, 'cid')
        assert hasattr(product, 'description')
        assert hasattr(product, 'categories')
        assert hasattr(product, 'forms')
        assert hasattr(product, 'species')
        assert hasattr(product, 'prices')
        assert hasattr(product, 'description_cid')
        assert hasattr(product, 'cover_image_url')
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {product.id}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –ü–†–û–î–£–ö–¢–ê
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
        assert product.id is not None and str(product.id).strip() != ""
        assert product.title is not None and product.title.strip() != ""
        assert product.status in [0, 1]
        assert product.cid is not None and product.cid.strip() != ""
        assert product.description_cid is not None and product.description_cid.strip() != ""
        logger.info(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: ID={product.id}, Title='{product.title}', Status={product.status}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –û–ü–ò–°–ê–ù–ò–Ø (Description)
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏—è")
        assert isinstance(product.description, Description)
        description = product.description
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è Description
        assert hasattr(description, 'id')
        assert hasattr(description, 'title')
        assert hasattr(description, 'scientific_name')
        assert hasattr(description, 'generic_description')
        assert hasattr(description, 'effects')
        assert hasattr(description, 'shamanic')
        assert hasattr(description, 'warnings')
        assert hasattr(description, 'dosage_instructions')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö Description
        assert description.id is not None and description.id.strip() != ""
        assert description.title is not None and description.title.strip() != ""
        assert description.scientific_name is not None and description.scientific_name.strip() != ""
        assert description.generic_description is not None and description.generic_description.strip() != ""
        assert isinstance(description.dosage_instructions, list)
        
        logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ID={description.id}, Title='{description.title}', Scientific='{description.scientific_name}'")
        logger.info(f"   Generic description: {description.generic_description[:100]}...")
        logger.info(f"   Dosage instructions: {len(description.dosage_instructions)} —à—Ç.")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–°–¢–†–£–ö–¶–ò–ô –ü–û –î–û–ó–ò–†–û–í–ö–ï
        if description.dosage_instructions:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ")
            dosage = description.dosage_instructions[0]
            assert hasattr(dosage, 'type')
            assert hasattr(dosage, 'title')
            assert hasattr(dosage, 'description')
            assert dosage.type is not None and dosage.type.strip() != ""
            assert dosage.title is not None and dosage.title.strip() != ""
            assert dosage.description is not None and dosage.description.strip() != ""
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ: Type='{dosage.type}', Title='{dosage.title}'")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        assert isinstance(product.categories, list)
        if product.categories:
            for category in product.categories:
                assert isinstance(category, str)
                assert category.strip() != ""
            logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {product.categories}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –§–û–†–ú
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—ã")
        assert isinstance(product.forms, list)
        if product.forms:
            for form in product.forms:
                assert isinstance(form, str)
                assert form.strip() != ""
            logger.info(f"‚úÖ –§–æ—Ä–º—ã: {product.forms}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –í–ò–î–ê
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥")
        assert product.species is not None and product.species.strip() != ""
        logger.info(f"‚úÖ –í–∏–¥: {product.species}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–ù
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã")
        assert isinstance(product.prices, list)
        assert len(product.prices) > 0
        for price in product.prices:
            assert isinstance(price, PriceInfo)
            assert hasattr(price, 'price')
            assert hasattr(price, 'currency')
            assert price.price > 0
            assert price.currency in PriceInfo.SUPPORTED_CURRENCIES
            logger.info(f"   –¶–µ–Ω–∞: {price.format_full()}")
        logger.info(f"‚úÖ –¶–µ–Ω—ã: {len(product.prices)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        assert product.cover_image_url is not None and product.cover_image_url.strip() != ""
        assert product.cover_image_url.startswith('http')
        logger.info(f"‚úÖ Cover image URL: {product.cover_image_url}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê IPFS –ó–ê–ì–†–£–ó–ö–ò
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ IPFS")
        assert product.description_cid != ""
        assert product.cid != ""
        logger.info(f"‚úÖ IPFS CID: Description={product.description_cid}, Cover={product.cid}")
        
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    cached_products = product_registry.get_all_products()
    assert len(cached_products) == len(products)
    logger.info("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
    for i, product in enumerate(products):
        assert product.id is not None
        assert product.title is not None and product.title.strip() != ""
        assert isinstance(product.description, Description)
        assert len(product.prices) > 0
        if i < 3:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞
            logger.info(f"   –ü—Ä–æ–¥—É–∫—Ç {i+1}: ID={product.id}, Title='{product.title}', –¶–µ–Ω={len(product.prices)}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_create_product_success(product_registry, test_data):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ create_product
    Arrange: –ë–µ—Ä–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    Act: –í—ã–∑—ã–≤–∞–µ–º create_product
    Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω, –µ—Å—Ç—å ID, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    valid_product = test_data["valid_products"][0]
    logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç: {valid_product['title']}")
    
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product")
    product_id = await product_registry.create_product(valid_product)
    assert product_id is not None
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {product_id}")
    
    logger.info("üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID")
    product = product_registry.get_product(product_id)
    assert product is not None
    assert product.title == valid_product["title"]
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product.title}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_create_and_validate_product(product_registry):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º")
    validation_result = await product_registry.validation_service.validate_product_data(TEST_PRODUCT_DATA)
    assert validation_result["is_valid"] is True, f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º–∏: {validation_result.get('errors', [])}"
    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç")
    product_id = await product_registry.create_product(TEST_PRODUCT_DATA)
    assert product_id is not None, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω"
    logger.info(f"üì¶ ID –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
    
    logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞")
    product = await product_registry.get_product(product_id)
    assert product is not None, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"
    logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ")
    
    logger.info("üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    metadataDownloaded = await storage_service.download_json(product.cid)
    assert metadataDownloaded is not None, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ IPFS"
    logger.info("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ IPFS")
    
    logger.info("üîç –°–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ Product –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ ID –∏–∑ —Å–º–∞—Ä—Ç–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Storage —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é")
    assert product.id == metadataDownloaded["id"], "ID –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    assert product.title == metadataDownloaded["title"], "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    assert product.description_cid is not None, "CID –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None"

    descriptionMetadataDownloaded = await storage_service.download_json(product.description_cid)
    assert descriptionMetadataDownloaded is not None, "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ IPFS"

    assert product.description.generic_description == descriptionMetadataDownloaded["generic_description"], "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    assert product.description.scientific_name == descriptionMetadataDownloaded["scientific_name"], "–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    assert product.description.effects == descriptionMetadataDownloaded["effects"], "–≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    assert product.description.shamanic == descriptionMetadataDownloaded["shamanic"], "–®–∞–º–∞–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    assert product.description.warnings == descriptionMetadataDownloaded["warnings"], "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    assert product.description.dosage_instructions == descriptionMetadataDownloaded["dosage_instructions"], "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    
    coverImageCid = metadataDownloaded["cover_image"]
    coverImageUrl = storage_service.get_gateway_url(coverImageCid)
    assert coverImageUrl is not None, "–û–±–ª–æ–∂–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ IPFS"
    assert product.cover_image_url == coverImageUrl, "–û–±–ª–æ–∂–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

    assert product.categories == descriptionMetadataDownloaded["categories"], "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    assert product.forms == descriptionMetadataDownloaded["form"], "–§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
    assert product.species == descriptionMetadataDownloaded["species"], "–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ñ–æ—Ä–º
    assert len(product.categories) == len(descriptionMetadataDownloaded["categories"]), f"–î–ª–∏–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {len(product.categories)} != {len(descriptionMetadataDownloaded['categories'])}"
    assert len(product.forms) == (len(descriptionMetadataDownloaded["form"]) if isinstance(descriptionMetadataDownloaded["form"], list) else 1), f"–î–ª–∏–Ω–∞ —Ñ–æ—Ä–º –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {len(product.forms)} != {len(descriptionMetadataDownloaded['form'])}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ gallery
    if "gallery" in metadataDownloaded:
        assert hasattr(product, "gallery"), "–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ gallery"
        assert len(product.gallery) == len(metadataDownloaded["gallery"]), f"–î–ª–∏–Ω–∞ gallery –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {len(product.gallery)} != {len(metadataDownloaded['gallery'])}"
        for idx, cid in enumerate(metadataDownloaded["gallery"]):
            assert product.gallery[idx] == storage_service.get_gateway_url(cid), f"–≠–ª–µ–º–µ–Ω—Ç gallery[{idx}] –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {product.gallery[idx]} != {storage_service.get_gateway_url(cid)}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ video
    if "video" in metadataDownloaded:
        assert hasattr(product, "video"), "–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ video"
        assert product.video == storage_service.get_gateway_url(metadataDownloaded["video"]), f"–ü–æ–ª–µ video –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {product.video} != {storage_service.get_gateway_url(metadataDownloaded['video'])}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ü–µ–Ω
    assert len(product.prices) == len(metadataDownloaded["prices"]), f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {len(product.prices)} != {len(metadataDownloaded['prices'])}"
    for idx, price in enumerate(product.prices):
        meta_price = metadataDownloaded["prices"][idx]
        if hasattr(price, "to_dict"):
            price_dict = price.to_dict()
        elif isinstance(price, dict):
            price_dict = price
        else:
            raise AssertionError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø price")
        for key in meta_price:
            assert str(price_dict.get(key)) == str(meta_price.get(key)), f"–ü–æ–ª–µ {key} –≤ —Ü–µ–Ω–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {price_dict.get(key)} != {meta_price.get(key)}"
        assert set(price_dict.keys()) == set(meta_price.keys()), f"–ù–∞–±–æ—Ä –∫–ª—é—á–µ–π —Ü–µ–Ω—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {set(price_dict.keys())} != {set(meta_price.keys())}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–∞–∂–µ–Ω—ã –≤ –æ–±—ä–µ–∫—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    for key in metadataDownloaded:
        if hasattr(product, key):
            product_value = getattr(product, key)
            meta_value = metadataDownloaded[key]
            if isinstance(product_value, list) and isinstance(meta_value, list):
                assert len(product_value) == len(meta_value), f"–ü–æ–ª–µ {key}: –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {len(product_value)} != {len(meta_value)}"
            else:
                assert product_value == meta_value or str(product_value) == str(meta_value), f"–ü–æ–ª–µ {key} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {product_value} != {meta_value}"

    logger.info("‚úÖ –í—Å–µ –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–≤–µ—Ä–µ–Ω—ã")
    
    logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_product_validation():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üîß –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã")
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    
    logger.info("üîß –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å")
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    # ==================== –¢–ï–°–¢ 1: –í–ê–õ–ò–î–ù–´–ï –î–ê–ù–ù–´–ï ====================
    logger.info("üìù –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    valid_product = TEST_PRODUCTS["valid_products"][0]
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {valid_product['title']}")
    
    validation_result = await service.validation_service.validate_product_data(valid_product)
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {json.dumps(validation_result, indent=2)}")
    
    assert validation_result["is_valid"], f"–í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é. –û—à–∏–±–∫–∏: {validation_result.get('errors')}"
    assert len(validation_result["errors"]) == 0, f"–í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ—à–∏–±–æ–∫: {validation_result['errors']}"
    logger.info("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    # ==================== –¢–ï–°–¢ 2: –ü–£–°–¢–´–ï –ü–û–õ–Ø ====================
    logger.info("üìù –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è")
    invalid_product = TEST_PRODUCTS["invalid_products"][0]
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏: {invalid_product['id']}")
    
    validation_result = await service.validation_service.validate_product_data(invalid_product)
    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {json.dumps(validation_result, indent=2)}")
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert len(validation_result["errors"]) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    errors = validation_result["errors"]
    expected_empty_field_errors = [
        "title: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "description_cid: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "cover_image: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "form: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "species: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    ]
    
    for expected_error in expected_empty_field_errors:
        assert any(expected_error in error for error in errors), f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞: {expected_error}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ CID
    assert any("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID" in error for error in errors), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ CID"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ü–µ–Ω
    assert any("–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in error.lower() for error in errors), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
    assert any("—Ü–µ–Ω–∞" in error.lower() for error in errors), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ —Ü–µ–Ω–∞—Ö"
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π")
    
    # ==================== –¢–ï–°–¢ 3: –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï –§–û–†–ú–ê–¢–´ ====================
    logger.info("üìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")
    invalid_format_product = TEST_PRODUCTS["invalid_products"][2]  # invalid_cid_format
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ CID: {invalid_format_product['id']}")
    
    validation_result = await service.validation_service.validate_product_data(invalid_format_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ CID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID" in error for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ CID"
    logger.info("‚úÖ –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ CID –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # ==================== –¢–ï–°–¢ 4: –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ï –¶–ï–ù–´ ====================
    logger.info("üìù –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã")
    invalid_price_product = TEST_PRODUCTS["invalid_products"][1]  # invalid_price_format
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏: {invalid_price_product['id']}")
    
    validation_result = await service.validation_service.validate_product_data(invalid_price_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any(error.startswith("prices[0].price:") for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –ø–æ —Ü–µ–Ω–µ"
    assert any(error.startswith("prices[0].currency:") for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –ø–æ –≤–∞–ª—é—Ç–µ"
    logger.info("‚úÖ –û—à–∏–±–∫–∏ —Ü–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # ==================== –¢–ï–°–¢ 5: –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê–Ø –í–ê–õ–Æ–¢–ê ====================
    logger.info("üìù –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–∞–ª—é—Ç—É")
    invalid_currency_product = TEST_PRODUCTS["invalid_products"][3]  # invalid_currency
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª—é—Ç–æ–π: {invalid_currency_product['id']}")
    
    validation_result = await service.validation_service.validate_product_data(invalid_currency_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any(error.startswith("prices[0].currency:") for error in validation_result["errors"]), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª—é—Ç—ã"
    logger.info("‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª—é—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    # ==================== –¢–ï–°–¢ 6: –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò ====================
    logger.info("üìù –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏")
    
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    boundary_product = valid_product.copy()
    boundary_product["title"] = "A" * 300  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 255 —Å–∏–º–≤–æ–ª–æ–≤
    
    validation_result = await service.validation_service.validate_product_data(boundary_product)
    assert not validation_result["is_valid"], "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any("–¥–ª–∏–Ω–∞" in error.lower() for error in validation_result["errors"]), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª–∏–Ω—ã"
    logger.info("‚úÖ –û—à–∏–±–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    boundary_product = valid_product.copy()
    boundary_product["categories"] = [f"category_{i}" for i in range(15)]  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 10
    
    validation_result = await service.validation_service.validate_product_data(boundary_product)
    assert not validation_result["is_valid"], "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any("–∫–∞—Ç–µ–≥–æ—Ä–∏" in error.lower() for error in validation_result["errors"]), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    logger.info("‚úÖ –û—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    # ==================== –¢–ï–°–¢ 7: –°–ê–ù–ò–¢–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ====================
    logger.info("üìù –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–¥—É–∫—Ç —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    dirty_product = valid_product.copy()
    dirty_product["title"] = "  Amanita muscaria ‚Äî sliced caps and gills (1st grade)  "
    dirty_product["categories"] = ["  mushroom  ", "  mental health  "]
    
    validation_result = await service.validation_service.validate_product_data(dirty_product)
    assert validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏"
    assert "sanitized_data" in validation_result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    
    sanitized = validation_result["sanitized_data"]
    assert sanitized["title"] == "Amanita muscaria ‚Äî sliced caps and gills (1st grade)", "–ü—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã"
    assert sanitized["categories"] == ["mushroom", "mental health"], "–ü—Ä–æ–±–µ–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã"
    logger.info("‚úÖ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_product_creation_flow(product_registry):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üìù –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    valid_product = TEST_PRODUCTS["valid_products"][0]
    
    logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç")
    product_id = await product_registry.create_product(valid_product)
    assert product_id is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {product_id}")
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω")
    product = await product_registry.get_product(product_id)
    assert product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
    assert product["title"] == valid_product["title"]
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product['title']}")
    
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é")
    await product_registry.set_product_active(product_id, True)
    product = await product_registry.get_product(product_id)
    assert product["is_active"] is True
    logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    await product_registry.set_product_active(product_id, False)
    product = await product_registry.get_product(product_id)
    assert product["is_active"] is False
    logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_get_all_products(product_registry):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    for valid_product in TEST_PRODUCTS["valid_products"]:
        await product_registry.create_product(valid_product)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {valid_product['title']}")
    
    logger.info("üì¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã")
    products = await product_registry.get_all_products()
    assert len(products) >= len(TEST_PRODUCTS["valid_products"])
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    product_ids = [p["id"] for p in products]
    for valid_product in TEST_PRODUCTS["valid_products"]:
        assert valid_product["id"] in product_ids
        logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ: {valid_product['id']}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_product_status_updates(product_registry):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç")
    valid_product = TEST_PRODUCTS["valid_products"][0]
    product_id = await product_registry.create_product(valid_product)
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {product_id}")
    
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã")
    statuses = [1, 2, 3]  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    for status in statuses:
        await product_registry.update_product_status(product_id, status)
        product = await product_registry.get_product(product_id)
        assert product["status"] == status
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω") 