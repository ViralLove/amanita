import pytest
import logging
import sys
import os
import json
from pathlib import Path
from dotenv import load_dotenv
import pytest_asyncio
from unittest.mock import patch, MagicMock
from eth_account import Account
from bot.services.core.blockchain import BlockchainService
from bot.services.product.registry import ProductRegistryService
from bot.services.product.validation import ProductValidationService
from bot.services.core.account import AccountService
from bot.services.core.ipfs_factory import IPFSFactory
from bot.model.product import PriceInfo, Description
from decimal import Decimal

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

# Assert –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
NODE_ADMIN_PRIVATE_KEY = os.getenv("NODE_ADMIN_PRIVATE_KEY")
AMANITA_REGISTRY_CONTRACT_ADDRESS = os.getenv("AMANITA_REGISTRY_CONTRACT_ADDRESS")

assert SELLER_PRIVATE_KEY, "SELLER_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"
assert NODE_ADMIN_PRIVATE_KEY, "NODE_ADMIN_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"
assert AMANITA_REGISTRY_CONTRACT_ADDRESS, "AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_PRODUCT_DATA = {
    "id": "test_product_1",
    "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
    "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
    "categories": [
        "mushroom",
        "mental health",
        "focus",
        "ADHD support",
        "mental force"
    ],
    "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
    "form": "mixed slices",
    "species": "Amanita muscaria",
    "prices": [
        {
            "weight": "100",
            "weight_unit": "g",
            "price": "80",
            "currency": "EUR"
    }
    ]
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_DATA_PATH = os.path.join(os.path.dirname(__file__), "fixtures", "products.json")
with open(TEST_DATA_PATH) as f:
    TEST_PRODUCTS = json.load(f)

# ================== –§–ò–ö–°–¢–£–†–´ =====================

@pytest_asyncio.fixture
async def event_loop():
    import asyncio
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest_asyncio.fixture
async def test_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä"""
    logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä")
    fixtures_path = Path(__file__).parent / "fixtures" / "products.json"
    with open(fixtures_path) as f:
        data = json.load(f)
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('valid_products', []))} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    return data

@pytest_asyncio.fixture
async def storage_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º storage —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º storage —á–µ—Ä–µ–∑ IPFSFactory")
    factory = IPFSFactory()
    storage = factory.get_storage()
    logger.info("‚úÖ Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return storage

@pytest_asyncio.fixture
async def validation_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductValidationService")
    service = ProductValidationService()
    logger.info("‚úÖ ProductValidationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest_asyncio.fixture
async def account_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AccountService"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AccountService")
    BlockchainService.reset()
    service = AccountService(BlockchainService())
    logger.info("‚úÖ AccountService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest_asyncio.fixture
async def seller_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞")
    account = Account.from_key(SELLER_PRIVATE_KEY)
    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {account.address}")
    return account

@pytest_asyncio.fixture
async def user_account():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    account = Account.create()
    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: {account.address}")
    return account

@pytest_asyncio.fixture
async def blockchain_service():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BlockchainService"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BlockchainService")
    BlockchainService.reset()
    service = BlockchainService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å SELLER_ROLE
    seller_account = Account.from_key(SELLER_PRIVATE_KEY)
    assert seller_account.address == service.seller_account.address, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    try:
        is_seller = service.call_contract_function("InviteNFT", "isSeller", seller_account.address)
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ SELLER_ROLE: {seller_account.address} -> {is_seller}")
        if not is_seller:
            logger.warning(f"‚ö†Ô∏è –°–µ–ª–ª–µ—Ä {seller_account.address} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å SELLER_ROLE. –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å SELLER_ROLE: {e}")
    
    logger.info("‚úÖ BlockchainService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest_asyncio.fixture
async def product_registry(blockchain_service, storage_service, validation_service, account_service):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService"""
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProductRegistryService")
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service,
        account_service=account_service
    )
    
    assert service.blockchain.seller_account.address == Account.from_key(SELLER_PRIVATE_KEY).address, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    logger.info("‚úÖ ProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return service

@pytest.fixture(autouse=True)
def cleanup_after_test(product_registry):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    product_registry.clear_cache()

print("\n=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PRODUCT REGISTRY ===")

# –ß–ï–ö-–õ–ò–°–¢ –ü–û–ö–†–´–¢–ò–Ø –ú–ï–¢–û–î–û–í ProductRegistryService
# - [x] __init__ (—á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—É)
# - [x] clear_cache (—á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—É)
# - [x] get_catalog_version
# - [x] create_product_metadata (—é–Ω–∏—Ç)
# - [ ] upload_product_metadata (TODO)
# - [ ] upload_media_file (TODO)
# - [x] create_product_on_chain
# - [x] get_all_products
# - [x] get_product
# - [x] get_product_by_id
# - [x] validate_product (—é–Ω–∏—Ç)
# - [x] create_product
# - [x] update_product_status
# - [x] set_product_active

@pytest.mark.asyncio
async def test_get_full_catalog(product_registry):
    """
    Arrange: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å product_registry
    Act: –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IPFS
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")

    logger.info("üìä –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞")
    version = product_registry.get_catalog_version()
    assert isinstance(version, int)
    assert version > 0
    logger.info(f"‚úÖ –í–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {version}")
        
    logger.info("üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    products = product_registry.get_all_products()
    assert isinstance(products, list)
    catalogLength = len(products)
    assert catalogLength > 0
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {catalogLength}")
    
    if products:
        product = products[0]
        
        # üîç –ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–î–£–ö–¢–ê
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞")
        assert hasattr(product, 'id')
        assert hasattr(product, 'title')
        assert hasattr(product, 'status')
        assert hasattr(product, 'cid')
        assert hasattr(product, 'description')
        assert hasattr(product, 'categories')
        assert hasattr(product, 'forms')
        assert hasattr(product, 'species')
        assert hasattr(product, 'prices')
        assert hasattr(product, 'description_cid')
        assert hasattr(product, 'cover_image_url')
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {product.id}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –ü–†–û–î–£–ö–¢–ê
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
        assert product.id is not None and str(product.id).strip() != ""
        assert product.title is not None and product.title.strip() != ""
        assert product.status in [0, 1]
        assert product.cid is not None and product.cid.strip() != ""
        assert product.description_cid is not None and product.description_cid.strip() != ""
        logger.info(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: ID={product.id}, Title='{product.title}', Status={product.status}")
            
        # üîç –ü–†–û–í–ï–†–ö–ê –û–ü–ò–°–ê–ù–ò–Ø (Description)
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏—è")
        assert isinstance(product.description, Description)
        description = product.description
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è Description
        assert hasattr(description, 'id')
        assert hasattr(description, 'title')
        assert hasattr(description, 'scientific_name')
        assert hasattr(description, 'generic_description')
        assert hasattr(description, 'effects')
        assert hasattr(description, 'shamanic')
        assert hasattr(description, 'warnings')
        assert hasattr(description, 'dosage_instructions')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö Description
        assert description.id is not None and description.id.strip() != ""
        assert description.title is not None and description.title.strip() != ""
        assert description.scientific_name is not None and description.scientific_name.strip() != ""
        assert description.generic_description is not None and description.generic_description.strip() != ""
        assert isinstance(description.dosage_instructions, list)
        
        logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ID={description.id}, Title='{description.title}', Scientific='{description.scientific_name}'")
        logger.info(f"   Generic description: {description.generic_description[:100]}...")
        logger.info(f"   Dosage instructions: {len(description.dosage_instructions)} —à—Ç.")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–°–¢–†–£–ö–¶–ò–ô –ü–û –î–û–ó–ò–†–û–í–ö–ï
        if description.dosage_instructions:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ")
            dosage = description.dosage_instructions[0]
            assert hasattr(dosage, 'type')
            assert hasattr(dosage, 'title')
            assert hasattr(dosage, 'description')
            assert dosage.type is not None and dosage.type.strip() != ""
            assert dosage.title is not None and dosage.title.strip() != ""
            assert dosage.description is not None and dosage.description.strip() != ""
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ: Type='{dosage.type}', Title='{dosage.title}'")
            
        # üîç –ü–†–û–í–ï–†–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        assert isinstance(product.categories, list)
        if product.categories:
            for category in product.categories:
                assert isinstance(category, str)
                assert category.strip() != ""
            logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {product.categories}")
            
        # üîç –ü–†–û–í–ï–†–ö–ê –§–û–†–ú
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—ã")
        assert isinstance(product.forms, list)
        if product.forms:
            for form in product.forms:
                assert isinstance(form, str)
                assert form.strip() != ""
            logger.info(f"‚úÖ –§–æ—Ä–º—ã: {product.forms}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –í–ò–î–ê
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥")
        assert product.species is not None and product.species.strip() != ""
        logger.info(f"‚úÖ –í–∏–¥: {product.species}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–ù
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã")
        assert isinstance(product.prices, list)
        assert len(product.prices) > 0
        for price in product.prices:
            assert isinstance(price, PriceInfo)
            assert hasattr(price, 'price')
            assert hasattr(price, 'currency')
            assert price.price > 0
            assert price.currency in PriceInfo.SUPPORTED_CURRENCIES
            logger.info(f"   –¶–µ–Ω–∞: {price.format_full()}")
        logger.info(f"‚úÖ –¶–µ–Ω—ã: {len(product.prices)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            
        # üîç –ü–†–û–í–ï–†–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        assert product.cover_image_url is not None and product.cover_image_url.strip() != ""
        assert product.cover_image_url.startswith('http')
        logger.info(f"‚úÖ Cover image URL: {product.cover_image_url}")
        
        # üîç –ü–†–û–í–ï–†–ö–ê IPFS –ó–ê–ì–†–£–ó–ö–ò
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ IPFS")
        assert product.description_cid != ""
        assert product.cid != ""
        logger.info(f"‚úÖ IPFS CID: Description={product.description_cid}, Cover={product.cid}")
        
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    cached_products = product_registry.get_all_products()
    assert len(cached_products) == len(products)
    logger.info("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–†–û–î–£–ö–¢–û–í
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
    for i, product in enumerate(products):
        assert product.id is not None
        assert product.title is not None and product.title.strip() != ""
        assert isinstance(product.description, Description)
        assert len(product.prices) > 0
        if i < 3:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞
            logger.info(f"   –ü—Ä–æ–¥—É–∫—Ç {i+1}: ID={product.id}, Title='{product.title}', –¶–µ–Ω={len(product.prices)}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

@pytest.mark.asyncio
async def test_create_successful_product_flow(product_registry, test_data):
    """
    –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–æ–≤–µ—Ä–æ–∫
    Arrange: –ë–µ—Ä–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    Act: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã
    Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∞–∫—Ç–∏–≤–∞—Ü–∏—é, —Å—Ç–∞—Ç—É—Å—ã
    """
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    valid_product = test_data["valid_products"][0]
    logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç: {valid_product['title']}")
    
    # ==================== –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê ====================
    logger.info("üöÄ –í—ã–∑—ã–≤–∞–µ–º create_product")
    product_id = await product_registry.create_product(valid_product)
    assert product_id is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {product_id}")
    
    # ==================== –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–£–ö–¢–ê ====================
    logger.info("üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID")
    product = product_registry.get_product(product_id)
    assert product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
    assert product.title == valid_product["title"], f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å: {product.title} != {valid_product['title']}"
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product.title}")
    
    # ==================== –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• ====================
    logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º alias (–±–∏–∑–Ω–µ—Å-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
    assert product.alias == valid_product["id"], f"Alias –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: {product.alias} != {valid_product['id']}"
    assert product.species == valid_product["species"], f"–í–∏–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: {product.species} != {valid_product['species']}"
    assert product.forms == [valid_product["form"]], f"–§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å: {product.forms} != {[valid_product['form']]}"
    assert product.categories == valid_product["categories"], f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å: {product.categories} != {valid_product['categories']}"
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π URL –¥–ª—è cover_image
    expected_cover_url = f"https://gateway.pinata.cloud/ipfs/{valid_product['cover_image']}"
    assert product.cover_image_url == expected_cover_url, f"–û–±–ª–æ–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å: {product.cover_image_url} != {expected_cover_url}"
    logger.info("‚úÖ –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # ==================== –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –û–ü–ò–°–ê–ù–ò–Ø ====================
    logger.info("üìñ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    assert product.description is not None, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    assert hasattr(product.description, 'generic_description'), "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å generic_description"
    assert hasattr(product.description, 'scientific_name'), "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å scientific_name"
    logger.info("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    # ==================== –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –¶–ï–ù ====================
    logger.info("üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞")
    assert product.prices is not None, "–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    assert len(product.prices) == len(valid_product["prices"]), f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å: {len(product.prices)} != {len(valid_product['prices'])}"
    
    for i, expected_price in enumerate(valid_product["prices"]):
        actual_price = product.prices[i]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Decimal –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        expected_weight = Decimal(expected_price["weight"])
        expected_price_value = Decimal(expected_price["price"])
        
        assert actual_price.weight == expected_weight, f"–í–µ—Å —Ü–µ–Ω—ã {i} –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å: {actual_price.weight} != {expected_weight}"
        assert actual_price.price == expected_price_value, f"–¶–µ–Ω–∞ {i} –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å: {actual_price.price} != {expected_price_value}"
        assert actual_price.weight_unit == expected_price["weight_unit"], f"–ï–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞ {i} –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å: {actual_price.weight_unit} != {expected_price['weight_unit']}"
        assert actual_price.currency == expected_price["currency"], f"–í–∞–ª—é—Ç–∞ {i} –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å: {actual_price.currency} != {expected_price['currency']}"
    
    logger.info("‚úÖ –í—Å–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # ==================== –≠–¢–ê–ü 6: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ====================
    logger.info("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
    final_product = product_registry.get_product(product_id)
    assert final_product is not None, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º"
    assert final_product.title == valid_product["title"], "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º"
    assert final_product.alias == valid_product["id"], "Alias –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º"
    logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    logger.info("üéâ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

@pytest.mark.asyncio
async def test_validation_valid_product():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    valid_product = TEST_PRODUCTS["valid_products"][0]
    validation_result = await service.validation_service.validate_product_data(valid_product)
    
    assert validation_result["is_valid"], f"–í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é. –û—à–∏–±–∫–∏: {validation_result.get('errors')}"
    assert len(validation_result["errors"]) == 0, f"–í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ—à–∏–±–æ–∫: {validation_result['errors']}"
    logger.info("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")

@pytest.mark.asyncio
async def test_validation_empty_fields():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    invalid_product = TEST_PRODUCTS["invalid_products"][0]
    validation_result = await service.validation_service.validate_product_data(invalid_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert len(validation_result["errors"]) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    
    errors = validation_result["errors"]
    expected_errors = [
        "title: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "description_cid: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "cover_image: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "form: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        "species: –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    ]
    
    for expected_error in expected_errors:
        assert any(expected_error in error for error in errors), f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞: {expected_error}"
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π")

@pytest.mark.asyncio
async def test_validation_invalid_cid_format():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º CID"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º CID")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    invalid_format_product = TEST_PRODUCTS["invalid_products"][2]
    validation_result = await service.validation_service.validate_product_data(invalid_format_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ CID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CID" in error for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ CID"
    logger.info("‚úÖ –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ CID –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

@pytest.mark.asyncio
async def test_validation_invalid_price_format():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω—ã"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω—ã")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    invalid_price_format_product = TEST_PRODUCTS["invalid_products"][1]
    validation_result = await service.validation_service.validate_product_data(invalid_price_format_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any(error.startswith("prices[0].price:") for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ü–µ–Ω—ã"
    logger.info(f"‚úÖ –û—à–∏–±–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ü–µ–Ω—ã: {[e for e in validation_result['errors'] if e.startswith('prices[0].price:')]}")

@pytest.mark.asyncio
async def test_validation_invalid_currency():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª—é—Ç–æ–π"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª—é—Ç–æ–π")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    invalid_currency_product = {
        "id": "invalid_currency_test",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "categories": ["test"],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "form": "powder",
        "species": "Test species",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "INVALID"}]
    }
    
    validation_result = await service.validation_service.validate_product_data(invalid_currency_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any(error.startswith("prices[0].currency:") for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –ø–æ –≤–∞–ª—é—Ç–µ"
    logger.info(f"‚úÖ –û—à–∏–±–∫–∏ –ø–æ –≤–∞–ª—é—Ç–µ: {[e for e in validation_result['errors'] if e.startswith('prices[0].currency:')]}")

@pytest.mark.asyncio
async def test_validation_invalid_form():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    invalid_form_product = {
        "id": "invalid_form_test",
        "title": "Test Product",
        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        "categories": ["test"],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "form": "invalid_form",
        "species": "Test species",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    
    validation_result = await service.validation_service.validate_product_data(invalid_form_product)
    
    assert not validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any(error.startswith("form:") for error in validation_result["errors"]), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ"
    logger.info(f"‚úÖ –û—à–∏–±–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ: {[e for e in validation_result['errors'] if e.startswith('form:')]}")

@pytest.mark.asyncio
async def test_validation_boundary_cases():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    valid_product = TEST_PRODUCTS["valid_products"][0]
    
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    boundary_product = valid_product.copy()
    boundary_product["title"] = "A" * 300  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 255 —Å–∏–º–≤–æ–ª–æ–≤
    
    validation_result = await service.validation_service.validate_product_data(boundary_product)
    assert not validation_result["is_valid"], "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any("–¥–ª–∏–Ω–∞" in error.lower() for error in validation_result["errors"]), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª–∏–Ω—ã"
    logger.info("‚úÖ –û—à–∏–±–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    
    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    boundary_product = valid_product.copy()
    boundary_product["categories"] = [f"category_{i}" for i in range(15)]  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 10
    
    validation_result = await service.validation_service.validate_product_data(boundary_product)
    assert not validation_result["is_valid"], "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º"
    assert any("–∫–∞—Ç–µ–≥–æ—Ä–∏" in error.lower() for error in validation_result["errors"]), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    logger.info("‚úÖ –û—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

@pytest.mark.asyncio
async def test_validation_data_sanitization():
    """–¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    blockchain_service = BlockchainService()
    storage_service = IPFSFactory().get_storage()
    validation_service = ProductValidationService()
    service = ProductRegistryService(
        blockchain_service=blockchain_service,
        storage_service=storage_service,
        validation_service=validation_service
    )
    
    valid_product = TEST_PRODUCTS["valid_products"][0]
    
    # –ü—Ä–æ–¥—É–∫—Ç —Å –ª–∏—à–Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    dirty_product = valid_product.copy()
    dirty_product["title"] = "  Amanita muscaria ‚Äî sliced caps and gills (1st grade)  "
    dirty_product["categories"] = ["  mushroom  ", "  mental health  "]
    
    validation_result = await service.validation_service.validate_product_data(dirty_product)
    assert validation_result["is_valid"], "–ü—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏"
    assert "sanitized_data" in validation_result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    
    sanitized = validation_result["sanitized_data"]
    assert sanitized["title"] == "Amanita muscaria ‚Äî sliced caps and gills (1st grade)", "–ü—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã"
    assert sanitized["categories"] == ["mushroom", "mental health"], "–ü—Ä–æ–±–µ–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã"
    logger.info("‚úÖ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

@pytest.mark.asyncio
async def test_product_status_updates(product_registry):
    """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    logger.info("üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç")
    valid_product = TEST_PRODUCTS["valid_products"][0]
    product_id = await product_registry.create_product(valid_product)
    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {product_id}")
    
    logger.info("üîÑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç")
    result = await product_registry.deactivate_product(product_id)
    assert result, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    product = product_registry.get_product(product_id)
    assert not product.is_active, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    