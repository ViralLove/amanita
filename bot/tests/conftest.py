"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ Amanita
"""
import pytest
import logging
import os
import time
from unittest.mock import Mock, AsyncMock
from bot.services.core import blockchain
from bot.model.product import Product
from bot.model.organic_component import OrganicComponent
from bot.model.product import PriceInfo

# –Ø–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è pytest-asyncio –ø–ª–∞–≥–∏–Ω–∞
pytest_plugins = ["pytest_asyncio"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–æ–∑–¥–∞–µ–º logger –¥–ª—è –º–æ–∫–æ–≤
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
AMANITA_API_KEY = os.getenv("AMANITA_API_KEY", "test-api-key-12345")
AMANITA_API_SECRET = os.getenv("AMANITA_API_SECRET", "default-secret-key-change-in-production")
API_URL = os.getenv("AMANITA_API_URL", "http://localhost:8000")

# API-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
import httpx
from typing import AsyncGenerator


@pytest.fixture(autouse=True)
def setup_test_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


@pytest.fixture(scope="function")
def mock_blockchain_service(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService (—Ç–æ–ª—å–∫–æ –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)"""
    
    class MockBlockchainService:
        def __init__(self):
            self.create_product_called = False
            self.seller_key = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö blockchain ID
            self._next_blockchain_id = 1
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            self.product_statuses = {}
            # –ù–æ–≤–æ–µ: —Å–≤—è–∑—å –º–µ–∂–¥—É blockchain ID –∏ IPFS CID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MockIPFSStorage
            self.product_cids = {}
            # –°—Å—ã–ª–∫–∞ –Ω–∞ storage service –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.storage_service = None
            
            # üîß –ò–ó–û–õ–Ø–¶–ò–Ø: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã
            self._reset_state()
        
        def _reset_state(self):
            """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
            self.create_product_called = False
            self._next_blockchain_id = 1
            self.product_statuses.clear()
            self.product_cids.clear()
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            self._initialize_test_data()
            
            logger.info("üîß [MockBlockchainService] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
        
        def _initialize_test_data(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å ID=1 –∏ —Å—Ç–∞—Ç—É—Å–æ–º False (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
            self.product_statuses[1] = False
            self.product_cids[1] = "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG"
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è ID 2-8, –Ω–æ –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ CID
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç create_product —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CID –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            for i in range(2, 9):  # ID –æ—Ç 2 –¥–æ 8
                self.product_statuses[i] = False  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                # –ù–ï —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ CID - –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ create_product
            
            logger.info(f"üîß [MockBlockchainService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(self.product_statuses)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            logger.info(f"   - product_statuses: {self.product_statuses}")
            logger.info(f"   - product_cids: {self.product_cids}")
        
        def _generate_next_blockchain_id(self):
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π blockchain ID"""
            next_id = self._next_blockchain_id
            self._next_blockchain_id += 1
            logger.info(f"üî¢ [MockBlockchainService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π blockchain ID: {next_id}")
            return next_id
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1)
        def get_catalog_version(self):
            return 1

        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 9 —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ProductRegistry.Product)
        def get_all_products(self):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 9 —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ProductRegistry.Product)
            –£–±—Ä–∞–ª–∏ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å ID 42 –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            """
            return [
                (1, "0x0000000000000000000000000000000000000001", "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG", False),
                (2, "0x0000000000000000000000000000000000000002", "QmbTBHeByJwUP9JyTo2GcHzj1YwzVww6zXrEDFt3zgdwQ1", False),
                (3, "0x0000000000000000000000000000000000000003", "QmUPHsHyuDHKyVbduvqoooAYShFCSfYgcnEioxNNqgZK2B", False),
                (4, "0x0000000000000000000000000000000000000004", "Qmat1agJkdYK5uX8YZoJvQnQ3zzqSaavmzUEhpEfQHD4gz", False),
                (5, "0x0000000000000000000000000000000000000005", "Qmbkp4owyjyjRuYGd7b1KfVjo5bBvCutgYdCi7qKd3ZPoy", False),
                (6, "0x0000000000000000000000000000000000000006", "QmWwjNvD8HX6WB2TLsxiEhciMJCHRfiZBw9G2wgfqKyPbd", False),
                (7, "0x0000000000000000000000000000000000000007", "QmbGrAqeugUxZZxWojavu4rbHdk5XNmSsSv92UV8FKjyHa", False),
                (8, "0x0000000000000000000000000000000000000008", "QmdmJFdMQXRpp3qNRTLYqsR1kFLYhTSRA8YMfd5JvNi85S", False)
                # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å ID 42 - —Ç–µ–ø–µ—Ä—å –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
            ]
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ _check_product_id_exists)
        def get_products_by_current_seller_full(self):
            return []
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ _check_blockchain_product_exists)
        def product_exists_in_blockchain(self, blockchain_id):
            return False
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        async def get_all_products_async(self):
            return self.get_all_products()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ id. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ProductRegistry.Product.
        def get_product(self, product_id):
            """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID (mock)"""
            # –ü—Ä–∏–≤–æ–¥–∏–º product_id –∫ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            try:
                product_id_int = int(product_id)
            except (ValueError, TypeError):
                logger.warning(f"‚ö†Ô∏è [MockBlockchainService] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π product_id: {product_id}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
            status = self.product_statuses.get(product_id_int, False)
            logger.info(f"üîç [MockBlockchainService] get_product –≤—ã–∑–≤–∞–Ω –¥–ª—è ID={product_id}")
            logger.info(f"   - product_statuses: {self.product_statuses}")
            logger.info(f"   - status –¥–ª—è ID {product_id_int}: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º ID
            if product_id_int in self.product_cids:
                # –ü—Ä–æ–¥—É–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ create_product, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π CID
                cid = self.product_cids[product_id_int]
                logger.info(f"üîç [MockBlockchainService] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ID={product_id_int}, CID={cid}, Status={status}")
                return (product_id_int, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", cid, status)
            else:
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ product_cids, 
                # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è CID
                logger.info(f"üîç [MockBlockchainService] –ü—Ä–æ–¥—É–∫—Ç {product_id_int} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ product_cids, –Ω–æ —Å—Ç–∞—Ç—É—Å: {status}")
                return (product_id_int, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", None, status)

        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç CID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MockIPFSStorage.
        async def create_product(self, ipfs_cid):
            self.create_product_called = True
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π blockchain ID –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω)
            product_id = self._generate_next_blockchain_id()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É blockchain ID –∏ IPFS CID
            self.product_cids[product_id] = ipfs_cid
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–¥—É–∫—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (status=False)
            self.product_statuses[product_id] = False
            
            logger.info(f"üîó [MockBlockchainService] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: ID={product_id}, CID={ipfs_cid}")
            
            return "0x123"  # –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π tx_hash '0xsetactive'.
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"

        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π tx_hash.
        async def update_product_status(self, private_key, product_id, new_status):
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç [MockBlockchainService] update_product_status –≤—ã–∑–≤–∞–Ω:")
            logger.info(f"   - product_id: {product_id} (—Ç–∏–ø: {type(product_id)})")
            logger.info(f"   - new_status: {new_status} (—Ç–∏–ø: {type(new_status)})")
            logger.info(f"   - new_status repr: {repr(new_status)}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ò–ó–ê–¶–ò–ò: –ü—Ä–∏–≤–æ–¥–∏–º new_status –∫ int –ø–µ—Ä–µ–¥ bool –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
            if isinstance(new_status, str):
                try:
                    status_int = int(new_status)
                    logger.info(f"üîÑ [MockBlockchainService] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ —Å—Ç—Ä–æ–∫—É '{new_status}' –≤ int: {status_int}")
                except ValueError:
                    logger.error(f"‚ùå [MockBlockchainService] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{new_status}' –≤ int, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å")
                    status_int = new_status
            else:
                status_int = new_status
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bool (—Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: 0 -> False, 1 -> True)
            status_bool = bool(status_int)
            logger.info(f"üîÑ [MockBlockchainService] new_status {new_status} -> status_int {status_int} -> status_bool {status_bool}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º —Å–ª–æ–≤–∞—Ä–µ
            if product_id in self.product_statuses:
                old_status = self.product_statuses[product_id]
                self.product_statuses[product_id] = status_bool
                logger.info(f"üîÑ [MockBlockchainService] –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –∏–∑–º–µ–Ω–µ–Ω: {old_status} -> {status_bool}")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                self.product_statuses[product_id] = status_bool
                logger.info(f"üÜï [MockBlockchainService] –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {status_bool}")
            
            return "0xupdatestatus"

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è productId –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π productId.
        async def get_product_id_from_tx(self, tx_hash):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ—Ç ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–∫—á–µ–π–Ω–æ–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            if self.product_cids:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID
                last_id = max(self.product_cids.keys())
                logger.info(f"üÜî [MockBlockchainService] –ü–æ–ª—É—á–µ–Ω ID –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {last_id}")
                return last_id
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
                new_id = self._generate_next_blockchain_id()
                logger.info(f"üÜî [MockBlockchainService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {new_id}")
                return new_id
        
        async def transact_contract_function(self, *args, **kwargs):
            return "0xtransaction"
        
        def clear(self):
            """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
            self.create_product_called = False
            self.product_statuses.clear()
            self.product_cids.clear()
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ blockchain ID
            self._next_blockchain_id = 1
            logger.info("üßπ [MockBlockchainService] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ, —Å—á–µ—Ç—á–∏–∫ ID —Å–±—Ä–æ—à–µ–Ω")
        
        # üîß –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ InviteNFT –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è AccountService
        def _call_contract_read_function(self, contract_address, function_name, *args):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ read —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
            logger.info(f"üîç [MockBlockchainService] _call_contract_read_function: {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            if function_name in ["isSeller", "userInviteCount", "isUserActivated", "getAllActivatedUsers", 
                               "batchValidateInviteCodes", "getTokenIdByInviteCode", "getInviteCodeByTokenId",
                               "isInviteTokenUsed", "getInviteCreatedAt", "getInviteExpiry", 
                               "getInviteMinter", "getInviteFirstOwner", "validateInviteCode"]:
                return self._call_invite_nft_function(function_name, *args)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –º–æ–∫–µ)
                logger.warning(f"‚ö†Ô∏è [MockBlockchainService] –§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return None
        
        def _call_invite_nft_function(self, function_name, *args):
            """–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
            logger.info(f"üîç [MockBlockchainService] InviteNFT —Ñ—É–Ω–∫—Ü–∏—è: {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ {args}")
            
            if function_name == "isSeller":
                user_address = args[0] if args else "0x0000000000000000000000000000000000000000"
                return self._is_seller(user_address)
            elif function_name == "userInviteCount":
                user_address = args[0] if args else "0x0000000000000000000000000000000000000000"
                return self._user_invite_count(user_address)
            elif function_name == "isUserActivated":
                user_address = args[0] if args else "0x0000000000000000000000000000000000000000"
                return self._is_user_activated(user_address)
            elif function_name == "getAllActivatedUsers":
                return self._get_all_activated_users()
            elif function_name == "batchValidateInviteCodes":
                invite_codes = args[0] if args else []
                user_address = args[1] if len(args) > 1 else "0x0000000000000000000000000000000000000000"
                return self._batch_validate_invite_codes(invite_codes, user_address)
            elif function_name == "getTokenIdByInviteCode":
                invite_code = args[0] if args else ""
                return self._get_token_id_by_invite_code(invite_code)
            elif function_name == "getInviteCodeByTokenId":
                token_id = args[0] if args else 0
                return self._get_invite_code_by_token_id(token_id)
            elif function_name == "isInviteTokenUsed":
                token_id = args[0] if args else 0
                return self._is_invite_token_used(token_id)
            elif function_name == "getInviteCreatedAt":
                token_id = args[0] if args else 0
                return self._get_invite_created_at(token_id)
            elif function_name == "getInviteExpiry":
                token_id = args[0] if args else 0
                return self._get_invite_expiry(token_id)
            elif function_name == "getInviteMinter":
                token_id = args[0] if args else 0
                return self._get_invite_minter(token_id)
            elif function_name == "getInviteFirstOwner":
                token_id = args[0] if args else 0
                return self._get_invite_first_owner(token_id)
            elif function_name == "validateInviteCode":
                invite_code = args[0] if args else ""
                return self._validate_invite_code(invite_code)
            else:
                logger.warning(f"‚ö†Ô∏è [MockBlockchainService] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è InviteNFT —Ñ—É–Ω–∫—Ü–∏—è: {function_name}")
                return None
        
        def _is_seller(self, user_address):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
            return self._get_invite_nft_test_data()["seller_roles"].get(user_address, False)
        
        def _user_invite_count(self, user_address):
            """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            return self._get_invite_nft_test_data()["user_invite_counts"].get(user_address, 0)
        
        def _is_user_activated(self, user_address):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            return self._get_invite_nft_test_data()["activated_users"].get(user_address, 0) != 0
        
        def _get_all_activated_users(self):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            activated = self._get_invite_nft_test_data()["activated_users"]
            return [addr for addr, status in activated.items() if status != 0]
        
        def _batch_validate_invite_codes(self, invite_codes, user_address):
            """–ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤"""
            success_array = []
            reasons_array = []
            invite_data = self._get_invite_nft_test_data()["invite_codes"]
            
            for code in invite_codes:
                if code in invite_data:
                    invite_info = invite_data[code]
                    if invite_info["used"]:
                        success_array.append(False)
                        reasons_array.append("already_used")
                    elif invite_info["expiry"] != 0 and invite_info["expiry"] < time.time():
                        success_array.append(False)
                        reasons_array.append("expired")
                    else:
                        success_array.append(True)
                        reasons_array.append("")
                else:
                    success_array.append(False)
                    reasons_array.append("not_found")
            
            return success_array, reasons_array
        
        def _get_token_id_by_invite_code(self, invite_code):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ token ID –ø–æ –∏–Ω–≤–∞–π—Ç –∫–æ–¥—É"""
            invite_data = self._get_invite_nft_test_data()["invite_codes"]
            if invite_code in invite_data:
                return invite_data[invite_code]["token_id"]
            return 0
        
        def _get_invite_code_by_token_id(self, token_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –ø–æ token ID"""
            invite_data = self._get_invite_nft_test_data()["invite_codes"]
            for code, data in invite_data.items():
                if data["token_id"] == token_id:
                    return code
            return ""
        
        def _is_invite_token_used(self, token_id):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç —Ç–æ–∫–µ–Ω–∞"""
            invite_data = self._get_invite_nft_test_data()["invite_codes"]
            for data in invite_data.values():
                if data["token_id"] == token_id:
                    return data["used"]
            return False
        
        def _get_invite_created_at(self, token_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞"""
            return int(time.time()) - 3600  # 1 —á–∞—Å –Ω–∞–∑–∞–¥
        
        def _get_invite_expiry(self, token_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞"""
            invite_data = self._get_invite_nft_test_data()["invite_codes"]
            for data in invite_data.values():
                if data["token_id"] == token_id:
                    return data["expiry"]
            return 0
        
        def _get_invite_minter(self, token_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∏–Ω—Ç–µ—Ä–∞ –∏–Ω–≤–∞–π—Ç–∞"""
            return "0x1234567890abcdef1234567890abcdef12345678"
        
        def _get_invite_first_owner(self, token_id):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–Ω–≤–∞–π—Ç–∞"""
            return "0x1234567890abcdef1234567890abcdef12345678"
        
        def _validate_invite_code(self, invite_code):
            """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞"""
            invite_data = self._get_invite_nft_test_data()["invite_codes"]
            if invite_code in invite_data:
                invite_info = invite_data[invite_code]
                if invite_info["used"]:
                    return False, "already_used"
                elif invite_info["expiry"] != 0 and invite_info["expiry"] < time.time():
                    return False, "expired"
                else:
                    return True, ""
            else:
                return False, "not_found"
        
        def _get_invite_nft_test_data(self):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è InviteNFT"""
            if not hasattr(self, '_invite_nft_data'):
                import time
                self._invite_nft_data = {
                    "invite_codes": {
                        "AMANITA-TEST-CODE1": {"token_id": 1, "used": False, "expiry": 0},
                        "AMANITA-TEST-CODE2": {"token_id": 2, "used": True, "expiry": 0},
                        "AMANITA-TEST-CODE3": {"token_id": 3, "used": False, "expiry": 0},
                        "AMANITA-TEST-CODE4": {"token_id": 4, "used": False, "expiry": 0},
                        "AMANITA-TEST-CODE5": {"token_id": 5, "used": False, "expiry": 0}
                    },
                    "user_invite_counts": {
                        "0x1234567890abcdef1234567890abcdef12345678": 2,
                        "0x0987654321098765432109876543210987654321": 0,
                        "0x1111111111111111111111111111111111111111": 5,
                        "0x2222222222222222222222222222222222222222": 1
                    },
                    "activated_users": {
                        "0x1234567890abcdef1234567890abcdef12345678": 1,
                        "0x0987654321098765432109876543210987654321": 0,
                        "0x1111111111111111111111111111111111111111": 1,
                        "0x2222222222222222222222222222222222222222": 0
                    },
                    "seller_roles": {
                        "0x1234567890abcdef1234567890abcdef12345678": True,
                        "0x0987654321098765432109876543210987654321": False,
                        "0x1111111111111111111111111111111111111111": True,
                        "0x2222222222222222222222222222222222222222": False
                    }
                }
            return self._invite_nft_data
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainService)
    return MockBlockchainService()


@pytest.fixture(scope="function")
def mock_validation_service():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è ProductValidationService —Å ValidationResult"""
    from bot.validation import ValidationResult
    
    class MockProductValidationService:
        def __init__(self, should_fail_validation=False):
            self.should_fail_validation = should_fail_validation
            self.validation_calls = []
        
        async def validate_product_data(self, product_data, storage_service=None):
            self.validation_calls.append(product_data)
            
            if self.should_fail_validation:
                return ValidationResult.failure(
                    "Mock validation failed",
                    field_name="mock_error",
                    error_code="MOCK_VALIDATION_FAILED"
                )
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –º–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
            required_fields = ["title", "organic_components", "forms"]
            errors = []
            
            for field in required_fields:
                if field not in product_data:
                    errors.append(f"Missing required field: {field}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è organic_components
            if "organic_components" in product_data:
                components = product_data["organic_components"]
                if not isinstance(components, list) or len(components) == 0:
                    errors.append("organic_components: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                else:
                    for i, component in enumerate(components):
                        if not isinstance(component, dict):
                            errors.append(f"organic_components[{i}]: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                        else:
                            required_component_fields = ["biounit_id", "description_cid", "proportion"]
                            for comp_field in required_component_fields:
                                if comp_field not in component:
                                    errors.append(f"organic_components[{i}].{comp_field}: –ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
            
            if errors:
                return ValidationResult.failure(
                    "; ".join(errors),
                    field_name="validation_errors",
                    error_code="VALIDATION_ERRORS"
                )
            
            return ValidationResult.success()
    
    return MockProductValidationService()


@pytest.fixture(scope="function")
def mock_account_service():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è AccountService —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è InviteNFT"""
    class MockAccountService:
        def __init__(self):
            self.private_key = "0x1234567890abcdef"
            self.address = "0x1234567890abcdef1234567890abcdef12345678"
            self.balance = "1000000000000000000"  # 1 ETH
            
            # üîß –ù–û–í–û–ï: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AccountService
            self._initialize_test_data()
        
        def _initialize_test_data(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AccountService"""
            self.test_sellers = {
                "0x1234567890abcdef1234567890abcdef12345678": True,
                "0x0987654321098765432109876543210987654321": False,
                "0x1111111111111111111111111111111111111111": True,
                "0x2222222222222222222222222222222222222222": False
            }
            
            self.test_user_invite_counts = {
                "0x1234567890abcdef1234567890abcdef12345678": 2,
                "0x0987654321098765432109876543210987654321": 0,
                "0x1111111111111111111111111111111111111111": 5,
                "0x2222222222222222222222222222222222222222": 1
            }
            
            self.test_activated_users = {
                "0x1234567890abcdef1234567890abcdef12345678": True,
                "0x0987654321098765432109876543210987654321": False,
                "0x1111111111111111111111111111111111111111": True,
                "0x2222222222222222222222222222222222222222": False
            }
            
            self.test_invite_codes = {
                "AMANITA-TEST-CODE1": {"valid": True, "used": False},
                "AMANITA-TEST-CODE2": {"valid": True, "used": True},
                "AMANITA-TEST-CODE3": {"valid": True, "used": False},
                "AMANITA-TEST-CODE4": {"valid": False, "used": False},
                "AMANITA-TEST-CODE5": {"valid": True, "used": False}
            }
        
        def get_private_key(self):
            return self.private_key
        
        def get_address(self):
            return self.address
        
        def get_balance(self):
            return self.balance
        
        async def sign_transaction(self, transaction):
            return f"0xsigned_{transaction}"
        
        # üîß –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–ª—è InviteNFT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        async def is_seller(self, user_address: str) -> bool:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
            return self.test_sellers.get(user_address, False)
        
        async def validate_invite_code(self, invite_code: str, user_address: str) -> bool:
            """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            if invite_code not in self.test_invite_codes:
                return False
            
            invite_data = self.test_invite_codes[invite_code]
            if not invite_data["valid"] or invite_data["used"]:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–≤–∞–π—Ç—É
            user_count = self.test_user_invite_counts.get(user_address, 0)
            return user_count > 0
        
        async def is_user_activated(self, user_address: str) -> bool:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            return self.test_activated_users.get(user_address, False)
        
        async def get_all_activated_users(self) -> list:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            return [addr for addr, activated in self.test_activated_users.items() if activated]
        
        async def batch_validate_invite_codes(self, invite_codes: list, user_address: str) -> tuple:
            """–ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤"""
            success_array = []
            reasons_array = []
            
            for code in invite_codes:
                is_valid = await self.validate_invite_code(code, user_address)
                success_array.append(is_valid)
                reasons_array.append("" if is_valid else "invalid_or_used")
            
            return success_array, reasons_array
        
        async def activate_and_mint_invites(self, invite_codes: list, user_address: str) -> bool:
            """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –º–∏–Ω—Ç –∏–Ω–≤–∞–π—Ç–æ–≤"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º
            if not await self.is_seller(user_address):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥—ã
            for code in invite_codes:
                if not await self.validate_invite_code(code, user_address):
                    return False
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            return True
        
        async def get_seller_account(self) -> dict:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"""
            return {
                "address": self.address,
                "private_key": self.private_key,
                "is_seller": True,
                "balance": self.balance
            }
        
        def _generate_random_code(self) -> str:
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)"""
            import random
            import string
            return "AMANITA-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
    return MockAccountService()


@pytest.fixture(scope="function")
def mock_ipfs_storage_failing():
    """–ú–æ–∫ IPFS storage —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫"""
    class MockIPFSStorageFailing:
        def __init__(self):
            self.should_fail_upload = True
            self.should_fail_download = True
            self.uploaded_files = []
            self.uploaded_jsons = []
            self.downloaded_json = {}
            self.gateway_url_prefix = "https://mocked.ipfs/"
        
        def download_json(self, cid):
            if self.should_fail_download:
                return None
            return self.downloaded_json.get(cid, {
                "id": "amanita1",
                "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
                "organic_components": [
                    {
                        "biounit_id": "amanita_muscaria",
                        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                        "proportion": "100%"
                    }
                ],
                "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
                "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
                "forms": ["mixed slices"],
                "species": "Amanita muscaria",
                "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
            })
        
        async def upload_json(self, data):
            if self.should_fail_upload:
                return None
            cid = f"QmMockJson{len(self.uploaded_jsons)}"
            self.uploaded_jsons.append((data, cid))
            return cid
        
        async def download_json_async(self, cid):
            return self.download_json(cid)
        
        def upload_file(self, file_path_or_data, file_name=None):
            if self.should_fail_upload:
                raise Exception("Mock IPFS upload failed")
            cid = f"QmMockFile{len(self.uploaded_files)}"
            self.uploaded_files.append((file_path_or_data, file_name))
            return cid
        
        def get_gateway_url(self, cid):
            return self.gateway_url_prefix + cid
        
        def is_valid_cid(self, cid):
            return isinstance(cid, str) and cid.startswith("Qm")
    
    return MockIPFSStorageFailing()


@pytest.fixture(scope="function")
def mock_validation_service_failing():
    """–ú–æ–∫ ProductValidationService —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫"""
    from bot.validation import ValidationResult
    
    class MockProductValidationServiceFailing:
        def __init__(self):
            self.validation_calls = []
        
        async def validate_product_data(self, product_data, storage_service=None):
            self.validation_calls.append(product_data)
            return ValidationResult.failure(
                "Mock validation failed",
                field_name="mock_error",
                error_code="MOCK_VALIDATION_FAILED"
            )
    
    return MockProductValidationServiceFailing()


@pytest.fixture(scope="function")
def mock_integration_registry_service(mock_blockchain_service, mock_ipfs_service, mock_validation_service, mock_account_service):
    """–ú–æ–∫ ProductRegistryService –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–∫–∞–º–∏"""
    from bot.dependencies import get_product_registry_service
    
    # –°–≤—è–∑—ã–≤–∞–µ–º –º–æ–∫–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    mock_blockchain_service.storage_service = mock_ipfs_service
    mock_ipfs_service.blockchain_service = mock_blockchain_service
    
    logger.info("üîó [mock_integration_registry_service] –ú–æ–∫–∏ —Å–≤—è–∑–∞–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    return get_product_registry_service(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )


@pytest.fixture(scope="function")
def mock_integration_registry_service_real_blockchain(mock_ipfs_service, mock_validation_service, mock_account_service):
    """–ú–æ–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º, –Ω–æ –º–æ–∫–∞–Ω–Ω—ã–º IPFS"""
    from bot.dependencies import get_product_registry_service
    from bot.services.core.blockchain import BlockchainService
    
    return get_product_registry_service(
        blockchain_service=BlockchainService(),  # –†–µ–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
        storage_service=mock_ipfs_service,      # –ú–æ–∫–∞–Ω–Ω—ã–π IPFS
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )


@pytest.fixture(scope="function")
def mock_ipfs_service(monkeypatch):
    """–ú–æ–∫ –¥–ª—è ProductStorageService (IPFS/Pinata) –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤ API –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    class MockIPFSService:
        def __init__(self):
            self.should_fail_upload = False
            self.uploaded_json = []
            self.uploaded_files = []
            self.downloaded_json = {}
            self.gateway_url_prefix = "https://mocked.ipfs/"
            
        async def upload_json(self, data):
            print(f"[MOCK upload_json] should_fail_upload={self.should_fail_upload}")
            if self.should_fail_upload:
                print("[MOCK upload_json] returning None (simulate IPFS error)")
                return None
            self.uploaded_json.append(data)
            cid = "QmMockedCID" + str(len(self.uploaded_json))
            print(f"[MOCK upload_json] returning {cid}")
            return cid
            
        def upload_file(self, file_path_or_data, file_name=None):
            self.uploaded_files.append((file_path_or_data, file_name))
            return "QmMockedFileCID"
            
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤
        def download_json(self, cid):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
            mock_metadata = {
                "id": "amanita1",
                "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
                "organic_components": [
                    {
                        "biounit_id": "amanita_muscaria",
                        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                        "proportion": "100%"
                    }
                ],
                "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
                "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
                "forms": ["mixed slices"],
                "species": "Amanita muscaria",
                "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
            }
            return self.downloaded_json.get(cid, mock_metadata)
            
        def get_gateway_url(self, cid):
            return self.gateway_url_prefix + cid
            
        def is_valid_cid(self, cid):
            return isinstance(cid, str) and cid.startswith("Qm")
            
    # –ü–æ–¥–º–µ–Ω—è–µ–º ProductStorageService –Ω–∞ –º–æ–∫
    from bot.services.product import storage
    monkeypatch.setattr(storage, "ProductStorageService", MockIPFSService)
    return MockIPFSService()


@pytest.fixture(scope="function")
def mock_blockchain_service_with_error(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    class MockBlockchainServiceWithError:
        def __init__(self):
            self.create_product_called = False
            self.should_fail_create = True  # –í–∫–ª—é—á–∞–µ–º –æ—à–∏–±–∫—É
        
        def get_catalog_version(self):
            return 1
        
        def get_all_products(self):
            return []
        
        def get_product(self, product_id):
            raise Exception("ProductRegistry: product does not exist")
        
        async def create_product(self, ipfs_cid):
            self.create_product_called = True
            if self.should_fail_create:
                raise Exception("Blockchain transaction failed: insufficient gas")
            return "0x123"
        
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"
        
        async def update_product_status(self, private_key, product_id, new_status):
            return "0xupdatestatus"
        
        async def get_product_id_from_tx(self, tx_hash):
            return 42
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    from bot.services.core import blockchain
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainServiceWithError)
    return MockBlockchainServiceWithError()


@pytest.fixture(scope="function")
def mock_blockchain_service_with_id_error(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id"""
    class MockBlockchainServiceWithIdError:
        def __init__(self):
            self.create_product_called = False
            self.get_product_id_called = False
            self.should_fail_get_id = True  # –í–∫–ª—é—á–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è ID
        
        def get_catalog_version(self):
            return 1
        
        def get_all_products(self):
            return []
        
        def get_product(self, product_id):
            raise Exception("ProductRegistry: product does not exist")
        
        async def create_product(self, ipfs_cid):
            self.create_product_called = True
            return "0x123"  # –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"
        
        async def update_product_status(self, private_key, product_id, new_status):
            return "0xupdatestatus"
        
        async def get_product_id_from_tx(self, tx_hash):
            self.get_product_id_called = True
            if self.should_fail_get_id:
                raise Exception("Failed to get product ID from transaction")
            return 42
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    from bot.services.core import blockchain
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainServiceWithIdError)
    return MockBlockchainServiceWithIdError()


@pytest.fixture(scope="function")
def mock_blockchain_service_with_tracking(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    class MockBlockchainServiceWithTracking:
        def __init__(self):
            self.create_product_calls = []
            self.get_product_id_calls = []
        
        def get_catalog_version(self):
            return 1
        
        def get_all_products(self):
            return []
        
        def get_product(self, product_id):
            raise Exception("ProductRegistry: product does not exist")
        
        async def create_product(self, ipfs_cid):
            self.create_product_calls.append(ipfs_cid)
            return "0x123"
        
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"
        
        async def update_product_status(self, private_key, product_id, new_status):
            return "0xupdatestatus"
        
        async def get_product_id_from_tx(self, tx_hash):
            self.get_product_id_calls.append(tx_hash)
            return "42"
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    from bot.services.core import blockchain
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainServiceWithTracking)
    return MockBlockchainServiceWithTracking()


# === API –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –§–ò–ö–°–¢–£–†–´ ===

@pytest.fixture(scope="function")
def api_client() -> httpx.AsyncClient:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å HMAC –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print("üîß [API Client] –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    client = httpx.AsyncClient(base_url=API_URL)
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    client.headers.update({
        "Content-Type": "application/json"
    })
    
    return client


@pytest.fixture(scope="function")
def test_api_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ API –∫–ª—é—á–∞"""
    return AMANITA_API_KEY


@pytest.fixture(scope="function")
def test_secret_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    return AMANITA_API_SECRET


@pytest.fixture(scope="function")
def valid_ethereum_address() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ Ethereum –∞–¥—Ä–µ—Å–∞"""
    return "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"


@pytest.fixture(scope="function")
def invalid_ethereum_address() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ Ethereum –∞–¥—Ä–µ—Å–∞"""
    return "invalid-address"


@pytest.fixture(scope="function")
def valid_api_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
    return "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef12345678"


@pytest.fixture(scope="function")
def invalid_api_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
    return "invalid-key"


@pytest.fixture(scope="function")
def test_request_data() -> dict:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        "client_address": "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6",
        "description": "Test API key"
    }


@pytest.fixture(scope="function")
def mock_service_factory():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ ServiceFactory"""
    print("üîß [Service Factory] –°–æ–∑–¥–∞–Ω–∏–µ Mock ServiceFactory")
    
    class MockServiceFactory:
        def create_api_key_service(self):
            return MockApiKeyService()
        
        def create_blockchain_service(self):
            return MockBlockchainService()
    
    factory = MockServiceFactory()
    yield factory
    
    print("üßπ [Service Factory] Mock ServiceFactory –æ—á–∏—â–µ–Ω")


class MockApiKeyService:
    """–ú–æ–∫ –¥–ª—è ApiKeyService"""
    def __init__(self):
        self.api_keys = {}
    
    async def create_api_key(self, client_address: str, description: str = None):
        api_key = f"test_api_key_{len(self.api_keys)}"
        self.api_keys[api_key] = {
            "client_address": client_address,
            "description": description
        }
        return api_key
    
    async def validate_api_key(self, api_key: str):
        return api_key in self.api_keys


class MockBlockchainService:
    """–ú–æ–∫ –¥–ª—è BlockchainService –≤ API —Ç–µ—Å—Ç–∞—Ö"""
    def __init__(self):
        self.accounts = {}
    
    def get_account_balance(self, address: str):
        return "1000000000000000000"  # 1 ETH
    
    def is_valid_address(self, address: str):
        return address.startswith("0x") and len(address) == 42


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ú–û–ö–û–í ===

@pytest.fixture(autouse=True, scope="function")
def reset_mock_states():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    print("üîß [Reset] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∫–æ–≤ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
    
    yield
    
    print("üßπ [Reset] –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–∫—Å—Ç—É—Ä—ã
    # –±–ª–∞–≥–æ–¥–∞—Ä—è scope="function" –∏ –º–µ—Ç–æ–¥–∞–º _reset_state


@pytest.fixture(autouse=True, scope="function")
def clear_mock_storage_between_tests():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ MockIPFSStorage –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
    print("üîß [Clear] –û—á–∏—Å—Ç–∫–∞ MockIPFSStorage –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
    
    yield
    
    print("üßπ [Clear] –û—á–∏—Å—Ç–∫–∞ MockIPFSStorage –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–∫—Å—Ç—É—Ä—ã
    # –±–ª–∞–≥–æ–¥–∞—Ä—è scope="function" –∏ –º–µ—Ç–æ–¥–∞–º _reset_state


@pytest.fixture(autouse=True, scope="function")
def comprehensive_cleanup():
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    print("üîß [Comprehensive] –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
    
    yield
    
    print("üßπ [Comprehensive] –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ç.–¥.


@pytest.fixture(scope="function")
def temp_files_cleanup():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤.
    """
    import tempfile
    import os
    
    # –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    temp_files = []
    
    print("üîß [Temp Files] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    yield temp_files
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for temp_file in temp_files:
        try:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                print(f"üßπ [Temp Files] –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è [Temp Files] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {temp_file}: {e}")
    
    print("üßπ [Temp Files] –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@pytest.fixture(scope="function")
def cache_cleanup():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏.
    """
    print("üîß [Cache] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫—ç—à–∞
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ Redis, Memcached, –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ –∏ —Ç.–¥.
    
    yield
    
    print("üßπ [Cache] –ö—ç—à –æ—á–∏—â–µ–Ω")


@pytest.fixture(scope="function")
def mock_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß [Mock Config] –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–∫–æ–≤")
    
    config = {
        "ipfs_mock_enabled": os.getenv("MOCK_IPFS", "true").lower() == "true",
        "blockchain_mock_enabled": os.getenv("MOCK_BLOCKCHAIN", "true").lower() == "true",
        "validation_mock_enabled": os.getenv("MOCK_VALIDATION", "true").lower() == "true"
    }
    
    yield config
    
    print("üßπ [Mock Config] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω–∞")

@pytest.fixture(scope="function")
def mock_ipfs_storage():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è IPFS/Arweave storage —Å–µ—Ä–≤–∏—Å–∞"""
    
    class MockIPFSStorage:
        def __init__(self, should_fail_upload=False, should_fail_download=False):
            self.should_fail_upload = should_fail_upload
            self.should_fail_download = should_fail_download
            self.uploaded_jsons = []
            self.downloaded_json = {}
            self._storage = {}
            self._counter = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self._populate_test_data()
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å MockBlockchainService
        def sync_with_blockchain_service(self, blockchain_service):
            """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç MockIPFSStorage —Å MockBlockchainService"""
            if hasattr(blockchain_service, 'product_cids'):
                for blockchain_id, cid in blockchain_service.product_cids.items():
                    if cid not in self._storage:
                        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ business_id
                        # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å —ç—Ç–∏–º blockchain_id
                        original_data = None
                        
                        # –ò—â–µ–º –ø–æ –≤—Å–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
                        for stored_cid, stored_data in self._storage.items():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –¥–∞–Ω–Ω—ã–µ —Å business_id, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ–º—É blockchain_id
                            # –í —Ç–µ—Å—Ç–∞—Ö –º—ã —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å business_id='amanita1', –∞ blockchain_id=8
                            # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                            if 'created_at' in stored_data:  # –≠—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
                                original_data = stored_data.copy()
                                break
                        
                        if original_data:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º CID –∏ blockchain_id
                            original_data['cid'] = cid
                            original_data['blockchain_id'] = blockchain_id
                            self._storage[cid] = original_data
                            logger.info(f"üîß [MockIPFSStorage] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω CID {cid} —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è blockchain ID {blockchain_id}")
                        else:
                            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CID, –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–µ—Ç
                            test_data = {
                                "id": blockchain_id,
                                "cid": cid,
                                "title": f"Test Product {blockchain_id}",
                                "organic_components": [
                                    {
                                        "biounit_id": f"test_component_{blockchain_id}",
                                        "description_cid": cid,
                                        "proportion": "100%"
                                    }
                                ],
                                "cover_image_url": cid,
                                "categories": ["mushroom"],
                                "forms": ["powder"],
                                "species": "Test Species",
                                "prices": [{"weight": "100", "weight_unit": "g", "price": "10", "currency": "EUR"}]
                            }
                            self._storage[cid] = test_data
                            logger.info(f"üîß [MockIPFSStorage] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω CID {cid} —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è blockchain ID {blockchain_id}")
        
        def _reset_state(self):
            """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
            self.uploaded_jsons.clear()
            self.downloaded_json.clear()
            
            # –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._populate_test_data()
            
            logger.info("üîß [MockIPFSStorage] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
        
        def _populate_test_data(self):
            """–ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç mock blockchain service (8 –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
            test_products = {
                "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG": {
                    "business_id": "amanita1",
                    "blockchain_id": 1,
                    "cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                    "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
                    "organic_components": [
                        {
                            "biounit_id": "amanita_muscaria",
                            "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
                    "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
                    "forms": ["mixed slices"],
                    "species": "Amanita muscaria",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
                },
                "QmbTBHeByJwUP9JyTo2GcHzj1YwzVww6zXrEDFt3zgdwQ1": {
                    "business_id": "amanita2",
                    "blockchain_id": 2,
                    "cid": "QmbTBHeByJwUP9JyTo2GcHzj1YwzVww6zXrEDFt3zgdwQ1",
                    "title": "Amanita pantherina ‚Äî premium powder",
                    "organic_components": [
                        {
                            "biounit_id": "amanita_pantherina",
                            "description_cid": "QmbTBHeByJwUP9JyTo2GcHzj1YwzVww6zXrEDFt3zgdwQ1",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmPantherinaCoverCID",
                    "categories": ["mushroom", "mental health", "focus"],
                    "forms": ["powder"],
                    "species": "Amanita pantherina",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "90", "currency": "EUR"}]
                },
                "QmUPHsHyuDHKyVbduvqoooAYShFCSfYgcnEioxNNqgZK2B": {
                    "business_id": "blue_lotus1",
                    "blockchain_id": 3,
                    "cid": "QmUPHsHyuDHKyVbduvqoooAYShFCSfYgcnEioxNNqgZK2B",
                    "title": "Blue Lotus ‚Äî flower extract",
                    "organic_components": [
                        {
                            "biounit_id": "blue_lotus",
                            "description_cid": "QmUPHsHyuDHKyVbduvqoooAYShFCSfYgcnEioxNNqgZK2B",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmBlueLotusCoverCID",
                    "categories": ["flower", "relaxation", "sleep"],
                    "forms": ["tincture"],
                    "species": "Blue Lotus",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "45", "currency": "EUR"}]
                },
                "Qmat1agJkdYK5uX8YZoJvQnQ3zzqSaavmzUEhpEfQHD4gz": {
                    "business_id": "chaga1",
                    "blockchain_id": 4,
                    "cid": "Qmat1agJkdYK5uX8YZoJvQnQ3zzqSaavmzUEhpEfQHD4gz",
                    "title": "Chaga ‚Äî medicinal mushroom",
                    "organic_components": [
                        {
                            "biounit_id": "chaga",
                            "description_cid": "Qmat1agJkdYK5uX8YZoJvQnQ3zzqSaavmzUEhpEfQHD4gz",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmChagaCoverCID",
                    "categories": ["mushroom", "immunity", "antioxidant"],
                    "forms": ["powder", "capsules"],
                    "species": "Chaga",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "70", "currency": "EUR"}]
                },
                "Qmbkp4owyjyjRuYGd7b1KfVjo5bBvCutgYdCi7qKd3ZPoy": {
                    "business_id": "lions_mane1",
                    "blockchain_id": 5,
                    "cid": "Qmbkp4owyjyjRuYGd7b1KfVjo5bBvCutgYdCi7qKd3ZPoy",
                    "title": "Lion's Mane ‚Äî cognitive support",
                    "organic_components": [
                        {
                            "biounit_id": "lions_mane",
                            "description_cid": "Qmbkp4owyjyjRuYGd7b1KfVjo5bBvCutgYdCi7qKd3ZPoy",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmLionsManeCoverCID",
                    "categories": ["mushroom", "cognitive", "memory"],
                    "forms": ["powder"],
                    "species": "Lion's Mane",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "85", "currency": "EUR"}]
                },
                "QmWwjNvD8HX6WB2TLsxiEhciMJCHRfiZBw9G2wgfqKyPbd": {
                    "business_id": "reishi1",
                    "blockchain_id": 6,
                    "cid": "QmWwjNvD8HX6WB2TLsxiEhciMJCHRfiZBw9G2wgfqKyPbd",
                    "title": "Reishi ‚Äî longevity mushroom",
                    "organic_components": [
                        {
                            "biounit_id": "reishi",
                            "description_cid": "QmWwjNvD8HX6WB2TLsxiEhciMJCHRfiZBw9G2wgfqKyPbd",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmReishiCoverCID",
                    "categories": ["mushroom", "longevity", "stress"],
                    "forms": ["powder", "tincture"],
                    "species": "Reishi",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "95", "currency": "EUR"}]
                },
                "QmbGrAqeugUxZZxWojavu4rbHdk5XNmSsSv92UV8FKjyHa": {
                    "business_id": "cordyceps1",
                    "blockchain_id": 7,
                    "cid": "QmbGrAqeugUxZZxWojavu4rbHdk5XNmSsSv92UV8FKjyHa",
                    "title": "Cordyceps ‚Äî energy boost",
                    "organic_components": [
                        {
                            "biounit_id": "cordyceps",
                            "description_cid": "QmbGrAqeugUxZZxWojavu4rbHdk5XNmSsSv92UV8FKjyHa",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmCordycepsCoverCID",
                    "categories": ["mushroom", "energy", "endurance"],
                    "forms": ["powder", "capsules"],
                    "species": "Cordyceps",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "88", "currency": "EUR"}]
                },
                "QmdmJFdMQXRpp3qNRTLYqsR1kFLYhTSRA8YMfd5JvNi85S": {
                    "business_id": "turkey_tail1",
                    "blockchain_id": 8,
                    "cid": "QmdmJFdMQXRpp3qNRTLYqsR1kFLYhTSRA8YMfd5JvNi85S",
                    "title": "Turkey Tail ‚Äî immune support",
                    "organic_components": [
                        {
                            "biounit_id": "turkey_tail",
                            "description_cid": "QmdmJFdMQXRpp3qNRTLYqsR1kFLYhTSRA8YMfd5JvNi85S",
                            "proportion": "100%"
                        }
                    ],
                    "cover_image_url": "QmTurkeyTailCoverCID",
                    "categories": ["mushroom", "immunity", "digestive"],
                    "forms": ["powder"],
                    "species": "Turkey Tail",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "75", "currency": "EUR"}]
                }
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            for cid, data in test_products.items():
                self._storage[cid] = data
                logger.info(f"üîß [MockIPFSStorage] –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CID: {cid}")
        
        def _generate_unique_cid(self, data):
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π CID –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
            import hashlib
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç –¥–∞–Ω–Ω—ã—Ö + —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            data_str = str(data) + str(self._counter)
            data_hash = hashlib.md5(data_str.encode()).hexdigest()
            self._counter += 1
            
            # IPFS CID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 46 —Å–∏–º–≤–æ–ª–æ–≤: Qm + 44 —Å–∏–º–≤–æ–ª–∞ —Ö–µ—à–∞
            # MD5 –¥–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è IPFS
            # IPFS CID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç base58btc –∞–ª—Ñ–∞–≤–∏—Ç: 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã: 0, O, I, l (—Å—Ç—Ä–æ—á–Ω–∞—è L)
            valid_chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω—ã–π CID –∏–∑ 44 —Å–∏–º–≤–æ–ª–æ–≤
            import random
            random.seed(int(data_hash, 16))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –∫–∞–∫ seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 44 —Å–∏–º–≤–æ–ª–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            cid_suffix = ''.join(random.choices(valid_chars, k=44))
            
            return f"Qm{cid_suffix}"
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤
        def download_json(self, cid):
            if self.should_fail_download:
                return None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if cid in self._storage:
                return self._storage[cid]
            
            # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—É–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ CID –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            return None
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
        async def upload_json(self, data):
            if self.should_fail_upload:
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π CID
            cid = self._generate_unique_cid(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self._storage[cid] = data
            
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ uploaded_jsons
            self.uploaded_jsons.append((data, cid))
            
            return cid
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ blockchain ID
        def get_product_by_blockchain_id(self, blockchain_id):
            """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ blockchain ID (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MockBlockchainService)"""
            # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ blockchain ID –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for cid, data in self._storage.items():
                if data.get('blockchain_id') == blockchain_id:
                    return data
            return None
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CID –ø–æ blockchain ID
        def get_cid_by_blockchain_id(self, blockchain_id):
            """–ü–æ–ª—É—á–∞–µ—Ç CID –ø–æ blockchain ID (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MockBlockchainService)"""
            for cid, data in self._storage.items():
                if data.get('blockchain_id') == blockchain_id:
                    return cid
            return None
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
        async def download_json_async(self, cid):
            return self.download_json(cid)
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è download_json –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ProductStorageService
        async def download_json(self, cid):
            return self.download_json_sync(cid)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        def download_json_sync(self, cid):
            if self.should_fail_download:
                return None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if cid in self._storage:
                return self._storage[cid]
            
            # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—É–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ CID –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            return None
        
        def upload_file(self, file_path_or_data, file_name=None):
            if self.should_fail_upload:
                raise Exception("Mock IPFS upload failed")
            cid = f"QmMockFile{len(self.uploaded_jsons)}"
            self.uploaded_jsons.append((file_path_or_data, file_name))
            return cid
        
        def get_gateway_url(self, cid):
            return f"https://mocked.ipfs/{cid}"
        
        def is_valid_cid(self, cid):
            return isinstance(cid, str) and cid.startswith("Qm")
        
        def clear(self):
            """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
            self._storage.clear()
            self._counter = 0
            self.uploaded_jsons.clear()
            self.downloaded_json.clear()
            
            # –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self._populate_test_data()
    
    return MockIPFSStorage()

@pytest.fixture(scope="function")
def mock_registry_service(mock_blockchain_service, mock_ipfs_storage, mock_validation_service, mock_account_service):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–æ–∫–∞–Ω–Ω—ã–π ProductRegistryService –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤"""
    from bot.services.product.registry import ProductRegistryService
    from unittest.mock import Mock, AsyncMock
    from bot.model.product import Product
    from bot.model.product import PriceInfo
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º cache_service —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ IPFS
    mock_cache_service = Mock()
    mock_cache_service.get_description_by_cid.return_value = None
    mock_cache_service.get_image_url_by_cid.return_value = "https://mocked.ipfs/test.jpg"
    mock_cache_service.set_cached_item.return_value = None
    mock_cache_service.invalidate_cache.return_value = None
    mock_cache_service.get_cached_item.return_value = None
    service.cache_service = mock_cache_service
    
    # –ú–æ–∫–∞–µ–º metadata_service —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ IPFS
    mock_metadata_service = Mock()
    mock_metadata_service.process_metadata.return_value = None
    service.metadata_service = mock_metadata_service
    
    return service


@pytest.fixture(scope="function")
def mock_product_registry_service(mock_blockchain_service, mock_ipfs_storage, mock_validation_service, mock_account_service):
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Mock ProductRegistryService —Å –ø–æ–ª–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    from unittest.mock import Mock, AsyncMock
    from datetime import datetime, timedelta
    from typing import Dict, List, Optional, Union, Any
    from bot.model.product import Product, Description, PriceInfo
    import logging
    
    class MockProductRegistryService:
        """
        –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Mock –¥–ª—è ProductRegistryService.
        –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.
        """
        
        def __init__(self, blockchain_service=None, storage_service=None, validation_service=None, account_service=None):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mock ProductRegistryService"""
            self.logger = logging.getLogger(__name__)
            
            # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self.blockchain_service = blockchain_service or Mock()
            self.storage_service = storage_service or Mock()
            self.validation_service = validation_service or Mock()
            self.account_service = account_service or Mock()
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º seller_account –¥–ª—è —Ç–µ—Å—Ç–æ–≤ endpoint GET /products/{seller_address}
            self.seller_account = Mock()
            self.seller_account.address = "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"  # –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            self.cache_service = Mock()
            self.metadata_service = Mock()
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self._products = {}  # product_id -> Product
            self._product_counter = 1
            self._catalog_version = 1
            self._cache_data = {}
            self._metadata_cids = {}  # product_id -> metadata_cid
            self._blockchain_ids = {}  # product_id -> blockchain_id
            
            # üîß –ò–ó–û–õ–Ø–¶–ò–Ø: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã
            self._reset_state()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self._initialize_test_data()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._setup_default_behavior()
            
            logger.info("üîß MockProductRegistryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        def _reset_state(self):
            """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
            self._products.clear()
            self._product_counter = 1
            self._catalog_version = 1
            self._cache_data.clear()
            self._metadata_cids.clear()
            self._blockchain_ids.clear()
            logger.info("üîß [MockProductRegistryService] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
        
        def _setup_default_behavior(self):
            """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            self.check_permissions = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞
            self.simulate_permission_denied = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∞–≤–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cache_service
            self.cache_service.get_cached_item.return_value = None
            self.cache_service.set_cached_item.return_value = True
            self.cache_service.invalidate_cache.return_value = None
            self.cache_service.get_description_by_cid.return_value = None
            self.cache_service.get_image_url_by_cid.return_value = "https://mocked.ipfs/test.jpg"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ metadata_service
            from bot.validation import ValidationResult
            test_metadata = {
                "id": "test_product",
                "title": "Test Product",
                "organic_components": [{"biounit_id": "test_biounit", "description_cid": "QmTestDesc", "proportion": "100%"}],
                "cover_image_url": "QmTestImage",
                "categories": ["mushroom"],
                "forms": ["powder"],
                "species": "test_species",
                "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}]
            }
            self.metadata_service.validate_and_parse_metadata.return_value = ValidationResult(
                is_valid=True, 
                error_message=None, 
                field_name=None, 
                field_value=test_metadata, 
                error_code="VALID", 
                suggestions=[]
            )
            self.metadata_service.create_product_metadata.return_value = {}
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ validation_service - –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π mock
            # self.validation_service.validate_product_data —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ mock_validation_service
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ storage_service - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Mock –æ–±—ä–µ–∫—Ç
            if hasattr(self.storage_service, 'return_value'):
                # –ï—Å–ª–∏ storage_service - —ç—Ç–æ Mock –æ–±—ä–µ–∫—Ç, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
                self.storage_service.download_json.return_value = {
                    "id": "test_product",
                    "title": "Test Product",
                    "description_cid": "QmDescriptionCID",
                    "cover_image_url": "QmImageCID",
                    "categories": ["mushroom"],
                    "forms": ["powder"],
                    "species": "Amanita muscaria",
                    "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
                }
                self.storage_service.upload_json = AsyncMock(return_value="QmMockCID")
                self.storage_service.is_valid_cid.return_value = True
            # –ï—Å–ª–∏ storage_service —É–∂–µ –∏–º–µ–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, MockIPFSStorage),
            # —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –∏—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ blockchain_service - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Mock –æ–±—ä–µ–∫—Ç
            if hasattr(self.blockchain_service, 'return_value'):
                # –ï—Å–ª–∏ blockchain_service - —ç—Ç–æ Mock –æ–±—ä–µ–∫—Ç, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
                self.blockchain_service.get_catalog_version.return_value = 1
                self.blockchain_service.get_all_products.return_value = []
                self.blockchain_service.get_products_by_current_seller_full.return_value = []
                self.blockchain_service.product_exists_in_blockchain.return_value = False
                self.blockchain_service.create_product = AsyncMock(return_value="0x123")
                self.blockchain_service.update_product_status = AsyncMock(return_value="0x456")
                self.blockchain_service.deactivate_product = AsyncMock(return_value="0x789")
                self.blockchain_service.get_product_id_from_tx = AsyncMock(return_value="0x42")
            # –ï—Å–ª–∏ blockchain_service —É–∂–µ –∏–º–µ–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, MockBlockchainService),
            # —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –∏—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å
        
        def _initialize_test_data(self):
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å ID=1 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_product = {
                "id": "1",
                "title": "Test Product 1",
                "description": {"en": "Test description for product 1"},
                "description_cid": "QmTestDescriptionCID1",
                "cover_image_url": "QmTestCoverCID1",
                "gallery": ["QmTestGalleryCID1"],
                "categories": ["mushroom"],
                "forms": ["powder"],
                "species": "Amanita muscaria",
                "organic_components": ["Amanita muscaria"],
                "prices": [{"weight": "100", "weight_unit": "g", "price": "50", "currency": "EUR"}],
                "attributes": {"sku": "TEST1", "stock": 10}
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._products["1"] = test_product
            self._metadata_cids["1"] = "QmTestMetadataCID1"
            self._blockchain_ids["1"] = 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            self._product_counter = 2
            
            logger.info("üîß [Mock] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—Ä–æ–¥—É–∫—Ç —Å ID=1")
        
        # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–î–£–ö–¢–ê–ú–ò ===
        
        async def create_product(self, product_data: Dict[str, Any]) -> Dict[str, Any]:
            """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"""
            try:
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id –∏–ª–∏ id –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                business_id = product_data.get("business_id") or product_data.get("id")
                
                # üîß –î–û–ë–ê–í–õ–ï–ù–û: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π business_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                if not business_id:
                    business_id = f"generated_product_{self._product_counter}_{int(time.time())}"
                    logger.info(f"üîß [Mock] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω business_id: {business_id}")
                else:
                    logger.info(f"üîß [Mock] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π business_id/id: {business_id}")
                
                logger.info(f"üîß [Mock] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {business_id}")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                validation_result = await self.validation_service.validate_product_data(product_data)
                if not validation_result.is_valid:
                    return {
                        "business_id": business_id,
                        "status": "error",
                        "error": validation_result.error_message or "Validation failed"
                    }
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å business_id
                if business_id and await self._check_product_id_exists(business_id):
                    return {
                        "business_id": business_id,
                        "status": "error",
                        "error": f"–ü—Ä–æ–¥—É–∫—Ç —Å business_id '{business_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    }
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                metadata = self.create_product_metadata(product_data)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ IPFS
                metadata_cid = await self.storage_service.upload_json(metadata)
                if not metadata_cid:
                    return {
                        "id": product_id,
                        "status": "error",
                        "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ IPFS"
                    }
                
                # –ó–∞–ø–∏—Å—å –≤ –±–ª–æ–∫—á–µ–π–Ω
                tx_hash = await self.blockchain_service.create_product(metadata_cid)
                if not tx_hash:
                    return {
                        "id": product_id,
                        "metadata_cid": metadata_cid,
                        "status": "error",
                        "error": "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω"
                    }
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ blockchain_id
                blockchain_id = await self.blockchain_service.get_product_id_from_tx(tx_hash)
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ business_id –≤–º–µ—Å—Ç–æ id
                self._products[business_id] = product_data
                self._metadata_cids[business_id] = metadata_cid
                self._blockchain_ids[business_id] = blockchain_id
                self._product_counter += 1
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {business_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return {
                    "business_id": business_id,
                    "id": business_id,  # üîß –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                    "metadata_cid": metadata_cid,
                    "blockchain_id": str(blockchain_id) if blockchain_id else None,
                    "tx_hash": str(tx_hash) if tx_hash else None,
                    "status": "success",
                    "error": None
                }
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                return {
                    "business_id": business_id,
                    "status": "error",
                    "error": str(e)
                }
        
        async def get_product(self, product_id: Union[str, int]) -> Optional[Product]:
            """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID"""
            try:
                if not product_id:
                    return None
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞
                from bot.model.product import Product, OrganicComponent, PriceInfo
                
                product_id_str = str(product_id)
                logger.info(f"üîß [Mock] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if product_id_str in self._products:
                    product_data = self._products[product_id_str]
                    metadata_cid = self._metadata_cids.get(product_id_str)
                    blockchain_id = self._blockchain_ids.get(product_id_str)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Product
                    
                    # –°–æ–∑–¥–∞–µ–º OrganicComponent –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    organic_component = OrganicComponent(
                        biounit_id="test_biounit_1",
                        description_cid="QmTestDescriptionCID1",
                        proportion="100%"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É
                    test_price = PriceInfo(
                        price=50.0,
                        weight=100,
                        weight_unit="g",
                        currency="EUR"
                    )
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product
                    product = Product(
                        business_id=product_id_str,
                        blockchain_id=blockchain_id or int(product_id_str),
                        status=1,  # –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        cid=metadata_cid or "QmMockCID",
                        title=product_data.get("title", ""),
                        organic_components=[organic_component],
                        cover_image_url="QmMockCID",  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º CID –≤–º–µ—Å—Ç–æ URL
                        categories=product_data.get("categories", []),
                        forms=product_data.get("forms", []),
                        species=product_data.get("species", ""),
                        prices=[test_price]
                    )
                    
                    logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id_str} –Ω–∞–π–¥–µ–Ω")
                    return product
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –±–ª–æ–∫—á–µ–π–Ω
                product_data = self.blockchain_service.get_product(product_id)
                if product_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å CID (–ø—Ä–æ–¥—É–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    blockchain_id, seller_address, cid, status = product_data
                    if cid is None:
                        # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
                        logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (CID=None)")
                        return None
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ metadata_service
                    validation_result = self.metadata_service.validate_and_parse_metadata(product_data)
                    if validation_result.is_valid:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                        metadata = validation_result.field_value
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –º–æ–∫–∞
                        
                        test_component = OrganicComponent(
                            biounit_id="test_biounit_1",
                            description_cid="QmTestDescriptionCID1",
                            proportion="100%"
                        )
                        
                        test_price = PriceInfo(
                            price=50.0,
                            weight=100,
                            weight_unit="g",
                            currency="EUR"
                        )
                        
                        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product
                        product = Product(
                            business_id=str(product_id),
                            blockchain_id=product_id,
                            status=1,
                            cid="QmTestCID",
                            title="Test Product from Blockchain",
                            organic_components=[test_component],
                            cover_image_url="QmTestCID",  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º CID –≤–º–µ—Å—Ç–æ URL
                            categories=["mushroom"],
                            forms=["powder"],
                            species="test_species",
                            prices=[test_price]
                        )
                        
                        return product
                    else:
                        self.logger.warning(f"üîß [Mock] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã: {validation_result.error_message}")
                        return None
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
                return None
        
        async def get_all_products(self) -> List[Product]:
            """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
            try:
                logger.info("üîß [Mock] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
                from bot.model.product import Product, OrganicComponent, PriceInfo
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
                test_product = Product(
                    business_id="test_product_001",
                    blockchain_id=1,
                    status=1,
                    cid="QmTestProductCID",
                    title="Test Amanita Product",
                    organic_components=[
                        OrganicComponent(
                            biounit_id="amanita_muscaria",
                            description_cid="QmTestDescCID",
                            proportion="100%"
                        )
                    ],
                    cover_image_url="QmTestImageCID",
                    categories=["mushroom"],
                    forms=["powder"],
                    species="Amanita Muscaria",
                    prices=[
                        PriceInfo(
                            price=50,
                            currency="EUR",
                            weight="100",
                            weight_unit="g",
                            volume=None,
                            volume_unit=None,
                            form="powder"
                        )
                    ]
                )
                
                products = [test_product]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.cache_service.set_cached_item("catalog", {
                    "version": self._catalog_version,
                    "products": products
                }, "catalog")
                
                logger.info(f"üîß [Mock] –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                return products
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
                return []
        
        async def update_product(self, product_id: str, product_data: Dict[str, Any]) -> Dict[str, Any]:
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç"""
            try:
                logger.info(f"üîß [Mock] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
                
                # üîß –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
                if self.check_permissions and self.simulate_permission_denied:
                    logger.info(f"üîß [Mock] –û—Ç–∫–∞–∑ –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                    return {
                        "business_id": product_id,
                        "status": "error",
                        "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞",
                        "error_code": "403"
                    }
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ 403 (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—Ç–æ—Ä–æ–π!)
                if "403_error" in product_id:
                    logger.info(f"üîß [Mock] –ò–º–∏—Ç–∞—Ü–∏—è 403 –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                    return {
                        "business_id": product_id,
                        "status": "error",
                        "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞",
                        "error_code": "403"
                    }
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id –≤–º–µ—Å—Ç–æ id
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                existing_product = await self.get_product(product_id)
                if not existing_product:
                    return {
                        "business_id": product_id,
                        "status": "error",
                        "error": f"–ü—Ä–æ–¥—É–∫—Ç —Å business_id {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    }
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                is_valid = await self.validate_product(product_data)
                if not is_valid:
                    return {
                        "business_id": product_id,
                        "status": "error",
                        "error": f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
                    }
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                new_metadata = self.create_product_metadata(product_data)
                new_metadata["updated_at"] = datetime.now().isoformat()
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ IPFS
                new_metadata_cid = await self.storage_service.upload_json(new_metadata)
                if not new_metadata_cid:
                    return {
                        "id": product_id,
                        "status": "error",
                        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ IPFS –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}"
                    }
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self._products[product_id] = product_data
                self._metadata_cids[product_id] = new_metadata_cid
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return {
                    "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id
                    "metadata_cid": new_metadata_cid,
                    "blockchain_id": None,  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –≤ Mock
                    "tx_hash": None,
                    "status": "success",
                    "error": None
                }
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
                return {
                    "business_id": product_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id
                    "status": "error",
                    "error": str(e)
                }
        
        async def update_product_status(self, product_id: int, new_status: int) -> bool:
            """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞"""
            try:
                logger.info(f"üîß [Mock] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –Ω–∞ {new_status}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                existing_product = await self.get_product(str(product_id))
                if not existing_product:
                    self.logger.error(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
                tx_hash = await self.blockchain_service.update_product_status(
                    "mock_private_key",
                    product_id,
                    new_status
                )
                
                if not tx_hash:
                    self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                    return False
                
                logger.info(f"üîß [Mock] –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}")
                return True
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
                return False
        
        async def deactivate_product(self, product_id: int) -> bool:
            """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç"""
            try:
                logger.info(f"üîß [Mock] –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                
                tx_hash = await self.blockchain_service.deactivate_product(product_id)
                if not tx_hash:
                    self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                    return False
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                return True
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
                return False
        
        # === –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò –ò –ü–†–û–í–ï–†–ö–ò ===
        
        async def validate_product(self, product_data: Dict[str, Any]) -> bool:
            """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
            try:
                logger.info(f"üîß [Mock] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['title', 'organic_components', 'categories', 'cover_image_url', 'forms', 'species', 'prices']
                for field in required_fields:
                    if field not in product_data:
                        self.logger.error(f"Missing required field: {field}")
                        return False
                    
                    if not product_data[field]:
                        self.logger.error(f"Empty required field: {field}")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã
                if not isinstance(product_data['prices'], list) or not product_data['prices']:
                    self.logger.error("–¶–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                    return False
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
                for price in product_data['prices']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º price - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
                    if not isinstance(price.get('price'), (int, float)) or price.get('price') <= 0:
                        self.logger.error(f"Invalid price: {price.get('price')} - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                        return False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º currency - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–æ–π
                    valid_currencies = ['USD', 'EUR', 'GBP', 'RUB']
                    if price.get('currency') not in valid_currencies:
                        self.logger.error(f"Invalid currency: {price.get('currency')} - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ {valid_currencies}")
                        return False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º weight - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
                    if not isinstance(price.get('weight'), (int, float)) or price.get('weight') <= 0:
                        self.logger.error(f"Invalid weight: {price.get('weight')} - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                        return False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º weight_unit - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ–π
                    valid_weight_units = ['g', 'kg', 'ml', 'l', 'capsules', 'tablets']
                    if price.get('weight_unit') not in valid_weight_units:
                        self.logger.error(f"Invalid weight_unit: {price.get('weight_unit')} - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ {valid_weight_units}")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—ã
                if not isinstance(product_data['forms'], list) or not product_data['forms']:
                    self.logger.error("–§–æ—Ä–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º IPFS CID
                if not self.storage_service.is_valid_cid(product_data['cover_image_url']):
                    self.logger.error("Invalid cover image CID")
                    return False
                
                logger.info("üîß [Mock] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                return False
        
        async def _check_product_id_exists(self, product_id: Union[str, int]) -> bool:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ business_id"""
            try:
                product_id_str = str(product_id)
                logger.info(f"üîß [Mock] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ business_id: {product_id_str}")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ 400
                if product_id_str.endswith("400_error"):
                    logger.info(f"üîß [Mock] –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ 400 –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id_str}")
                    return False
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                # –í Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                if product_id_str in self._products:
                    logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç —Å business_id {product_id_str} –Ω–∞–π–¥–µ–Ω –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                    return True
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id_str} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                return False
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
                return False
        
        def _check_blockchain_product_exists(self, blockchain_id: int) -> bool:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
            try:
                logger.info(f"üîß [Mock] –ü—Ä–æ–≤–µ—Ä–∫–∞ blockchain ID: {blockchain_id}")
                
                exists = self.blockchain_service.product_exists_in_blockchain(blockchain_id)
                logger.info(f"üîß [Mock] Blockchain ID {blockchain_id} {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
                return exists
                
            except Exception as e:
                self.logger.warning(f"üîß [Mock] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ blockchain ID {blockchain_id}: {e}")
                return False
        
        # === –ú–ï–¢–û–î–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ===
        
        def _is_cache_valid(self, timestamp: datetime, cache_type: str) -> bool:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
            if not timestamp:
                return False
            
            cache_ttl = {
                'catalog': timedelta(minutes=5),
                'description': timedelta(hours=24),
                'image': timedelta(hours=12)
            }
            
            return datetime.utcnow() - timestamp < cache_ttl.get(cache_type, timedelta(minutes=5))
        
        def _update_catalog_cache(self, version: int, products: List[Product]) -> None:
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –∫–∞—Ç–∞–ª–æ–≥–∞"""
            self.cache_service.set_cached_item("catalog", {
                "version": version,
                "products": products
            }, "catalog")
            logger.info(f"üîß [Mock] –ö—ç—à –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        def clear_cache(self, cache_type: Optional[str] = None) -> None:
            """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
            self.cache_service.invalidate_cache(cache_type)
            logger.info(f"üîß [Mock] –ö—ç—à –æ—á–∏—â–µ–Ω: {cache_type if cache_type else '–≤—Å–µ'}")
        
        def get_catalog_version(self) -> int:
            """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞"""
            try:
                version = self.blockchain_service.get_catalog_version()
                logger.info(f"üîß [Mock] –í–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {version}")
                return version
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
                return 0
        
        # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò ===
        
        def create_product_metadata(self, product_data: Dict[str, Any]) -> Dict[str, Any]:
            """–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
            try:
                logger.info("üîß [Mock] –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ business_id, —Ç–∞–∫ –∏ id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                business_id = product_data.get("business_id") or product_data.get("id")
                if not business_id:
                    raise KeyError("business_id –∏–ª–∏ id")
                
                metadata = {
                    "business_id": business_id,
                    "title": product_data["title"],
                    "organic_components": product_data["organic_components"],
                    "cover_image_url": product_data["cover_image_url"],
                    "categories": product_data["categories"],
                    "forms": product_data["forms"],
                    "species": product_data["species"],
                    "prices": product_data["prices"],
                    "created_at": datetime.now().isoformat()
                }
                
                logger.info("üîß [Mock] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return metadata
                
            except KeyError as e:
                self.logger.error(f"üîß [Mock] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {e}")
                raise
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
                raise
        
        def upload_product_metadata(self, product_metadata: Dict[str, Any]) -> str:
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
            try:
                logger.info("üîß [Mock] –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞")
                cid = self.storage_service.upload_json(product_metadata)
                logger.info(f"üîß [Mock] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {cid}")
                return cid
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
                raise
        
        def upload_media_file(self, file_path: str) -> str:
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª"""
            try:
                logger.info(f"üîß [Mock] –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {file_path}")
                cid = self.storage_service.upload_media_file(file_path)
                logger.info(f"üîß [Mock] –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {cid}")
                return cid
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
                raise
        
        def create_product_on_chain(self, ipfs_cid: str) -> str:
            """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ"""
            try:
                logger.info(f"üîß [Mock] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {ipfs_cid}")
                
                if not self._validate_ipfs_cid(ipfs_cid):
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CID: {ipfs_cid}")
                
                tx_hash = self.blockchain_service.create_product(ipfs_cid)
                if not tx_hash:
                    raise Exception("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {tx_hash}")
                return tx_hash
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ: {e}")
                raise
        
        # === –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–û–î–£–ö–¢–û–í ===
        
        def _process_product_metadata(self, product_id: Union[int, str], ipfs_cid: str, active: bool) -> Optional[Product]:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
            try:
                logger.info(f"üîß [Mock] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è CID
                validation_result = self.validation_service.validate_cid(ipfs_cid)
                if not validation_result["is_valid"]:
                    self.logger.error(f"üîß [Mock] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CID –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {ipfs_cid}")
                    return None
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                metadata = self.storage_service.download_json(ipfs_cid)
                if not isinstance(metadata, dict):
                    self.logger.error(f"üîß [Mock] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {product_id}")
                    return None
                
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Product —Å business_id –∏ blockchain_id
                product = Product(
                    business_id=str(product_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id –∫–∞–∫ business_id
                    blockchain_id=product_id,      # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id –∫–∞–∫ blockchain_id
                    status=1 if active else 0,
                    cid=ipfs_cid,
                    title=metadata.get('title', ''),
                    description=None,
                    description_cid=metadata.get('description_cid', ''),
                    cover_image_url=self._get_cached_image(metadata.get('cover_image_url', '')),
                    categories=metadata.get('categories', []),
                    forms=metadata.get('forms', []),
                    species=metadata.get('species', ''),
                    prices=[]
                )
                
                logger.info(f"üîß [Mock] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                return product
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
                return None
        
        async def _deserialize_product(self, product_data: tuple) -> Optional[Product]:
            """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –±–ª–æ–∫—á–µ–π–Ω–∞"""
            try:
                if not hasattr(product_data, '__getitem__') or len(product_data) < 4:
                    self.logger.error(f"üîß [Mock] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ product_data: {product_data}")
                    return None
                
                product_id = product_data[0]
                ipfs_cid = product_data[2]
                is_active = bool(product_data[3])
                
                logger.info(f"üîß [Mock] –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}, {ipfs_cid}, {is_active}")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                metadata = self.storage_service.download_json(ipfs_cid)
                if not metadata:
                    self.logger.warning(f"üîß [Mock] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
                    return None
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ metadata_service
                validation_result = self.metadata_service.validate_and_parse_metadata(metadata)
                if validation_result.is_valid:
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –º–æ–∫–∞
                    from bot.model.product import Product, OrganicComponent, PriceInfo
                    
                    test_component = OrganicComponent(
                        biounit_id="test_biounit_1",
                        description_cid="QmTestDescriptionCID1",
                        proportion="100%"
                    )
                    
                    test_price = PriceInfo(
                        price=50.0,
                        weight=100,
                        weight_unit="g",
                        currency="EUR"
                    )
                    
                    product = Product(
                        id=product_id,
                        alias=str(product_id),
                        status=1 if is_active else 0,
                        cid=ipfs_cid,
                        title="Test Product from Mock",
                        organic_components=[test_component],
                        cover_image_url="https://mocked.ipfs/test.jpg",
                        categories=["mushroom"],
                        forms=["powder"],
                        species="test_species",
                        prices=[test_price]
                    )
                else:
                    self.logger.warning(f"üîß [Mock] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã: {validation_result.error_message}")
                    return None
                
                logger.info(f"üîß [Mock] –ü—Ä–æ–¥—É–∫—Ç {product_id} –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω")
                return product
                
            except Exception as e:
                self.logger.error(f"üîß [Mock] –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                return None
        
        # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° IPFS CID ===
        
        def _validate_ipfs_cid(self, cid: str) -> bool:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IPFS CID"""
            if not cid:
                return False
            import re
            pattern = re.compile(r'^(Qm[1-9A-HJ-NP-Za-km-z]{44}|bafy[A-Za-z2-7]{55})$')
            return bool(pattern.match(cid))
        
        def _get_cached_description(self, description_cid: str) -> Optional[Description]:
            """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
            return self.cache_service.get_description_by_cid(description_cid)
        
        def _get_cached_image(self, image_cid: str) -> Optional[str]:
            """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
            return self.cache_service.get_image_url_by_cid(image_cid)
        
        # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
        
        def clear_state(self):
            """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
            self._products.clear()
            self._metadata_cids.clear()
            self._blockchain_ids.clear()
            self._product_counter = 1
            self._catalog_version = 1
            self._cache_data.clear()
            logger.info("üîß [Mock] –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
        
        def get_internal_state(self) -> Dict[str, Any]:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
            return {
                "products_count": len(self._products),
                "metadata_cids_count": len(self._metadata_cids),
                "blockchain_ids_count": len(self._blockchain_ids),
                "product_counter": self._product_counter,
                "catalog_version": self._catalog_version
            }
    
    return MockProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )

@pytest.fixture(scope="function")
def mock_registry_service_with_failing_storage(mock_blockchain_service, mock_validation_service, mock_account_service, mock_ipfs_storage_failing):
    """ProductRegistryService —Å –º–æ–∫–∞–Ω–Ω—ã–º IPFS storage, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
    from bot.services.product.registry import ProductRegistryService
    
    return ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage_failing,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )

@pytest.fixture(scope="function")
def mock_product_registry_service_with_failing_validation(mock_blockchain_service, mock_ipfs_storage, mock_account_service, mock_validation_service_failing):
    """ProductRegistryService —Å –º–æ–∫–∞–Ω–Ω—ã–º validation service, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
    from bot.services.product.registry import ProductRegistryService
    
    return ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage,
        validation_service=mock_validation_service_failing,
        account_service=mock_account_service
    )


# === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ - –ù–û–í–´–ï –§–ò–ö–°–¢–£–†–´ ===

@pytest.fixture(scope="function")
def integration_storage_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è storage –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è DevOps"""
    # üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è DevOps –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    storage_type = os.getenv("INTEGRATION_STORAGE", "mock").lower()
    print(f"üîç [DEVOPS] INTEGRATION_STORAGE={storage_type}")
    
    # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    pinata_api_key = os.getenv("PINATA_API_KEY")
    pinata_secret_key = os.getenv("PINATA_SECRET_KEY")
    arweave_private_key = os.getenv("ARWEAVE_PRIVATE_KEY")
    
    print(f"üîç [DEVOPS] PINATA_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if pinata_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîç [DEVOPS] PINATA_SECRET_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if pinata_secret_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîç [DEVOPS] ARWEAVE_PRIVATE_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if arweave_private_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    configs = {
        "mock": {
            "service": _create_mock_storage(),
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: Mock IPFS/Arweave (–±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)",
            "devops_info": {
                "type": "mock",
                "performance": "fast",
                "cost": "free",
                "api_calls": "none"
            }
        },
        "pinata": {
            "service": _get_real_pinata_storage(),
            "description": "–†–µ–∞–ª—å–Ω—ã–π Pinata IPFS (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)",
            "devops_info": {
                "type": "real",
                "performance": "slow",
                "cost": "budget",
                "api_calls": "pinata_api"
            }
        },
        "arweave": {
            "service": _get_real_arweave_storage(),
            "description": "–†–µ–∞–ª—å–Ω—ã–π Arweave (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)",
            "devops_info": {
                "type": "real",
                "performance": "slow",
                "cost": "budget",
                "api_calls": "arweave_api"
            }
        }
    }
    
    if storage_type not in configs:
        print(f"‚ö†Ô∏è [DEVOPS] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø storage: {storage_type}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
        storage_type = "mock"
    
    selected_config = configs[storage_type]
    devops_info = selected_config["devops_info"]
    
    # üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è DevOps –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print(f"üîß [DEVOPS] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: {selected_config['description']}")
    print(f"üìä [DEVOPS] Storage –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {devops_info}")
    print(f"üîç [DEVOPS] –ü—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {storage_type} (performance: {devops_info['performance']}, cost: {devops_info['cost']})")
    
    return selected_config


def _create_mock_storage():
    """–°–æ–∑–¥–∞–Ω–∏–µ mock storage —Å–µ—Ä–≤–∏—Å–∞ (–Ω–µ —Ñ–∏–∫—Å—Ç—É—Ä–∞)"""
    mock_storage = Mock()
    mock_storage.upload_file = AsyncMock(return_value="QmMockHash123")
    mock_storage.upload_json = AsyncMock(return_value="QmMockHash456")
    return mock_storage


def _get_real_pinata_storage():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Pinata storage (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    try:
        from bot.services.core.storage.pinata import SecurePinataUploader
        pinata_api_key = os.getenv("PINATA_API_KEY")
        pinata_secret_key = os.getenv("PINATA_SECRET_KEY")
        
        if not pinata_api_key or not pinata_secret_key:
            print("‚ö†Ô∏è [DEVOPS] PINATA_API_KEY –∏–ª–∏ PINATA_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
            return _create_mock_storage()
        
        print("‚úÖ [DEVOPS] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π Pinata IPFS (API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã)")
        return SecurePinataUploader()
        
    except Exception as e:
        print(f"‚ùå [DEVOPS] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinata: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
        return _create_mock_storage()


def _get_real_arweave_storage():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Arweave storage (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    try:
        from bot.services.core.storage.ar_weave import ArWeaveUploader
        arweave_private_key = os.getenv("ARWEAVE_PRIVATE_KEY")
        
        if not arweave_private_key:
            print("‚ö†Ô∏è [DEVOPS] ARWEAVE_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
            return _create_mock_storage()
        
        print("‚úÖ [DEVOPS] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π Arweave (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω)")
        return ArWeaveUploader()
        
    except Exception as e:
        print(f"‚ùå [DEVOPS] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Arweave: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
        return _create_mock_storage()


@pytest.fixture(scope="function")
def integration_registry_service_real_blockchain(integration_storage_config):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º storage"""
    from bot.dependencies import get_product_registry_service
    from bot.services.core.blockchain import BlockchainService
    
    # ‚úÖ –ë–ª–æ–∫—á–µ–π–Ω –í–°–ï–ì–î–ê —Ä–µ–∞–ª—å–Ω—ã–π –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    try:
        blockchain_service = BlockchainService()
        logger.info("‚úÖ BlockchainService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BlockchainService: {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞: {e}")
    
    # üîß Storage –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    storage_service = integration_storage_config["service"]
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ DI —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º storage
    registry_service = get_product_registry_service(
        blockchain_service=blockchain_service,      # ‚úÖ –í–°–ï–ì–î–ê —Ä–µ–∞–ª—å–Ω—ã–π
        storage_service=storage_service,            # üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π
        validation_service=mock_validation_service(),
        account_service=mock_account_service()
    )
    
    logger.info("‚úÖ IntegrationRegistryService —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º")
    return registry_service


@pytest.fixture(scope="function")
def seller_account():
    """–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    seller_private_key = os.getenv("SELLER_PRIVATE_KEY")
    if not seller_private_key:
        pytest.skip("SELLER_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    
    try:
        from eth_account import Account
        account = Account.from_key(seller_private_key)
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {account.address}")
        return account
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")


@pytest.fixture(scope="function")
def test_products():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîß [Test Products] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    products = [
        {
            "id": "amanita1",
            "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                    "proportion": "100%"
                }
            ],
            "forms": ["mixed slices"],
            "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
            "species": "Amanita muscaria",
            "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
        },
        {
            "id": "amanita2", 
            "title": "Amanita pantherina ‚Äî premium capsules",
            "organic_components": [
                {
                    "biounit_id": "amanita_pantherina",
                    "description_cid": "QmYXGiCLB1sPtkoskNWA5dCo8d9uW6RVVS94uq2xf6awQ7",
                    "proportion": "100%"
                }
            ],
            "forms": ["capsules"],
            "categories": ["mushroom", "energy", "focus"],
            "species": "Amanita pantherina",
            "prices": [{"weight": "60", "weight_unit": "capsules", "price": "120", "currency": "EUR"}]
        }
    ]
    
    yield products
    
    print("üßπ [Test Products] –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã")

# === –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ===

@pytest.fixture(scope="function")
async def preloaded_products_basic(mock_product_registry_service):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    products_data = [
        {
            "id": "preload_basic_001",
            "title": "Basic Test Product 1",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": "QmBasicTestCID001",
                    "proportion": "100%"
                }
            ],
            "cover_image_url": "QmBasicCoverCID001",
            "categories": ["mushroom"],
            "forms": ["powder"],
            "species": "Amanita muscaria",
            "prices": [
                {
                    "weight": "100",
                    "weight_unit": "g",
                    "price": "50",
                    "currency": "EUR"
                }
            ]
        },
        {
            "id": "preload_basic_002",
            "title": "Basic Test Product 2",
            "organic_components": [
                {
                    "biounit_id": "amanita_pantherina",
                    "description_cid": "QmBasicTestCID002",
                    "proportion": "100%"
                }
            ],
            "cover_image_url": "QmBasicCoverCID002",
            "categories": ["mushroom"],
            "forms": ["capsules"],
            "species": "Amanita pantherina",
            "prices": [
                {
                    "weight": "60",
                    "weight_unit": "capsules",
                    "price": "75",
                    "currency": "EUR"
                }
            ]
        }
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ mock —Å–µ—Ä–≤–∏—Å
    created_products = []
    for product_data in products_data:
        result = await mock_product_registry_service.create_product(product_data)
        if result["status"] == "success":
            created_products.append(result)
            print(f"üîß [Preload] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_data['id']}")
        else:
            print(f"‚ö†Ô∏è [Preload] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_data['id']}: {result['error']}")
    
    return created_products

@pytest.fixture(scope="function")
async def preloaded_products_extended(mock_product_registry_service):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    products_data = [
        {
            "id": "preload_extended_001",
            "title": "Extended Test Product 1",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": "QmExtendedTestCID001",
                    "proportion": "70%"
                },
                {
                    "biounit_id": "amanita_pantherina",
                    "description_cid": "QmExtendedTestCID002",
                    "proportion": "30%"
                }
            ],
            "cover_image_url": "QmExtendedCoverCID001",
            "categories": ["mushroom", "extended"],
            "forms": ["powder", "capsules"],
            "species": "Amanita muscaria",
            "prices": [
                {
                    "weight": "200",
                    "weight_unit": "g",
                    "price": "120",
                    "currency": "EUR"
                },
                {
                    "weight": "100",
                    "weight_unit": "capsules",
                    "price": "80",
                    "currency": "EUR"
                }
            ]
        },
        {
            "id": "preload_extended_002",
            "title": "Extended Test Product 2",
            "organic_components": [
                {
                    "biounit_id": "blue_lotus",
                    "description_cid": "QmExtendedTestCID003",
                    "proportion": "100%"
                }
            ],
            "cover_image_url": "QmExtendedCoverCID002",
            "categories": ["flower", "extended"],
            "forms": ["powder"],
            "species": "Blue Lotus",
            "prices": [
                {
                    "weight": "50",
                    "weight_unit": "ml",
                    "price": "45",
                    "currency": "EUR"
                }
            ]
        }
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ mock —Å–µ—Ä–≤–∏—Å
    created_products = []
    for product_data in products_data:
        result = await mock_product_registry_service.create_product(product_data)
        if result["status"] == "success":
            created_products.append(result)
            print(f"üîß [Preload] –°–æ–∑–¥–∞–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {product_data['id']}")
        else:
            print(f"‚ö†Ô∏è [Preload] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_data['id']}: {result['error']}")
    
    return created_products

@pytest.fixture(scope="function")
async def preloaded_products_validation(mock_product_registry_service):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    products_data = [
        {
            "id": "preload_validation_001",
            "title": "Validation Test Product 1",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": "QmValidationTestCID001",
                    "proportion": "100%"
                }
            ],
            "cover_image_url": "QmValidationCoverCID001",
            "categories": ["mushroom"],
            "forms": ["powder"],
            "species": "Amanita muscaria",
            "prices": [
                {
                    "weight": "100",
                    "weight_unit": "g",
                    "price": "50",
                    "currency": "EUR"
                }
            ]
        },
        {
            "id": "preload_validation_002",
            "title": "Validation Test Product 2",
            "organic_components": [
                {
                    "biounit_id": "amanita_pantherina",
                    "description_cid": "QmValidationTestCID002",
                    "proportion": "100%"
                }
            ],
            "cover_image_url": "QmValidationCoverCID002",
            "categories": ["mushroom"],
            "forms": ["capsules"],
            "species": "Amanita pantherina",
            "prices": [
                {
                    "weight": "60",
                    "weight_unit": "capsules",
                    "price": "75",
                    "currency": "EUR"
                }
            ]
        }
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ mock —Å–µ—Ä–≤–∏—Å
    created_products = []
    for product_data in products_data:
        result = await mock_product_registry_service.create_product(product_data)
        if result["status"] == "success":
            created_products.append(result)
            print(f"üîß [Preload] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {product_data['id']}")
        else:
            print(f"‚ö†Ô∏è [Preload] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {product_data['id']}: {result['error']}")
    
    return created_products

@pytest.fixture(scope="function")
def preloaded_categories():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    print("üîß [Preload] –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    categories = [
        "mushroom",
        "flower", 
        "test",
        "validation",
        "extended",
        "mental health",
        "focus",
        "ADHD support",
        "mental force",
        "energy",
        "relaxation",
        "sleep",
        "immunity",
        "digestion"
    ]
    
    print(f"üîß [Preload] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    yield categories
    
    print("üßπ [Preload] –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã")

@pytest.fixture(scope="function")
def preloaded_forms():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    print("üîß [Preload] –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    forms = [
        "powder",
        "capsules",
        "tincture",
        "tea",
        "extract",
        "mixed slices",
        "dried",
        "fresh",
        "oil",
        "cream"
    ]
    
    print(f"üîß [Preload] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(forms)} —Ñ–æ—Ä–º")
    yield forms
    
    print("üßπ [Preload] –§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã")

@pytest.fixture(scope="function")
def preloaded_species():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    print("üîß [Preload] –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    species = [
        "Amanita muscaria",
        "Amanita pantherina",
        "Blue Lotus",
        "Chaga",
        "Cordyceps militaris",
        "Lion's Mane",
        "Reishi",
        "Chamomile",
        "Lavender",
        "Peppermint"
    ]
    
    print(f"üîß [Preload] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(species)} –≤–∏–¥–æ–≤")
    yield species
    
    print("üßπ [Preload] –í–∏–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã")

@pytest.fixture(scope="function")
def preloaded_biounits():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    print("üîß [Preload] –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü")
    
    biounits = [
        "amanita_muscaria",
        "amanita_pantherina",
        "blue_lotus",
        "chaga",
        "cordyceps_militaris",
        "lions_mane",
        "reishi",
        "chamomile",
        "lavender",
        "peppermint"
    ]
    
    print(f"üîß [Preload] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(biounits)} –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü")
    yield biounits
    
    print("üßπ [Preload] –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã")

@pytest.fixture(scope="function")
async def preloaded_all_data(mock_product_registry_service):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    basic_products = await preloaded_products_basic(mock_product_registry_service)
    extended_products = await preloaded_products_extended(mock_product_registry_service)
    validation_products = await preloaded_products_validation(mock_product_registry_service)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    categories = preloaded_categories()
    forms = preloaded_forms()
    species = preloaded_species()
    biounits = preloaded_biounits()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    all_data = {
        "products": {
            "basic": basic_products,
            "extended": extended_products,
            "validation": validation_products
        },
        "reference": {
            "categories": categories,
            "forms": forms,
            "species": species,
            "biounits": biounits
        }
    }
    
    print(f"üîß [Preload] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: {len(basic_products)} + {len(extended_products)} + {len(validation_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {len(forms)} —Ñ–æ—Ä–º")
    
    return all_data
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ yield –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä–∞—Ö
    print("üßπ [Preload] –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

@pytest.fixture(params=["basic", "extended", "validation"])
def product_type_parametrized(request):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    Scope: function - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.
    """
    product_type = request.param
    print(f"üîß [Preload] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product_type}")
    
    return product_type

@pytest.fixture
def category_for_basic():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    return ["mushroom", "flower"]

@pytest.fixture
def category_for_extended():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    return ["mushroom", "flower"]

@pytest.fixture
def category_for_validation():
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return ["mushroom"]

@pytest.fixture
def form_for_basic():
    """–§–æ—Ä–º—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    return ["powder", "capsules", "tincture"]

@pytest.fixture
def form_for_extended():
    """–§–æ—Ä–º—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    return ["powder", "capsules"]

@pytest.fixture
def form_for_validation():
    """–§–æ—Ä–º—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return ["powder", "capsules"]

# === –¢–ï–°–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –§–ò–ö–°–¢–£–† ===

def test_integration_storage_config_mock():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_storage_config –≤ mock —Ä–µ–∂–∏–º–µ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_storage = os.getenv("INTEGRATION_STORAME")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock —Ä–µ–∂–∏–º
        os.environ["INTEGRATION_STORAGE"] = "mock"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
        config = integration_storage_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert "service" in config
        assert "description" in config
        assert "mock" in config["description"].lower()
        
        print("‚úÖ –¢–µ—Å—Ç integration_storage_config mock —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if original_storage:
            os.environ["INTEGRATION_STORAGE"] = original_storage
        else:
            os.environ.pop("INTEGRATION_STORAGE", None)


def test_preloaded_fixtures():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
    categories = preloaded_categories()
    forms = preloaded_forms()
    species = preloaded_species()
    biounits = preloaded_biounits()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    assert isinstance(categories, list)
    assert isinstance(forms, list)
    assert isinstance(species, list)
    assert isinstance(biounits, list)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    assert len(categories) > 0
    assert len(forms) > 0
    assert len(species) > 0
    assert len(biounits) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert "mushroom" in categories
    assert "powder" in forms
    assert "Amanita muscaria" in species
    assert "amanita_muscaria" in biounits
    
    print("‚úÖ –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω")


@pytest.mark.asyncio
async def test_preloaded_products_fixtures(mock_product_registry_service):
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
    basic_products = await preloaded_products_basic(mock_product_registry_service)
    extended_products = await preloaded_products_extended(mock_product_registry_service)
    validation_products = await preloaded_products_validation(mock_product_registry_service)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    assert isinstance(basic_products, list)
    assert isinstance(extended_products, list)
    assert isinstance(validation_products, list)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    assert len(basic_products) > 0
    assert len(extended_products) > 0
    assert len(validation_products) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
    for product in basic_products + extended_products + validation_products:
        assert "status" in product
        assert product["status"] == "success"
        assert "id" in product
    
    print("‚úÖ –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")


def test_integration_storage_config_fallback():
    """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_storage_config"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_storage = os.getenv("INTEGRATION_STORAGE")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        os.environ["INTEGRATION_STORAGE"] = "invalid_type"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
        config = integration_storage_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –Ω–∞ mock
        assert "service" in config
        assert "description" in config
        assert "mock" in config["description"].lower()
        
        print("‚úÖ –¢–µ—Å—Ç integration_storage_config fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if original_storage:
            os.environ["INTEGRATION_STORAGE"] = original_storage
        else:
            os.environ.pop("INTEGRATION_STORAGE", None)


@pytest.fixture(scope="function")
def web3():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è Web3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (mock –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤)"""
    from unittest.mock import Mock
    
    mock_web3 = Mock()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock Web3
    mock_web3.eth.contract.return_value = Mock()
    mock_web3.eth.get_transaction_receipt.return_value = {
        'status': 1,
        'blockNumber': 12345,
        'transactionHash': '0xmock_transaction_hash'
    }
    mock_web3.eth.get_transaction.return_value = {
        'from': '0x1234567890abcdef1234567890abcdef12345678',
        'to': '0xcontract_address',
        'value': 0,
        'gas': 21000,
        'gasPrice': 20000000000
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –¥–ª—è gas estimation
    mock_web3.eth.estimate_gas.return_value = 21000
    
    return mock_web3


@pytest.fixture(scope="function")
def invite_nft_contract(web3):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (mock –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤)"""
    from unittest.mock import Mock
    
    mock_contract = Mock()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    mock_contract.functions.isSeller.return_value.call.return_value = False
    mock_contract.functions.userInviteCount.return_value.call.return_value = 0
    mock_contract.functions.isUserActivated.return_value.call.return_value = False
    mock_contract.functions.getAllActivatedUsers.return_value.call.return_value = []
    mock_contract.functions.batchValidateInviteCodes.return_value.call.return_value = ([], [])
    mock_contract.functions.getTokenIdByInviteCode.return_value.call.return_value = 0
    mock_contract.functions.getInviteCodeByTokenId.return_value.call.return_value = ""
    mock_contract.functions.isInviteTokenUsed.return_value.call.return_value = False
    mock_contract.functions.getInviteCreatedAt.return_value.call.return_value = 0
    mock_contract.functions.getInviteExpiry.return_value.call.return_value = 0
    mock_contract.functions.getInviteMinter.return_value.call.return_value = "0x0000000000000000000000000000000000000000"
    mock_contract.functions.getInviteFirstOwner.return_value.call.return_value = "0x0000000000000000000000000000000000000000"
    mock_contract.functions.validateInviteCode.return_value.call.return_value = (False, "not_found")
    
    return mock_contract


@pytest.fixture(scope="function")
def mock_blockchain_service_with_invite_nft(mock_blockchain_service):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è MockBlockchainService —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π InviteNFT"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π mock_blockchain_service, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω
    # –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ InviteNFT –º–µ—Ç–æ–¥–æ–≤
    return mock_blockchain_service


@pytest.fixture(scope="function")
def real_blockchain_service():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ BlockchainService (–¥–ª—è integration —Ç–µ—Å—Ç–æ–≤)"""
    from bot.services.core.blockchain import BlockchainService
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤
    # –í —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
    return BlockchainService()


# === –¢–ï–°–¢–û–í–û–ï FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===

@pytest.fixture(scope="function")
def test_app(mock_product_registry_service):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    from fastapi.testclient import TestClient
    from bot.api.main import create_api_app
    from unittest.mock import Mock
    
    # –°–æ–∑–¥–∞–µ–º mock ServiceFactory
    mock_service_factory = Mock()
    mock_service_factory.create_product_registry_service.return_value = mock_product_registry_service
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    app = create_api_app(service_factory=mock_service_factory)
    
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ middleware
    from fastapi import FastAPI
    from fastapi.middleware.cors import CORSMiddleware
    
    # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    test_app = FastAPI(
        title="Amanita API Test",
        description="–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        version="1.0.0"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ CORS middleware
    test_app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    from bot.api.routes import api_keys, products, media, description
    test_app.include_router(api_keys.router)
    test_app.include_router(products.router)
    test_app.include_router(media.router)
    test_app.include_router(description.router)
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from bot.api.dependencies import get_product_registry_service
    
    def override_get_product_registry_service():
        return mock_product_registry_service
    
    test_app.dependency_overrides[get_product_registry_service] = override_get_product_registry_service
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    with TestClient(test_app) as client:
        yield client
    
    # –û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    test_app.dependency_overrides.clear()
    

