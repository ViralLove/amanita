"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ Amanita
"""
import pytest
import logging
import os
from unittest.mock import Mock, AsyncMock
from bot.services.core import blockchain

# –Ø–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è pytest-asyncio –ø–ª–∞–≥–∏–Ω–∞
pytest_plugins = ["pytest_asyncio"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –°–æ–∑–¥–∞–µ–º logger –¥–ª—è –º–æ–∫–æ–≤
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
AMANITA_API_KEY = os.getenv("AMANITA_API_KEY", "test-api-key-12345")
AMANITA_API_SECRET = os.getenv("AMANITA_API_SECRET", "default-secret-key-change-in-production")
API_URL = os.getenv("AMANITA_API_URL", "http://localhost:8000")

# API-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
import httpx
from typing import AsyncGenerator


@pytest.fixture(autouse=True)
def setup_test_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


@pytest.fixture
def mock_blockchain_service(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService (—Ç–æ–ª—å–∫–æ –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)"""
    
    class MockBlockchainService:
        def __init__(self):
            self.create_product_called = False
            self.seller_key = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö blockchain ID
            self._next_blockchain_id = 1
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            self.product_statuses = {}
            # –ù–æ–≤–æ–µ: —Å–≤—è–∑—å –º–µ–∂–¥—É blockchain ID –∏ IPFS CID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MockIPFSStorage
            self.product_cids = {}
            # –°—Å—ã–ª–∫–∞ –Ω–∞ storage service –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.storage_service = None
        
        def _generate_next_blockchain_id(self):
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π blockchain ID"""
            next_id = self._next_blockchain_id
            self._next_blockchain_id += 1
            logger.info(f"üî¢ [MockBlockchainService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π blockchain ID: {next_id}")
            return next_id
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1)
        def get_catalog_version(self):
            return 1

        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 9 —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ProductRegistry.Product)
        def get_all_products(self):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ 9 —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ProductRegistry.Product)
            –£–±—Ä–∞–ª–∏ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å ID 42 –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            """
            return [
                (1, "0x0000000000000000000000000000000000000001", "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG", True),
                (2, "0x0000000000000000000000000000000000000002", "QmbTBHeByJwUP9JyTo2GcHzj1YwzVww6zXrEDFt3zgdwQ1", True),
                (3, "0x0000000000000000000000000000000000000003", "QmUPHsHyuDHKyVbduvqoooAYShFCSfYgcnEioxNNqgZK2B", True),
                (4, "0x0000000000000000000000000000000000000004", "Qmat1agJkdYK5uX8YZoJvQnQ3zzqSaavmzUEhpEfQHD4gz", True),
                (5, "0x0000000000000000000000000000000000000005", "Qmbkp4owyjyjRuYGd7b1KfVjo5bBvCutgYdCi7qKd3ZPoy", True),
                (6, "0x0000000000000000000000000000000000000006", "QmWwjNvD8HX6WB2TLsxiEhciMJCHRfiZBw9G2wgfqKyPbd", True),
                (7, "0x0000000000000000000000000000000000000007", "QmbGrAqeugUxZZxWojavu4rbHdk5XNmSsSv92UV8FKjyHa", True),
                (8, "0x0000000000000000000000000000000000000008", "QmdmJFdMQXRpp3qNRTLYqsR1kFLYhTSRA8YMfd5JvNi85S", True)
                # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å ID 42 - —Ç–µ–ø–µ—Ä—å –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
            ]
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ _check_product_id_exists)
        def get_products_by_current_seller_full(self):
            return []
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ _check_blockchain_product_exists)
        def product_exists_in_blockchain(self, blockchain_id):
            return False
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        async def get_all_products_async(self):
            return self.get_all_products()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ id. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ProductRegistry.Product.
        def get_product(self, product_id):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ id. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ProductRegistry.Product.
            –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ ID.
            """
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ product_statuses
            status = self.product_statuses.get(product_id, False)
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ product_statuses
            logger.info(f"üîç [MockBlockchainService] get_product –≤—ã–∑–≤–∞–Ω –¥–ª—è ID={product_id}")
            logger.info(f"   - product_statuses: {self.product_statuses}")
            logger.info(f"   - status –¥–ª—è ID {product_id}: {status}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: status –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!
            # –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å product_statuses
            logger.warning(f"üö® [MockBlockchainService] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: status={status} –¥–ª—è ID={product_id}")
            logger.warning(f"üö® [MockBlockchainService] product_statuses —Å–æ–¥–µ—Ä–∂–∏—Ç: {self.product_statuses}")
            
            # –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: product_id –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∞ –≤ product_statuses –∫–ª—é—á–∏ - —á–∏—Å–ª–∞!
            # –ù—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ product_id –∫ int
            product_id_int = int(product_id) if isinstance(product_id, str) else product_id
            status = self.product_statuses.get(product_id_int, False)
            logger.warning(f"üö® [MockBlockchainService] –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: product_id={product_id} -> {product_id_int}, status={status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å —Ç–∞–∫–∏–º ID
            if product_id_int in self.product_cids:
                # –ü—Ä–æ–¥—É–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ create_product, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π CID
                cid = self.product_cids[product_id_int]
                logger.info(f"üîç [MockBlockchainService] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ID={product_id_int}, CID={cid}, Status={status}")
                return (product_id_int, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", cid, status)
            else:
                # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è CID
                logger.warning(f"‚ö†Ô∏è [MockBlockchainService] –ü—Ä–æ–¥—É–∫—Ç {product_id_int} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ product_cids, –Ω–æ —Å—Ç–∞—Ç—É—Å: {status}")
                return (product_id_int, "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", None, status)

        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç CID –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å MockIPFSStorage.
        async def create_product(self, ipfs_cid):
            self.create_product_called = True
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π blockchain ID –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω)
            product_id = self._generate_next_blockchain_id()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É blockchain ID –∏ IPFS CID
            self.product_cids[product_id] = ipfs_cid
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.product_statuses[product_id] = False
            
            logger.info(f"üîó [MockBlockchainService] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: ID={product_id}, CID={ipfs_cid}")
            
            return "0x123"

        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π tx_hash '0xsetactive'.
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"

        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π tx_hash.
        async def update_product_status(self, private_key, product_id, new_status):
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç [MockBlockchainService] update_product_status –≤—ã–∑–≤–∞–Ω:")
            logger.info(f"   - product_id: {product_id} (—Ç–∏–ø: {type(product_id)})")
            logger.info(f"   - new_status: {new_status} (—Ç–∏–ø: {type(new_status)})")
            logger.info(f"   - new_status repr: {repr(new_status)}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ò–ó–ê–¶–ò–ò: –ü—Ä–∏–≤–æ–¥–∏–º new_status –∫ int –ø–µ—Ä–µ–¥ bool –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
            if isinstance(new_status, str):
                try:
                    status_int = int(new_status)
                    logger.info(f"üîÑ [MockBlockchainService] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ —Å—Ç—Ä–æ–∫—É '{new_status}' –≤ int: {status_int}")
                except ValueError:
                    logger.error(f"‚ùå [MockBlockchainService] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{new_status}' –≤ int, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å")
                    status_int = new_status
            else:
                status_int = new_status
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bool (—Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: 0 -> False, 1 -> True)
            status_bool = bool(status_int)
            logger.info(f"üîÑ [MockBlockchainService] new_status {new_status} -> status_int {status_int} -> status_bool {status_bool}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º —Å–ª–æ–≤–∞—Ä–µ
            if product_id in self.product_statuses:
                old_status = self.product_statuses[product_id]
                self.product_statuses[product_id] = status_bool
                logger.info(f"üîÑ [MockBlockchainService] –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –∏–∑–º–µ–Ω–µ–Ω: {old_status} -> {status_bool}")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                self.product_statuses[product_id] = status_bool
                logger.info(f"üÜï [MockBlockchainService] –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {status_bool}")
            
            return "0xupdatestatus"

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è productId –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π productId.
        async def get_product_id_from_tx(self, tx_hash):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ—Ç ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–∫—á–µ–π–Ω–æ–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            if self.product_cids:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID
                last_id = max(self.product_cids.keys())
                logger.info(f"üÜî [MockBlockchainService] –ü–æ–ª—É—á–µ–Ω ID –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {last_id}")
                return last_id
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
                new_id = self._generate_next_blockchain_id()
                logger.info(f"üÜî [MockBlockchainService] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ID –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {new_id}")
                return new_id
        
        async def transact_contract_function(self, *args, **kwargs):
            return "0xtransaction"
        
        def clear(self):
            """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
            self.create_product_called = False
            self.product_statuses.clear()
            self.product_cids.clear()
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ blockchain ID
            self._next_blockchain_id = 1
            logger.info("üßπ [MockBlockchainService] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ, —Å—á–µ—Ç—á–∏–∫ ID —Å–±—Ä–æ—à–µ–Ω")
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainService)
    return MockBlockchainService()


@pytest.fixture
def mock_validation_service():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è ProductValidationService"""
    class MockProductValidationService:
        def __init__(self, should_fail_validation=False):
            self.should_fail_validation = should_fail_validation
            self.validation_calls = []
        
        async def validate_product_data(self, product_data):
            self.validation_calls.append(product_data)
            
            if self.should_fail_validation:
                return {
                    "is_valid": False,
                    "errors": ["Mock validation failed"]
                }
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –º–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
            required_fields = ["title", "organic_components", "forms"]
            errors = []
            
            for field in required_fields:
                if field not in product_data:
                    errors.append(f"Missing required field: {field}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è organic_components
            if "organic_components" in product_data:
                components = product_data["organic_components"]
                if not isinstance(components, list) or len(components) == 0:
                    errors.append("organic_components: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                else:
                    for i, component in enumerate(components):
                        if not isinstance(component, dict):
                            errors.append(f"organic_components[{i}]: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                        else:
                            required_component_fields = ["biounit_id", "description_cid", "proportion"]
                            for comp_field in required_component_fields:
                                if comp_field not in component:
                                    errors.append(f"organic_components[{i}].{comp_field}: –ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
            
            return {
                "is_valid": len(errors) == 0,
                "errors": errors
            }
    
    return MockProductValidationService()


@pytest.fixture
def mock_account_service():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è AccountService"""
    class MockAccountService:
        def __init__(self):
            self.private_key = "0x1234567890abcdef"
            self.address = "0x1234567890abcdef1234567890abcdef12345678"
            self.balance = "1000000000000000000"  # 1 ETH
        
        def get_private_key(self):
            return self.private_key
        
        def get_address(self):
            return self.address
        
        def get_balance(self):
            return self.balance
        
        async def sign_transaction(self, transaction):
            return f"0xsigned_{transaction}"
    
    return MockAccountService()


@pytest.fixture
def mock_ipfs_storage_failing():
    """–ú–æ–∫ IPFS storage —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫"""
    class MockIPFSStorageFailing:
        def __init__(self):
            self.should_fail_upload = True
            self.should_fail_download = True
            self.uploaded_files = []
            self.uploaded_jsons = []
            self.downloaded_json = {}
            self.gateway_url_prefix = "https://mocked.ipfs/"
        
        def download_json(self, cid):
            if self.should_fail_download:
                return None
            return self.downloaded_json.get(cid, {
                "id": "amanita1",
                "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
                "organic_components": [
                    {
                        "biounit_id": "amanita_muscaria",
                        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                        "proportion": "100%"
                    }
                ],
                "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
                "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
                "forms": ["mixed slices"],
                "species": "Amanita muscaria",
                "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
            })
        
        async def upload_json(self, data):
            if self.should_fail_upload:
                return None
            cid = f"QmMockJson{len(self.uploaded_jsons)}"
            self.uploaded_jsons.append((data, cid))
            return cid
        
        async def download_json_async(self, cid):
            return self.download_json(cid)
        
        def upload_file(self, file_path_or_data, file_name=None):
            if self.should_fail_upload:
                raise Exception("Mock IPFS upload failed")
            cid = f"QmMockFile{len(self.uploaded_files)}"
            self.uploaded_files.append((file_path_or_data, file_name))
            return cid
        
        def get_gateway_url(self, cid):
            return self.gateway_url_prefix + cid
        
        def is_valid_cid(self, cid):
            return isinstance(cid, str) and cid.startswith("Qm")
    
    return MockIPFSStorageFailing()


@pytest.fixture
def mock_validation_service_failing():
    """–ú–æ–∫ ProductValidationService —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫"""
    class MockProductValidationServiceFailing:
        def __init__(self):
            self.validation_calls = []
        
        async def validate_product_data(self, product_data):
            self.validation_calls.append(product_data)
            return {
                "is_valid": False,
                "errors": ["Mock validation failed"]
            }
    
    return MockProductValidationServiceFailing()


@pytest.fixture
def mock_integration_registry_service(mock_blockchain_service, mock_ipfs_service, mock_validation_service, mock_account_service):
    """–ú–æ–∫ ProductRegistryService –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–∫–∞–º–∏"""
    from bot.dependencies import get_product_registry_service
    
    # –°–≤—è–∑—ã–≤–∞–µ–º –º–æ–∫–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    mock_blockchain_service.storage_service = mock_ipfs_service
    mock_ipfs_service.blockchain_service = mock_blockchain_service
    
    logger.info("üîó [mock_integration_registry_service] –ú–æ–∫–∏ —Å–≤—è–∑–∞–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    return get_product_registry_service(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_service,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )


@pytest.fixture
def mock_integration_registry_service_real_blockchain(mock_ipfs_service, mock_validation_service, mock_account_service):
    """–ú–æ–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º, –Ω–æ –º–æ–∫–∞–Ω–Ω—ã–º IPFS"""
    from bot.dependencies import get_product_registry_service
    from bot.services.core.blockchain import BlockchainService
    
    return get_product_registry_service(
        blockchain_service=BlockchainService(),  # –†–µ–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
        storage_service=mock_ipfs_service,      # –ú–æ–∫–∞–Ω–Ω—ã–π IPFS
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )


@pytest.fixture
def mock_ipfs_service(monkeypatch):
    """–ú–æ–∫ –¥–ª—è ProductStorageService (IPFS/Pinata) –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤ API –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    class MockIPFSService:
        def __init__(self):
            self.should_fail_upload = False
            self.uploaded_json = []
            self.uploaded_files = []
            self.downloaded_json = {}
            self.gateway_url_prefix = "https://mocked.ipfs/"
            
        async def upload_json(self, data):
            print(f"[MOCK upload_json] should_fail_upload={self.should_fail_upload}")
            if self.should_fail_upload:
                print("[MOCK upload_json] returning None (simulate IPFS error)")
                return None
            self.uploaded_json.append(data)
            cid = "QmMockedCID" + str(len(self.uploaded_json))
            print(f"[MOCK upload_json] returning {cid}")
            return cid
            
        def upload_file(self, file_path_or_data, file_name=None):
            self.uploaded_files.append((file_path_or_data, file_name))
            return "QmMockedFileCID"
            
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤
        def download_json(self, cid):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
            mock_metadata = {
                "id": "amanita1",
                "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
                "organic_components": [
                    {
                        "biounit_id": "amanita_muscaria",
                        "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                        "proportion": "100%"
                    }
                ],
                "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
                "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
                "forms": ["mixed slices"],
                "species": "Amanita muscaria",
                "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
            }
            return self.downloaded_json.get(cid, mock_metadata)
            
        def get_gateway_url(self, cid):
            return self.gateway_url_prefix + cid
            
        def is_valid_cid(self, cid):
            return isinstance(cid, str) and cid.startswith("Qm")
            
    # –ü–æ–¥–º–µ–Ω—è–µ–º ProductStorageService –Ω–∞ –º–æ–∫
    from bot.services.product import storage
    monkeypatch.setattr(storage, "ProductStorageService", MockIPFSService)
    return MockIPFSService()


@pytest.fixture
def mock_blockchain_service_with_error(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    class MockBlockchainServiceWithError:
        def __init__(self):
            self.create_product_called = False
            self.should_fail_create = True  # –í–∫–ª—é—á–∞–µ–º –æ—à–∏–±–∫—É
        
        def get_catalog_version(self):
            return 1
        
        def get_all_products(self):
            return []
        
        def get_product(self, product_id):
            raise Exception("ProductRegistry: product does not exist")
        
        async def create_product(self, ipfs_cid):
            self.create_product_called = True
            if self.should_fail_create:
                raise Exception("Blockchain transaction failed: insufficient gas")
            return "0x123"
        
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"
        
        async def update_product_status(self, private_key, product_id, new_status):
            return "0xupdatestatus"
        
        async def get_product_id_from_tx(self, tx_hash):
            return 42
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    from bot.services.core import blockchain
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainServiceWithError)
    return MockBlockchainServiceWithError()


@pytest.fixture
def mock_blockchain_service_with_id_error(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è blockchain_id"""
    class MockBlockchainServiceWithIdError:
        def __init__(self):
            self.create_product_called = False
            self.get_product_id_called = False
            self.should_fail_get_id = True  # –í–∫–ª—é—á–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è ID
        
        def get_catalog_version(self):
            return 1
        
        def get_all_products(self):
            return []
        
        def get_product(self, product_id):
            raise Exception("ProductRegistry: product does not exist")
        
        async def create_product(self, ipfs_cid):
            self.create_product_called = True
            return "0x123"  # –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"
        
        async def update_product_status(self, private_key, product_id, new_status):
            return "0xupdatestatus"
        
        async def get_product_id_from_tx(self, tx_hash):
            self.get_product_id_called = True
            if self.should_fail_get_id:
                raise Exception("Failed to get product ID from transaction")
            return 42
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    from bot.services.core import blockchain
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainServiceWithIdError)
    return MockBlockchainServiceWithIdError()


@pytest.fixture
def mock_blockchain_service_with_tracking(monkeypatch):
    """–ú–æ–∫ –¥–ª—è BlockchainService —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    class MockBlockchainServiceWithTracking:
        def __init__(self):
            self.create_product_calls = []
            self.get_product_id_calls = []
        
        def get_catalog_version(self):
            return 1
        
        def get_all_products(self):
            return []
        
        def get_product(self, product_id):
            raise Exception("ProductRegistry: product does not exist")
        
        async def create_product(self, ipfs_cid):
            self.create_product_calls.append(ipfs_cid)
            return "0x123"
        
        async def set_product_active(self, private_key, product_id, is_active):
            return "0xsetactive"
        
        async def update_product_status(self, private_key, product_id, new_status):
            return "0xupdatestatus"
        
        async def get_product_id_from_tx(self, tx_hash):
            self.get_product_id_calls.append(tx_hash)
            return "42"
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º BlockchainService –Ω–∞ –º–æ–∫
    from bot.services.core import blockchain
    monkeypatch.setattr(blockchain, "BlockchainService", MockBlockchainServiceWithTracking)
    return MockBlockchainServiceWithTracking()


# === API –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –§–ò–ö–°–¢–£–†–´ ===

@pytest.fixture
async def api_client() -> AsyncGenerator[httpx.AsyncClient, None]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
    async with httpx.AsyncClient(base_url=API_URL) as client:
        yield client


@pytest.fixture
def test_api_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ API –∫–ª—é—á–∞"""
    return AMANITA_API_KEY


@pytest.fixture
def test_secret_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    return AMANITA_API_SECRET


@pytest.fixture
def valid_ethereum_address() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ Ethereum –∞–¥—Ä–µ—Å–∞"""
    return "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6"


@pytest.fixture
def invalid_ethereum_address() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ Ethereum –∞–¥—Ä–µ—Å–∞"""
    return "invalid-address"


@pytest.fixture
def valid_api_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
    return "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef12345678"


@pytest.fixture
def invalid_api_key() -> str:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
    return "invalid-key"


@pytest.fixture
def test_request_data() -> dict:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        "client_address": "0x742d35cc6634c0532925a3b8d4c9db96c4b4d8b6",
        "description": "Test API key"
    }


@pytest.fixture
def mock_service_factory():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ ServiceFactory"""
    class MockServiceFactory:
        def create_api_key_service(self):
            return MockApiKeyService()
        
        def create_blockchain_service(self):
            return MockBlockchainService()
    
    return MockServiceFactory()


class MockApiKeyService:
    """–ú–æ–∫ –¥–ª—è ApiKeyService"""
    def __init__(self):
        self.api_keys = {}
    
    async def create_api_key(self, client_address: str, description: str = None):
        api_key = f"test_api_key_{len(self.api_keys)}"
        self.api_keys[api_key] = {
            "client_address": client_address,
            "description": description
        }
        return api_key
    
    async def validate_api_key(self, api_key: str):
        return api_key in self.api_keys


class MockBlockchainService:
    """–ú–æ–∫ –¥–ª—è BlockchainService –≤ API —Ç–µ—Å—Ç–∞—Ö"""
    def __init__(self):
        self.accounts = {}
    
    def get_account_balance(self, address: str):
        return "1000000000000000000"  # 1 ETH
    
    def is_valid_address(self, address: str):
        return address.startswith("0x") and len(address) == 42


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ú–û–ö–û–í ===

@pytest.fixture(autouse=True)
def reset_mock_states():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    yield
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –º–æ–∫–æ–≤
    # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤—ã–∑–æ–≤–æ–≤


@pytest.fixture(autouse=True)
def clear_mock_storage_between_tests():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ MockIPFSStorage –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
    yield
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã mock_ipfs_storage –∏ –æ—á–∏—â–∞–µ–º –∏—Ö
    import pytest
    from _pytest.fixtures import FixtureRequest
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ñ–∏–∫—Å—Ç—É—Ä—ã
    # –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è


@pytest.fixture
def mock_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return {
        "ipfs_mock_enabled": os.getenv("MOCK_IPFS", "true").lower() == "true",
        "blockchain_mock_enabled": os.getenv("MOCK_BLOCKCHAIN", "true").lower() == "true",
        "validation_mock_enabled": os.getenv("MOCK_VALIDATION", "true").lower() == "true"
    }

@pytest.fixture
def mock_ipfs_storage():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–∫ –¥–ª—è IPFS/Arweave storage —Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    class MockIPFSStorage:
        def __init__(self, should_fail_upload=False, should_fail_download=False):
            self.should_fail_upload = should_fail_upload
            self.should_fail_download = should_fail_download
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ upload/download
            self._storage = {}  # CID -> data mapping
            self._counter = 0   # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CID
            # –°—Å—ã–ª–∫–∞ –Ω–∞ blockchain service –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.blockchain_service = None
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            self.uploaded_files = []
            self.uploaded_jsons = []
            self.downloaded_json = {}
            self.gateway_url_prefix = "https://mocked.ipfs/"
        
        def _generate_unique_cid(self, data):
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π CID –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
            import hashlib
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç –¥–∞–Ω–Ω—ã—Ö + —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            data_str = str(data) + str(self._counter)
            data_hash = hashlib.md5(data_str.encode()).hexdigest()
            self._counter += 1
            
            # IPFS CID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 46 —Å–∏–º–≤–æ–ª–æ–≤: Qm + 44 —Å–∏–º–≤–æ–ª–∞ —Ö–µ—à–∞
            # MD5 –¥–∞–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è IPFS
            # IPFS CID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç base58btc –∞–ª—Ñ–∞–≤–∏—Ç: 123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã: 0, O, I, l (—Å—Ç—Ä–æ—á–Ω–∞—è L)
            valid_chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω—ã–π CID –∏–∑ 44 —Å–∏–º–≤–æ–ª–æ–≤
            import random
            random.seed(int(data_hash, 16))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –∫–∞–∫ seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 44 —Å–∏–º–≤–æ–ª–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            cid_suffix = ''.join(random.choices(valid_chars, k=44))
            
            return f"Qm{cid_suffix}"
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤
        def download_json(self, cid):
            if self.should_fail_download:
                return None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if cid in self._storage:
                return self._storage[cid]
            
            # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—É–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ CID –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            return None
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
        async def upload_json(self, data):
            if self.should_fail_upload:
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π CID
            cid = self._generate_unique_cid(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self._storage[cid] = data
            
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ uploaded_jsons
            self.uploaded_jsons.append((data, cid))
            
            return cid
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
        async def download_json_async(self, cid):
            return self.download_json(cid)
        
        def upload_file(self, file_path_or_data, file_name=None):
            if self.should_fail_upload:
                raise Exception("Mock IPFS upload failed")
            cid = f"QmMockFile{len(self.uploaded_files)}"
            self.uploaded_files.append((file_path_or_data, file_name))
            return cid
        
        def get_gateway_url(self, cid):
            return self.gateway_url_prefix + cid
        
        def is_valid_cid(self, cid):
            return isinstance(cid, str) and cid.startswith("Qm")
        
        def clear(self):
            """–û—á–∏—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
            self._storage.clear()
            self._counter = 0
            self.uploaded_files.clear()
            self.uploaded_jsons.clear()
            self.downloaded_json.clear()
    
    return MockIPFSStorage()

@pytest.fixture
def mock_registry_service(mock_blockchain_service, mock_ipfs_storage, mock_validation_service, mock_account_service):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–æ–∫–∞–Ω–Ω—ã–π ProductRegistryService –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤"""
    from bot.services.product.registry import ProductRegistryService
    from unittest.mock import Mock, AsyncMock
    from bot.model.product import Product
    from bot.model.product import PriceInfo
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )
    
    # –ú–æ–∫–∞–µ–º cache_service —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ IPFS
    mock_cache_service = Mock()
    mock_cache_service.get_description_by_cid.return_value = None
    mock_cache_service.get_image_url_by_cid.return_value = "https://mocked.ipfs/test.jpg"
    mock_cache_service.set_cached_item.return_value = None
    mock_cache_service.invalidate_cache.return_value = None
    mock_cache_service.get_cached_item.return_value = None
    service.cache_service = mock_cache_service
    
    # –ú–æ–∫–∞–µ–º metadata_service —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ IPFS
    mock_metadata_service = Mock()
    mock_metadata_service.process_metadata.return_value = {
        "id": "amanita1",
        "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
        "organic_components": [
            {
                "biounit_id": "amanita_muscaria",
                "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                "proportion": "100%"
            }
        ],
        "cover_image": "QmYrs5gAMeZEmiFAJnmRcD19rpCpXF52ssMJ6X2oWrxWWj",
        "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
        "forms": ["mixed slices"],
        "species": "Amanita muscaria",
        "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
    }
    # –ú–æ–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ process_product_metadata
    # –°–æ–∑–¥–∞–µ–º OrganicComponent –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    from bot.model.organic_component import OrganicComponent
    test_component = OrganicComponent(
        biounit_id="amanita_muscaria",
        description_cid="QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        proportion="100%"
    )
    
    mock_metadata_service.process_product_metadata = AsyncMock(return_value=Product(
        id=1,
        alias="amanita1",
        status=1,
        cid="QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
        title="Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
        organic_components=[test_component],
        cover_image_url="https://mocked.ipfs/test.jpg",
        categories=["mushroom", "mental health", "focus", "ADHD support", "mental force"],
        forms=["mixed slices"],
        species="Amanita muscaria",
        prices=[PriceInfo(weight="100", weight_unit="g", price="80", currency="EUR")]
    ))
    service.metadata_service = mock_metadata_service
    
    return service

@pytest.fixture
def mock_registry_service_with_failing_storage(mock_blockchain_service, mock_validation_service, mock_account_service, mock_ipfs_storage_failing):
    """ProductRegistryService —Å –º–æ–∫–∞–Ω–Ω—ã–º IPFS storage, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
    from bot.services.product.registry import ProductRegistryService
    
    return ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage_failing,
        validation_service=mock_validation_service,
        account_service=mock_account_service
    )

@pytest.fixture
def mock_registry_service_with_failing_validation(mock_blockchain_service, mock_ipfs_storage, mock_account_service, mock_validation_service_failing):
    """ProductRegistryService —Å –º–æ–∫–∞–Ω–Ω—ã–º validation service, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
    from bot.services.product.registry import ProductRegistryService
    
    return ProductRegistryService(
        blockchain_service=mock_blockchain_service,
        storage_service=mock_ipfs_storage,
        validation_service=mock_validation_service_failing,
        account_service=mock_account_service
    )


# === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ - –ù–û–í–´–ï –§–ò–ö–°–¢–£–†–´ ===

@pytest.fixture
def integration_storage_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è storage –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è DevOps"""
    # üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è DevOps –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    storage_type = os.getenv("INTEGRATION_STORAGE", "mock").lower()
    print(f"üîç [DEVOPS] INTEGRATION_STORAGE={storage_type}")
    
    # üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    pinata_api_key = os.getenv("PINATA_API_KEY")
    pinata_secret_key = os.getenv("PINATA_SECRET_KEY")
    arweave_private_key = os.getenv("ARWEAVE_PRIVATE_KEY")
    
    print(f"üîç [DEVOPS] PINATA_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if pinata_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîç [DEVOPS] PINATA_SECRET_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if pinata_secret_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîç [DEVOPS] ARWEAVE_PRIVATE_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if arweave_private_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    configs = {
        "mock": {
            "service": _create_mock_storage(),
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: Mock IPFS/Arweave (–±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)",
            "devops_info": {
                "type": "mock",
                "performance": "fast",
                "cost": "free",
                "api_calls": "none"
            }
        },
        "pinata": {
            "service": _get_real_pinata_storage(),
            "description": "–†–µ–∞–ª—å–Ω—ã–π Pinata IPFS (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)",
            "devops_info": {
                "type": "real",
                "performance": "slow",
                "cost": "budget",
                "api_calls": "pinata_api"
            }
        },
        "arweave": {
            "service": _get_real_arweave_storage(),
            "description": "–†–µ–∞–ª—å–Ω—ã–π Arweave (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)",
            "devops_info": {
                "type": "real",
                "performance": "slow",
                "cost": "budget",
                "api_calls": "arweave_api"
            }
        }
    }
    
    if storage_type not in configs:
        print(f"‚ö†Ô∏è [DEVOPS] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø storage: {storage_type}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
        storage_type = "mock"
    
    selected_config = configs[storage_type]
    devops_info = selected_config["devops_info"]
    
    # üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è DevOps –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print(f"üîß [DEVOPS] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: {selected_config['description']}")
    print(f"üìä [DEVOPS] Storage –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {devops_info}")
    print(f"üîç [DEVOPS] –ü—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {storage_type} (performance: {devops_info['performance']}, cost: {devops_info['cost']})")
    
    return selected_config


def _create_mock_storage():
    """–°–æ–∑–¥–∞–Ω–∏–µ mock storage —Å–µ—Ä–≤–∏—Å–∞ (–Ω–µ —Ñ–∏–∫—Å—Ç—É—Ä–∞)"""
    mock_storage = Mock()
    mock_storage.upload_file = AsyncMock(return_value="QmMockHash123")
    mock_storage.upload_json = AsyncMock(return_value="QmMockHash456")
    return mock_storage


def _get_real_pinata_storage():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Pinata storage (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    try:
        from bot.services.core.storage.pinata import SecurePinataUploader
        pinata_api_key = os.getenv("PINATA_API_KEY")
        pinata_secret_key = os.getenv("PINATA_SECRET_KEY")
        
        if not pinata_api_key or not pinata_secret_key:
            print("‚ö†Ô∏è [DEVOPS] PINATA_API_KEY –∏–ª–∏ PINATA_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
            return _create_mock_storage()
        
        print("‚úÖ [DEVOPS] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π Pinata IPFS (API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã)")
        return SecurePinataUploader()
        
    except Exception as e:
        print(f"‚ùå [DEVOPS] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinata: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
        return _create_mock_storage()


def _get_real_arweave_storage():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Arweave storage (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)"""
    try:
        from bot.services.core.storage.ar_weave import ArWeaveUploader
        arweave_private_key = os.getenv("ARWEAVE_PRIVATE_KEY")
        
        if not arweave_private_key:
            print("‚ö†Ô∏è [DEVOPS] ARWEAVE_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
            return _create_mock_storage()
        
        print("‚úÖ [DEVOPS] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π Arweave (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω)")
        return ArWeaveUploader()
        
    except Exception as e:
        print(f"‚ùå [DEVOPS] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Arweave: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock (fallback)")
        return _create_mock_storage()


@pytest.fixture
def integration_registry_service_real_blockchain(integration_storage_config):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º storage"""
    from bot.dependencies import get_product_registry_service
    from bot.services.core.blockchain import BlockchainService
    
    # ‚úÖ –ë–ª–æ–∫—á–µ–π–Ω –í–°–ï–ì–î–ê —Ä–µ–∞–ª—å–Ω—ã–π –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    try:
        blockchain_service = BlockchainService()
        logger.info("‚úÖ BlockchainService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BlockchainService: {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫—á–µ–π–Ω–∞: {e}")
    
    # üîß Storage –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    storage_service = integration_storage_config["service"]
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ DI —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º storage
    registry_service = get_product_registry_service(
        blockchain_service=blockchain_service,      # ‚úÖ –í–°–ï–ì–î–ê —Ä–µ–∞–ª—å–Ω—ã–π
        storage_service=storage_service,            # üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π
        validation_service=mock_validation_service(),
        account_service=mock_account_service()
    )
    
    logger.info("‚úÖ IntegrationRegistryService —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–ª–æ–∫—á–µ–π–Ω–æ–º")
    return registry_service


@pytest.fixture
def seller_account():
    """–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    seller_private_key = os.getenv("SELLER_PRIVATE_KEY")
    if not seller_private_key:
        pytest.skip("SELLER_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    
    try:
        from eth_account import Account
        account = Account.from_key(seller_private_key)
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {account.address}")
        return account
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        pytest.skip(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")


@pytest.fixture
def test_products():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    return [
        {
            "id": "amanita1",
            "title": "Amanita muscaria ‚Äî sliced caps and gills (1st grade)",
            "organic_components": [
                {
                    "biounit_id": "amanita_muscaria",
                    "description_cid": "QmdoqBWBZoupjQWFfBxMJD5N9dJSFTyjVEV1AVL8oNEVSG",
                    "proportion": "100%"
                }
            ],
            "forms": ["mixed slices"],
            "categories": ["mushroom", "mental health", "focus", "ADHD support", "mental force"],
            "species": "Amanita muscaria",
            "prices": [{"weight": "100", "weight_unit": "g", "price": "80", "currency": "EUR"}]
        },
        {
            "id": "amanita2", 
            "title": "Amanita pantherina ‚Äî premium capsules",
            "organic_components": [
                {
                    "biounit_id": "amanita_pantherina",
                    "description_cid": "QmYXGiCLB1sPtkoskNWA5dCo8d9uW6RVVS94uq2xf6awQ7",
                    "proportion": "100%"
                }
            ],
            "forms": ["capsules"],
            "categories": ["mushroom", "energy", "focus"],
            "species": "Amanita pantherina",
            "prices": [{"weight": "60", "weight_unit": "capsules", "price": "120", "currency": "EUR"}]
        }
    ]


# === –¢–ï–°–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –§–ò–ö–°–¢–£–† ===

def test_integration_storage_config_mock():
    """–¢–µ—Å—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_storage_config –≤ mock —Ä–µ–∂–∏–º–µ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_storage = os.getenv("INTEGRATION_STORAGE")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock —Ä–µ–∂–∏–º
        os.environ["INTEGRATION_STORAGE"] = "mock"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
        config = integration_storage_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert "service" in config
        assert "description" in config
        assert "mock" in config["description"].lower()
        
        print("‚úÖ –¢–µ—Å—Ç integration_storage_config mock —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if original_storage:
            os.environ["INTEGRATION_STORAGE"] = original_storage
        else:
            os.environ.pop("INTEGRATION_STORAGE", None)


def test_integration_storage_config_fallback():
    """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã integration_storage_config"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    original_storage = os.getenv("INTEGRATION_STORAGE")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        os.environ["INTEGRATION_STORAGE"] = "invalid_type"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
        config = integration_storage_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –Ω–∞ mock
        assert "service" in config
        assert "description" in config
        assert "mock" in config["description"].lower()
        
        print("‚úÖ –¢–µ—Å—Ç integration_storage_config fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if original_storage:
            os.environ["INTEGRATION_STORAGE"] = original_storage
        else:
            os.environ.pop("INTEGRATION_STORAGE", None)
