import pytest
import logging
import json
from bot.services.ar_weave import ArWeaveUploader
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ZEYA = "88888888"  # 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ü–∏—Ñ—Ä—ã 8

@pytest.fixture
def arweave_uploader():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ArWeaveUploader"""
    logger.info("=" * 50)
    logger.info("üîß –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –§–ò–ö–°–¢–£–†–´ arweave_uploader")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    key_path = os.getenv("ARWEAVE_PRIVATE_KEY")
    logger.info(f"üìù ARWEAVE_PRIVATE_KEY –ø—É—Ç—å: {key_path}")
    assert key_path is not None, "ARWEAVE_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"
    assert os.path.isfile(key_path), f"–§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {key_path}"
    
    uploader = ArWeaveUploader()
    logger.info("‚úÖ ArWeaveUploader —Å–æ–∑–¥–∞–Ω")
    
    return uploader

def test_upload_and_download_text(arweave_uploader):
    """
    –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É ZEYA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    logger.info("=" * 50)
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –ó–ê–ì–†–£–ó–ö–ò/–°–ö–ê–ß–ò–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–ê")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "test_id": ZEYA,
        "description": "Test upload and download"
    }
    test_json = json.dumps(test_data)
    
    logger.debug(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_json}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.debug("üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ Arweave")
        arweave_url = arweave_uploader.upload_text(test_json)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {arweave_url}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º CID –∏–∑ URL
        cid = arweave_url.split('/')[-1]
        logger.debug(f"üîë –ò–∑–≤–ª–µ—á–µ–Ω CID: {cid}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
        logger.debug("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        downloaded_data = arweave_uploader.download_json(cid)
        logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã: {downloaded_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        assert downloaded_data["test_id"] == ZEYA, \
            f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–ª–æ—Å—å {ZEYA}, –ø–æ–ª—É—á–µ–Ω–æ {downloaded_data.get('test_id')}"
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
        raise

def test_download_with_ar_prefix(arweave_uploader):
    """
    –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ar://.
    """
    logger.info("=" * 50)
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –° –ü–†–ï–§–ò–ö–°–û–ú ar://")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {"test_id": ZEYA}
        test_json = json.dumps(test_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        arweave_url = arweave_uploader.upload_text(test_json)
        cid = arweave_url.split('/')[-1]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ar://
        ar_cid = f"ar://{cid}"
        logger.debug(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º CID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {ar_cid}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        downloaded_data = arweave_uploader.download_json(ar_cid)
        assert downloaded_data["test_id"] == ZEYA, \
            "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ar://"
        
        logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
        raise

def test_error_handling(arweave_uploader):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º CID.
    """
    logger.info("=" * 50)
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    
    invalid_cids = [
        "invalid_cid",
        "not_exists_12345",
        ""  # –ü—É—Å—Ç–æ–π CID
    ]
    
    for invalid_cid in invalid_cids:
        logger.debug(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π CID: {invalid_cid}")
        
        try:
            arweave_uploader.download_json(invalid_cid)
            pytest.fail(f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ CID: {invalid_cid}")
        except Exception as e:
            logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
    logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
