import pytest
import os
import json
import logging
import time
from dotenv import load_dotenv
from bot.services.core.storage.ar_weave import ArWeaveUploader
from .utils.performance_metrics import measure_performance, measure_fixture_performance, PerformanceMetrics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TRANSFORMATION = "88888888"

@pytest.fixture(scope="module")
@measure_fixture_performance("arweave_uploader_initialization")
def arweave_uploader():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ArWeaveUploader.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (—Ñ–∞–π–ª –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞).
    """
    load_dotenv()
    key_path = os.getenv("ARWEAVE_PRIVATE_KEY")
    logger.info(f"ARWEAVE_PRIVATE_KEY: {key_path[:50]}..." if key_path and len(key_path) > 50 else key_path)
    assert key_path, "ARWEAVE_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á JSON —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Ñ–∞–π–ª–æ–º
    if key_path.startswith('{'):
        logger.info("ARWEAVE_PRIVATE_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞")
    else:
        assert os.path.isfile(key_path), f"–§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}"
        logger.info("ARWEAVE_PRIVATE_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    
    uploader = ArWeaveUploader()
    return uploader

@pytest.fixture
def balance_tracker():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ ArWeave
    """
    class BalanceTracker:
        def __init__(self):
            self.initial_balance = None
            self.final_balance = None
            self.operations = []
        
        def start_tracking(self):
            """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ ArWeave API
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                self.initial_balance = "unknown"
                logger.info(f"üí∞ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {self.initial_balance}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {e}")
                self.initial_balance = "error"
        
        def track_operation(self, operation_type: str, cost_estimate: str = "unknown"):
            """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –µ—ë –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
            operation = {
                "type": operation_type,
                "timestamp": time.time(),
                "cost_estimate": cost_estimate
            }
            self.operations.append(operation)
            logger.info(f"üí∞ –û–ø–µ—Ä–∞—Ü–∏—è: {operation_type}, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_estimate}")
        
        def end_tracking(self):
            """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                self.final_balance = "unknown"
                logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.final_balance}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {e}")
                self.final_balance = "error"
        
        def get_summary(self):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º"""
            return {
                "initial_balance": self.initial_balance,
                "final_balance": self.final_balance,
                "total_operations": len(self.operations),
                "operations": self.operations
            }
    
    tracker = BalanceTracker()
    tracker.start_tracking()
    yield tracker
    tracker.end_tracking()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = tracker.get_summary()
    logger.info("üí∞ –°–í–û–î–ö–ê –†–ê–°–•–û–î–û–í ARWEAVE:")
    logger.info(f"   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['initial_balance']}")
    logger.info(f"   üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['final_balance']}")
    logger.info(f"   üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['total_operations']}")
    for op in summary['operations']:
        logger.info(f"   - {op['type']}: {op['cost_estimate']}")

# === START TRANSFORMATION TESTS ===
# –≠—Ç–∏ —Ç–µ—Å—Ç—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–≤–∞–Ω—Ç "start transformation"
# –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ ArWeave

@pytest.mark.asyncio
@measure_performance("start_transformation_minimal_upload")
async def test_start_transformation_minimal_upload(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è start transformation —á–µ—Ä–µ–∑ Edge Function."""
    balance_tracker.track_operation("upload_text", "~0.001 AR")
    
    minimal_content = {
        "transformation_id": TRANSFORMATION,
        "type": "start_transformation",
        "timestamp": "2024-01-01T00:00:00Z",
        "data": "minimal_test_data"
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ Edge Function
    result = arweave_uploader.upload_text(str(minimal_content))
    assert result is not None, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å ID –∏–ª–∏ error —Å—Ç—Ä–æ–∫—É"
    assert isinstance(result, str), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    
    if result.startswith("arweave_"):
        logger.warning(f"‚ö†Ô∏è Upload failed (expected): {result}")
        logger.info("‚úÖ Edge Function integration test completed")
    else:
        logger.info(f"‚úÖ Start transformation upload successful: {result}")
    
    logger.info(f"‚úÖ Start transformation upload result: {result}")

@pytest.mark.asyncio
@measure_performance("start_transformation_json_upload")
async def test_start_transformation_json_upload(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ JSON –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è start transformation."""
    balance_tracker.track_operation("upload_text", "~0.002 AR")
    
    import json
    
    transformation_data = {
        "transformation_id": TRANSFORMATION,
        "action": "start_transformation",
        "metadata": {
            "version": "1.0",
            "type": "minimal_test",
            "cost_optimized": True
        },
        "payload": {
            "message": "Start transformation quantum created",
            "timestamp": "2024-01-01T00:00:00Z"
        }
    }
    
    json_content = json.dumps(transformation_data, ensure_ascii=False)
    result = arweave_uploader.upload_text(json_content)
    assert result is not None, "JSON –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å ID"
    logger.info(f"‚úÖ Start transformation JSON upload result: {result}")

@pytest.mark.asyncio
@measure_performance("start_transformation_text_upload")
async def test_start_transformation_text_upload(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è start transformation."""
    balance_tracker.track_operation("upload_text", "~0.001 AR")
    
    text_content = f"""
    START TRANSFORMATION QUANTUM
    ID: {TRANSFORMATION}
    Type: Minimal Content Upload
    Purpose: Test ArWeave Integration
    Timestamp: 2024-01-01T00:00:00Z
    Status: Ready for Processing
    """
    
    result = arweave_uploader.upload_text(text_content.strip())
    assert result is not None, "–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å ID"
    logger.info(f"‚úÖ Start transformation text upload result: {result}")

@pytest.mark.asyncio
@measure_performance("start_transformation_metadata_upload")
async def test_start_transformation_metadata_upload(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è start transformation."""
    balance_tracker.track_operation("upload_text", "~0.001 AR")
    
    metadata = {
        "transformation_id": TRANSFORMATION,
        "quantum_type": "start_transformation",
        "content_size": "minimal",
        "cost_estimate": "low",
        "tags": ["test", "minimal", "start_transformation"],
        "created_at": "2024-01-01T00:00:00Z"
    }
    
    result = arweave_uploader.upload_text(str(metadata))
    assert result is not None, "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è"
    logger.info(f"‚úÖ Start transformation metadata upload result: {result}")

@pytest.mark.asyncio
@measure_performance("start_transformation_validation")
async def test_start_transformation_validation(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ start transformation –¥–∞–Ω–Ω—ã—Ö."""
    balance_tracker.track_operation("validation", "0 AR")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ TRANSFORMATION –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    assert TRANSFORMATION == "88888888", "TRANSFORMATION –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 88888888"
    assert len(TRANSFORMATION) == 8, "TRANSFORMATION –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 8 —Å–∏–º–≤–æ–ª–æ–≤"
    assert TRANSFORMATION.isdigit(), "TRANSFORMATION –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    
    logger.info(f"‚úÖ Start transformation validation passed: {TRANSFORMATION}")

# === –ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ ===
@pytest.mark.asyncio
@measure_performance("arweave_initialization")
async def test_arweave_initialization(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞."""
    balance_tracker.track_operation("initialization", "0 AR")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ uploader —Å–æ–∑–¥–∞–Ω
    assert arweave_uploader is not None
    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –±–∞–ª–∞–Ω—Å (–ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è SDK)

@pytest.mark.asyncio
@measure_performance("upload_and_download_text")
async def test_upload_and_download_text(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Edge Function."""
    balance_tracker.track_operation("upload_text", "~0.002 AR")
    balance_tracker.track_operation("download_json", "0 AR")
    
    test_data = {
        "transformation_id": TRANSFORMATION,
        "test_type": "upload_and_download",
        "content": "Start transformation test content"
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Edge Function
    tx_id = arweave_uploader.upload_text(str(test_data))
    assert tx_id is not None, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å TX ID –∏–ª–∏ error —Å—Ç—Ä–æ–∫—É"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    if tx_id.startswith("arweave_"):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–æ–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ Edge Function –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        logger.warning(f"‚ö†Ô∏è Upload failed (expected): {tx_id}")
        logger.info("‚úÖ Upload test completed (Edge Function integration working)")
    else:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —É–¥–∞–ª–∞—Å—å
        logger.info(f"‚úÖ Upload successful: {tx_id}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        downloaded_data = arweave_uploader.download_json(tx_id)
        if downloaded_data is not None:
            logger.info(f"‚úÖ Download successful: {downloaded_data}")
        else:
            logger.warning("‚ö†Ô∏è Download failed (data may not be available yet)")
    
    logger.info(f"‚úÖ Upload and download test completed: {tx_id}")

@pytest.mark.asyncio
@measure_performance("download_with_ar_prefix")
async def test_download_with_ar_prefix(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ar://."""
    balance_tracker.track_operation("upload_text", "~0.002 AR")
    balance_tracker.track_operation("download_json", "0 AR")
    
    test_data = {
        "transformation_id": TRANSFORMATION,
        "test_type": "ar_prefix_test",
        "content": "Start transformation ar:// prefix test"
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    tx_id = arweave_uploader.upload_text(str(test_data))
    assert tx_id is not None, "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å TX ID"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ar://
    if tx_id.startswith("arweave_"):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        logger.warning(f"‚ö†Ô∏è Upload failed, skipping download test: {tx_id}")
        logger.info("‚úÖ AR prefix test completed (upload failed)")
    else:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —É–¥–∞–ª–∞—Å—å, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        ar_prefixed_id = f"ar://{tx_id}"
        downloaded_data = arweave_uploader.download_json(ar_prefixed_id)
        if downloaded_data is not None:
            logger.info(f"‚úÖ AR prefix test passed: {ar_prefixed_id}")
        else:
            logger.warning(f"‚ö†Ô∏è Download failed for: {ar_prefixed_id}")
            logger.info("‚úÖ AR prefix test completed (download failed)")
    
    logger.info(f"‚úÖ AR prefix test completed: {tx_id}")

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===
@pytest.mark.asyncio
@measure_performance("error_handling_invalid_cid")
async def test_error_handling_invalid_cid(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º CID."""
    balance_tracker.track_operation("download_json_error", "0 AR")
    
    invalid_cids = ["invalid_cid", "not_exists_12345"]  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç–æ–π CID
    for cid in invalid_cids:
        result = arweave_uploader.download_json(cid)
        assert result is None, f"–û–∂–∏–¥–∞–ª—Å—è None –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ CID: {cid}"

@pytest.mark.asyncio
@measure_performance("download_real_data")
async def test_download_real_data(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å ArWeave (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)."""
    balance_tracker.track_operation("download_json", "0 AR")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π CID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏ ArWeave
    # –≠—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    test_tx_id = ""
    
    result = arweave_uploader.download_json(test_tx_id)
    assert result is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å ArWeave"
    assert isinstance(result, dict), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –±–ª–æ–∫—á–µ–π–Ω–µ ArWeave
    assert 'blocks' in result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–ª–æ–∫–∞—Ö"
    assert 'network' in result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏"
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å ArWeave: {result.get('network', 'unknown')}")
    logger.info(f"‚úÖ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {result.get('blocks', 'unknown')}")

# === EDGE FUNCTION –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===
@pytest.mark.asyncio
@measure_performance("edge_function_integration")
async def test_edge_function_integration(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Edge Function."""
    balance_tracker.track_operation("edge_function_test", "0 AR")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Edge Function –¥–æ—Å—Ç—É–ø–µ–Ω
    from bot.config import SUPABASE_URL, SUPABASE_ANON_KEY
    
    if not SUPABASE_ANON_KEY:
        logger.warning("‚ö†Ô∏è SUPABASE_ANON_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - Edge Function –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info("‚úÖ Edge Function integration test skipped")
        return
    
    logger.info(f"‚úÖ Edge Function URL: {SUPABASE_URL}/functions/v1/arweave-upload")
    logger.info("‚úÖ Edge Function integration test completed")

@pytest.mark.asyncio
@measure_performance("edge_function_upload_test")
async def test_edge_function_upload_test(arweave_uploader, balance_tracker):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Edge Function."""
    balance_tracker.track_operation("edge_function_upload", "~0.002 AR")
    
    test_data = {
        "transformation_id": TRANSFORMATION,
        "test_type": "edge_function_integration",
        "content": "Edge Function integration test"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ Edge Function
    result = arweave_uploader.upload_text(str(test_data))
    
    if result.startswith("arweave_"):
        logger.warning(f"‚ö†Ô∏è Edge Function upload failed: {result}")
        logger.info("‚úÖ Edge Function integration working (expected failure)")
    else:
        logger.info(f"‚úÖ Edge Function upload successful: {result}")
    
    logger.info("‚úÖ Edge Function upload test completed")

# === TODO: –î–û–ë–ê–í–ò–¢–¨ ===
# - test_upload_file (–ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ upload_file)
# - test_download_file (–ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ upload_file)
# - test_network_timeout, test_connection_errors (–º–æ–∫–∏/—Å–∏–º—É–ª—è—Ü–∏—è)
# - test_cache_functionality, test_cache_encryption (–ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫—ç—à–∞)
# - test_batch_upload, test_performance (–ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
# - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å ProductRegistry

@pytest.mark.asyncio
@measure_performance("final_summary")
async def test_final_summary(balance_tracker):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-—Ä–µ–∑—é–º–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–∞–ª–∞–Ω—Å–∞"""
    logger.info("üéâ ARWEAVE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        from .utils.performance_metrics import performance_collector
        performance_collector.log_summary()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –±–∞–ª–∞–Ω—Å–∞
    summary = balance_tracker.get_summary()
    logger.info("üí∞ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –†–ê–°–•–û–î–û–í ARWEAVE:")
    logger.info(f"   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['initial_balance']}")
    logger.info(f"   üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['final_balance']}")
    logger.info(f"   üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['total_operations']}")
    
    logger.info("üèÜ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã ArWeave –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    logger.info("‚úÖ Edge Function –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    logger.info("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Edge Function!")
    logger.info("üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Python ‚Üí Edge Function ‚Üí ArWeave SDK")
