"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è AccountService

–ë–ê–ó–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:
=====================
- –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
- –ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å configurable storage (Arweave|Pinata|Mock)

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–π BlockchainService –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π storage
"""

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import pytest
import logging
import sys
import os
import json
import asyncio
from pathlib import Path
from dotenv import load_dotenv
import pytest_asyncio

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from bot.services.core.account import AccountService
from bot.services.core.blockchain import BlockchainService

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Mock –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (fallback)
from bot.tests.conftest import (
    mock_blockchain_service,
    mock_account_service,
    web3,
    invite_nft_contract,
    integration_storage_config
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Real —Ä–µ–∂–∏–º–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤)
from bot.services.core.blockchain import BlockchainService
from bot.services.core.account import AccountService

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(os.path.join(os.path.dirname(__file__), '../.env'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')
handler.setFormatter(formatter)

root_logger = logging.getLogger()
root_logger.addHandler(handler)
root_logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(handler)

print("\n=== –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ACCOUNT SERVICE ===")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SELLER_PRIVATE_KEY = os.getenv("SELLER_PRIVATE_KEY")
NODE_ADMIN_PRIVATE_KEY = os.getenv("NODE_ADMIN_PRIVATE_KEY")
INTEGRATION_STORAGE = os.getenv("INTEGRATION_STORAGE", "mock")

# ================== –¢–ï–°–¢ –§–ò–ö–°–¢–£–†–´ INTEGRATION_STORAGE_CONFIG =====================

def test_integration_storage_config_fixture():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ AccountService"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ –¥–ª—è AccountService")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    current_storage = os.getenv("INTEGRATION_STORAGE", "mock")
    logger.info(f"üîß –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ INTEGRATION_STORAGE: {current_storage}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ (–±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ–∏–∫—Å—Ç—É—Ä)
    if current_storage.lower() == "mock":
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º mock —Ä–µ–∂–∏–º –¥–ª—è AccountService")
        description = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: Mock IPFS/Arweave (–±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)"
        storage_type = "mock"
        
    elif current_storage.lower() == "pinata":
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Pinata —Ä–µ–∂–∏–º –¥–ª—è AccountService")
        description = "–†–µ–∞–ª—å–Ω—ã–π Pinata IPFS (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)"
        storage_type = "pinata"
        
    elif current_storage.lower() == "arweave":
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Arweave —Ä–µ–∂–∏–º –¥–ª—è AccountService")
        description = "–†–µ–∞–ª—å–Ω—ã–π Arweave (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç—Ä–∞—Ç–∏—Ç –±—é–¥–∂–µ—Ç)"
        storage_type = "arweave"
        
    else:
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ mock –¥–ª—è AccountService")
        description = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: Mock IPFS/Arweave (–±—ã—Å—Ç—Ä–æ, —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)"
        storage_type = "mock"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ–∏–∫—Å—Ç—É—Ä–µ
    config = {
        "service": f"{storage_type}_service",
        "description": description
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    assert isinstance(config, dict), "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
    assert "service" in config, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'service'"
    assert "description" in config, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'description'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π storage —Ç–∏–ø
    if current_storage.lower() == "mock":
        assert "—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" in config["description"].lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω mock storage"
        logger.info("‚úÖ Mock storage –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è AccountService")
    elif current_storage.lower() == "pinata":
        assert "pinata" in config["description"].lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω Pinata storage"
        logger.info("‚úÖ Pinata storage –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è AccountService")
    elif current_storage.lower() == "arweave":
        assert "arweave" in config["description"].lower(), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω Arweave storage"
        logger.info("‚úÖ Arweave storage –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è AccountService")
    else:
        # Fallback –Ω–∞ mock –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ
        assert "—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º" in config["description"].lower(), "–ü—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω mock"
        logger.info("‚úÖ Fallback –Ω–∞ mock storage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è AccountService")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ service –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω
    assert config["service"] is not None, "Storage service –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
    
    logger.info(f"‚úÖ –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ storage —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è AccountService")
    logger.info(f"üìã –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['description']}")
    logger.info(f"üîß –í—ã–±—Ä–∞–Ω–Ω—ã–π storage —Ç–∏–ø: {storage_type}")

# ================== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú BLOCKCHAIN SERVICE =====================

class TestAccountServiceIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è AccountService —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
    
    def test_account_service_real_blockchain_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AccountService —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AccountService —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π BlockchainService
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            assert account_service is not None
            assert account_service.blockchain_service == blockchain_service
            logger.info("‚úÖ AccountService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_get_seller_account_real_blockchain(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        if not SELLER_PRIVATE_KEY:
            logger.warning("‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            seller_account = account_service.get_seller_account()
            
            assert seller_account is not None
            assert hasattr(seller_account, 'address')
            assert seller_account.address is not None
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {seller_account.address}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    @pytest.mark.asyncio
    async def test_is_seller_real_blockchain(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        if not SELLER_PRIVATE_KEY:
            logger.warning("‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_account = account_service.get_seller_account()
            seller_address = seller_account.address
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            result = account_service.is_seller(seller_address)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å True –∏–ª–∏ False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            assert isinstance(result, bool)
            logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {result} –¥–ª—è –∞–¥—Ä–µ—Å–∞ {seller_address}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    @pytest.mark.asyncio
    async def test_validate_invite_code_real_blockchain(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        if not SELLER_PRIVATE_KEY:
            logger.warning("‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_account = account_service.get_seller_account()
            seller_address = seller_account.address
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞
            result = account_service.validate_invite_code(seller_address)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å True –∏–ª–∏ False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            assert isinstance(result, bool)
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result} –¥–ª—è –∞–¥—Ä–µ—Å–∞ {seller_address}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    @pytest.mark.asyncio
    async def test_is_user_activated_real_blockchain(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        if not SELLER_PRIVATE_KEY:
            logger.warning("‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_account = account_service.get_seller_account()
            seller_address = seller_account.address
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = account_service.is_user_activated(seller_address)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å True –∏–ª–∏ False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            assert isinstance(result, bool)
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {result} –¥–ª—è –∞–¥—Ä–µ—Å–∞ {seller_address}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_get_all_activated_users_real_blockchain(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            users = account_service.get_all_activated_users()
            
            assert isinstance(users, list)
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–ª–æ–∫—á–µ–π–Ω–µ —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
            assert all(isinstance(user, str) for user in users)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    @pytest.mark.asyncio
    async def test_batch_validate_invite_codes_real_blockchain(self):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º BlockchainService")
        
        if not SELLER_PRIVATE_KEY:
            logger.warning("‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_account = account_service.get_seller_account()
            seller_address = seller_account.address
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–ª–æ–∫—á–µ–π–Ω–µ)
            invite_codes = ["AMANITA-TEST-CODE1", "AMANITA-TEST-CODE2", "AMANITA-TEST-CODE3"]
            
            valid_codes, invalid_codes = account_service.batch_validate_invite_codes(invite_codes, seller_address)
            
            assert isinstance(valid_codes, list)
            assert isinstance(invalid_codes, list)
            assert len(valid_codes) + len(invalid_codes) == len(invite_codes)
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(valid_codes)} –≤–∞–ª–∏–¥–Ω—ã—Ö, {len(invalid_codes)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–†–µ–∞–ª—å–Ω—ã–π BlockchainService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# ================== –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° CONFIGURABLE STORAGE =====================

class TestAccountServiceStorageIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AccountService —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º storage"""
    
    def test_storage_configuration_and_fallback(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ storage –¥–ª—è AccountService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º storage –¥–ª—è AccountService")
        
        # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ storage
        storage_type = os.getenv("INTEGRATION_STORAGE", "mock")
        logger.info(f"üîß –¢–µ–∫—É—â–∏–π —Ç–∏–ø storage: {storage_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ storage —Ç–∏–ø –≤–∞–ª–∏–¥–µ–Ω
        valid_types = ["mock", "pinata", "arweave"]
        assert storage_type in valid_types, f"Storage —Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {valid_types}"
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è storage –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {storage_type}")
        
        # –¢–µ—Å—Ç 2: Fallback –º–µ—Ö–∞–Ω–∏–∑–º
        original_storage = os.getenv("INTEGRATION_STORAGE")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            os.environ["INTEGRATION_STORAGE"] = "invalid_type"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –ª–æ–≥–∏–∫—É
            storage_type = os.getenv("INTEGRATION_STORAGE", "mock")
            if storage_type not in ["mock", "pinata", "arweave"]:
                storage_type = "mock"  # Fallback
            
            assert storage_type == "mock", "–ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è mock"
            logger.info("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if original_storage:
                os.environ["INTEGRATION_STORAGE"] = original_storage
            else:
                os.environ.pop("INTEGRATION_STORAGE", None)
        
        logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç storage –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ fallback –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

# ================== –¢–ï–°–¢–´ –†–ï–ê–õ–¨–ù–´–• –ö–û–ù–¢–†–ê–ö–¢–û–í =====================

class TestAccountServiceContractIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AccountService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏"""
    
    def test_invite_nft_contract_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
        
        try:
            blockchain_service = BlockchainService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BlockchainService –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
            assert hasattr(blockchain_service, 'web3'), "BlockchainService –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å web3"
            assert hasattr(blockchain_service, 'get_contract'), "BlockchainService –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å get_contract"
            
            logger.info("‚úÖ InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ BlockchainService")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_contract_abi_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ InviteNFT —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ InviteNFT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        web3_provider = os.getenv("WEB3_PROVIDER_URI")
        network_id = os.getenv("NETWORK_ID")
        
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: WEB3_PROVIDER_URI = {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if web3_provider else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: NETWORK_ID = {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if network_id else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        try:
            blockchain_service = BlockchainService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BlockchainService –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å ABI
            assert hasattr(blockchain_service, 'load_contract_abi'), "BlockchainService –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å load_contract_abi"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ABI —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            # (—ç—Ç–æ —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –Ω–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
            logger.info("‚úÖ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ InviteNFT –≤–∞–ª–∏–¥–µ–Ω")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            logger.info("üîß –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ WEB3_PROVIDER_URI –∏ NETWORK_ID –≤ .env")
            pytest.skip(f"ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def test_contract_address_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ InviteNFT"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ InviteNFT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        invite_nft_address = os.getenv("INVITE_NFT_CONTRACT_ADDRESS")
        amanita_registry_address = os.getenv("AMANITA_REGISTRY_CONTRACT_ADDRESS")
        
        if invite_nft_address:
            logger.info(f"‚úÖ INVITE_NFT_CONTRACT_ADDRESS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {invite_nft_address}")
        else:
            logger.warning("‚ö†Ô∏è INVITE_NFT_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if amanita_registry_address:
            logger.info(f"‚úÖ AMANITA_REGISTRY_CONTRACT_ADDRESS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amanita_registry_address}")
        else:
            logger.warning("‚ö†Ô∏è AMANITA_REGISTRY_CONTRACT_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        # (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if invite_nft_address or amanita_registry_address:
            logger.info("‚úÖ –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
    
    def test_contract_function_calls(self):
        """–¢–µ—Å—Ç –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ AccountService"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ AccountService")
        
        if not SELLER_PRIVATE_KEY:
            logger.warning("‚ö†Ô∏è SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            pytest.skip("SELLER_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        try:
            blockchain_service = BlockchainService()
            account_service = AccountService(blockchain_service)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AccountService –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            seller_account = account_service.get_seller_account()
            seller_address = seller_account.address
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            result = account_service.is_seller(seller_address)
            assert isinstance(result, bool)
            
            logger.info(f"‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {result}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞")
            pytest.skip(f"–§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    def test_storage_service_integration(self, integration_storage_config):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AccountService —Å storage —Å–µ—Ä–≤–∏—Å–æ–º –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AccountService —Å storage —Å–µ—Ä–≤–∏—Å–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º storage —Å–µ—Ä–≤–∏—Å –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
        storage_service = integration_storage_config["service"]
        storage_type = integration_storage_config["devops_info"]["type"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ storage —Å–µ—Ä–≤–∏—Å –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
        if storage_type == "mock":
            # Mock storage –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            assert hasattr(storage_service, 'upload_file'), "Mock storage –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å upload_file"
            assert hasattr(storage_service, 'upload_json'), "Mock storage –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å upload_json"
            logger.info("‚úÖ Mock storage —Å–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        elif storage_type == "real":
            # –†–µ–∞–ª—å–Ω—ã–π storage –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
            assert hasattr(storage_service, 'upload_file'), "Real storage –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å upload_file"
            assert hasattr(storage_service, 'upload_json'), "Real storage –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å upload_json"
            logger.info("‚úÖ Real storage —Å–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AccountService –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å storage —Å–µ—Ä–≤–∏—Å–æ–º
        # (–≤ –±—É–¥—É—â–µ–º, –∫–æ–≥–¥–∞ AccountService –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å storage –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
        logger.info(f"‚úÖ Storage —Å–µ—Ä–≤–∏—Å —Ç–∏–ø–∞ '{storage_type}' –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AccountService")

# ================== –ó–ê–í–ï–†–®–ï–ù–ò–ï =====================

print("\n=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ACCOUNT SERVICE ===")
