#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –µ–¥–∏–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ Product, OrganicComponent –∏ PriceInfo.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from bot.model.product import Product, PriceInfo
from bot.model.organic_component import OrganicComponent

def test_complete_product_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        component1 = OrganicComponent(
            biounit_id='amanita_muscaria',
            description_cid='QmAmanita123',
            proportion='60%'
        )
        
        component2 = OrganicComponent(
            biounit_id='cordyceps_militaris', 
            description_cid='QmCordyceps456',
            proportion='40%'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ü–µ–Ω
        price_weight = PriceInfo(
            price=150,
            currency='EUR',
            weight='100',
            weight_unit='g'
        )
        
        price_volume = PriceInfo(
            price=75,
            currency='USD', 
            volume='50',
            volume_unit='ml'
        )
        
        price_simple = PriceInfo(
            price=25,
            currency='EUR'
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        product = Product(
            id='integration_test_product',
            alias='integration-test',
            status=1,
            title='Integration Test Product',
            categories=['mushrooms', 'adaptogens'],
            forms=['powder', 'capsules'],
            species='amanita_cordyceps_blend',
            cid='QmProductIntegration789',
            organic_components=[component1, component2],
            prices=[price_weight, price_volume, price_simple],
            cover_image_url='QmCoverIntegration999'
        )
        
        print('‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–∞')
        print(f'  - Product ID: {product.id}')
        print(f'  - Components: {len(product.organic_components)}')
        print(f'  - Prices: {len(product.prices)}')
        print(f'  - Total proportion: {sum(float(c.proportion.rstrip("%")) for c in product.organic_components)}%')
        
        pass
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}')
        assert False, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"

def test_multi_component_proportions():
    """–¢–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º 5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
        components = [
            OrganicComponent('comp1', 'QmComp1', '20%'),
            OrganicComponent('comp2', 'QmComp2', '20%'),
            OrganicComponent('comp3', 'QmComp3', '20%'),
            OrganicComponent('comp4', 'QmComp4', '20%'),
            OrganicComponent('comp5', 'QmComp5', '20%')
        ]
        
        price = PriceInfo(price=100, currency='EUR')
        
        product = Product(
            id='multi_comp_test',
            alias='multi-comp',
            status=1,
            title='Multi Component Test',
            categories=['blend'],
            forms=['powder'],
            species='multi_blend',
            cid='QmMultiComp',
            organic_components=components,
            prices=[price],
            cover_image_url='QmMultiCover'
        )
        
        print('‚úÖ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–µ–Ω')
        print(f'  - Components: {len(product.organic_components)}')
        print(f'  - All unique biounit_ids: {len(set(c.biounit_id for c in components)) == 5}')
        
        pass
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}')
        assert False, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"

def test_price_variations():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω"""
    try:
        component = OrganicComponent('test_comp', 'QmTestComp', '100%')
        
        # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω
        prices = [
            PriceInfo(price=50, currency='EUR'),  # –ü—Ä–æ—Å—Ç–∞—è —Ü–µ–Ω–∞
            PriceInfo(price=100, currency='USD', weight='50', weight_unit='g'),  # –í–µ—Å
            PriceInfo(price=75, currency='EUR', volume='30', volume_unit='ml'),  # –û–±—ä–µ–º
            PriceInfo(price=200, currency='GBP', weight='100', weight_unit='oz'),  # –î—Ä—É–≥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤–µ—Å–∞
            PriceInfo(price=150, currency='JPY', volume='100', volume_unit='l')   # –î—Ä—É–≥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –æ–±—ä–µ–º–∞
        ]
        
        product = Product(
            id='price_variations_test',
            alias='price-variations',
            status=1,
            title='Price Variations Test',
            categories=['test'],
            forms=['various'],
            species='test_species',
            cid='QmPriceTest',
            organic_components=[component],
            prices=prices,
            cover_image_url='QmPriceCover'
        )
        
        print('‚úÖ –¢–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω —É—Å–ø–µ—à–µ–Ω')
        print(f'  - Total prices: {len(product.prices)}')
        print(f'  - Weight-based prices: {sum(1 for p in prices if p.is_weight_based)}')
        print(f'  - Volume-based prices: {sum(1 for p in prices if p.is_volume_based)}')
        
        pass
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–µ–Ω: {e}')
        assert False, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"

if __name__ == '__main__':
    print('üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π')
    print('=' * 70)
    
    test_complete_product_integration()
    test_multi_component_proportions()
    test_price_variations()
    
    print('=' * 70)
    print('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
