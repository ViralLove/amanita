#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from bot.model.product import Product, PriceInfo
from bot.model.organic_component import OrganicComponent

def test_biounit_id_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è biounit_id"""
    test_cases = [
        ('a', True, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞'),
        ('a' * 50, True, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞'),
        ('a' * 51, False, '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã'),
        ('test_123', True, '–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ü–∏—Ñ—Ä—ã'),
        ('TestComp', True, '–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã'),
        ('test-comp', False, '–î–µ—Ñ–∏—Å—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã'),
        ('test comp', False, '–ü—Ä–æ–±–µ–ª—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã'),
        ('test@comp', False, '–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã'),
        ('', False, '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞'),
        ('   ', False, '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã')
    ]
    
    passed = 0
    total = len(test_cases)
    
    for biounit_id, should_pass, description in test_cases:
        try:
            component = OrganicComponent(
                biounit_id=biounit_id,
                description_cid='QmTest123',
                proportion='100%'
            )
            if should_pass:
                print(f'‚úÖ {description}: {biounit_id}')
                passed += 1
            else:
                print(f'‚ùå {description}: –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è {biounit_id}')
        except ValueError as e:
            if not should_pass:
                print(f'‚úÖ {description}: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω {biounit_id}')
                passed += 1
            else:
                print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {biounit_id}: {e}')
        except Exception as e:
            print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {type(e).__name__}: {e}')
    
    print(f'–¢–µ—Å—Ç biounit_id: {passed}/{total} –ø—Ä–æ—à–ª–∏')
    assert passed == total, f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {passed}/{total}"

def test_proportion_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
    test_cases = [
        ('0%', False, '–ù—É–ª–µ–≤–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('1%', True, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('100%', True, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('100.00%', True, '–ü—Ä–æ–ø–æ—Ä—Ü–∏—è —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏'),
        ('101%', False, '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ 100%'),
        ('-1%', False, '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('50.5%', True, '–î–µ—Å—è—Ç–∏—á–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('1g', True, '–ì—Ä–∞–º–º—ã'),
        ('0g', False, '–ù—É–ª–µ–≤—ã–µ –≥—Ä–∞–º–º—ã'),
        ('1000g', True, '–ë–æ–ª—å—à–∏–µ –≥—Ä–∞–º–º—ã'),
        ('50ml', True, '–ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã'),
        ('0ml', False, '–ù—É–ª–µ–≤—ã–µ –º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã'),
        ('invalid', False, '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    ]
    
    passed = 0
    total = len(test_cases)
    
    for proportion, should_pass, description in test_cases:
        try:
            component = OrganicComponent(
                biounit_id='test_comp',
                description_cid='QmTest123',
                proportion=proportion
            )
            if should_pass:
                print(f'‚úÖ {description}: {proportion}')
                passed += 1
            else:
                print(f'‚ùå {description}: –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è {proportion}')
        except ValueError as e:
            if not should_pass:
                print(f'‚úÖ {description}: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω {proportion}')
                passed += 1
            else:
                print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {proportion}: {e}')
        except Exception as e:
            print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {type(e).__name__}: {e}')
    
    print(f'–¢–µ—Å—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π: {passed}/{total} –ø—Ä–æ—à–ª–∏')
    assert passed == total, f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {passed}/{total}"

def test_price_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è —Ü–µ–Ω"""
    test_cases = [
        (0.01, True, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'),
        (0, False, '–ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞'),
        (-1, False, '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞'),
        (999999, True, '–ë–æ–ª—å—à–∞—è —Ü–µ–Ω–∞'),
        ('10.50', True, '–°—Ç—Ä–æ–∫–æ–≤–∞—è —Ü–µ–Ω–∞'),
        ('invalid', False, '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞'),
        (None, False, 'None —Ü–µ–Ω–∞')
    ]
    
    passed = 0
    total = len(test_cases)
    
    for price, should_pass, description in test_cases:
        try:
            price_info = PriceInfo(
                price=price,
                currency='EUR'
            )
            if should_pass:
                print(f'‚úÖ {description}: {price}')
                passed += 1
            else:
                print(f'‚ùå {description}: –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è {price}')
        except (ValueError, TypeError) as e:
            if not should_pass:
                print(f'‚úÖ {description}: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {price}')
                passed += 1
            else:
                print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {price}: {e}')
        except Exception as e:
            print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {type(e).__name__}: {e}')
    
    print(f'–¢–µ—Å—Ç —Ü–µ–Ω: {passed}/{total} –ø—Ä–æ—à–ª–∏')
    assert passed == total, f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {passed}/{total}"

def test_proportion_sum_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è —Å—É–º–º—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"""
    test_cases = [
        (['50%', '50%'], True, '–¢–æ—á–Ω–æ 100%'),
        (['33.33%', '33.33%', '33.34%'], True, '–°—É–º–º–∞ 100% —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º'),
        (['50%', '49%'], False, '–°—É–º–º–∞ 99%'),
        (['50%', '51%'], False, '–°—É–º–º–∞ 101%'),
        (['100%'], True, '–û–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç 100%'),
        (['25%', '25%', '25%', '25%'], True, '–ß–µ—Ç—ã—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ 25%'),
        (['1g', '2g'], True, '–ì—Ä–∞–º–º—ã (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—É–º–º–∞)'),
        (['50ml', '30ml'], True, '–ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—É–º–º–∞)')
    ]
    
    passed = 0
    total = len(test_cases)
    
    for proportions, should_pass, description in test_cases:
        try:
            components = []
            for i, proportion in enumerate(proportions):
                components.append(OrganicComponent(
                    biounit_id=f'comp_{i}',
                    description_cid=f'QmComp{i}',
                    proportion=proportion
                ))
            
            price = PriceInfo(price=100, currency='EUR')
            
            product = Product(
                id='test_proportions',
                alias='test-proportions',
                status=1,
                title='Test Proportions',
                categories=['test'],
                forms=['test'],
                species='test',
                cid='QmTestProp',
                organic_components=components,
                prices=[price],
                cover_image_url='QmTestCover'
            )
            
            if should_pass:
                print(f'‚úÖ {description}: {proportions}')
                passed += 1
            else:
                print(f'‚ùå {description}: –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è {proportions}')
                
        except ValueError as e:
            if not should_pass:
                print(f'‚úÖ {description}: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ {proportions}')
                passed += 1
            else:
                print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {proportions}: {e}')
        except Exception as e:
            print(f'‚ùå {description}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {type(e).__name__}: {e}')
    
    print(f'–¢–µ—Å—Ç —Å—É–º–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π: {passed}/{total} –ø—Ä–æ—à–ª–∏')
    assert passed == total, f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {passed}/{total}"

if __name__ == '__main__':
    print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –º–æ–¥–µ–ª–µ–π')
    print('=' * 60)
    
    results = []
    results.append(test_biounit_id_edge_cases())
    results.append(test_proportion_edge_cases())
    results.append(test_price_edge_cases())
    results.append(test_proportion_sum_edge_cases())
    
    print('=' * 60)
    passed_tests = sum(results)
    total_tests = len(results)
    print(f'‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã: {passed_tests}/{total_tests} –ø—Ä–æ—à–ª–∏')
    
    if passed_tests == total_tests:
        print('üéâ –í—Å–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã!')
    else:
        print('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏')
