#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import pytest
from bot.model.product import Product, OrganicComponent, PriceInfo

def test_product_with_priceinfo():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Product —Å PriceInfo"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        component1 = OrganicComponent(
            biounit_id='amanita_muscaria',
            description_cid='QmTest1',
            proportion='50%'
        )

        component2 = OrganicComponent(
            biounit_id='cordyceps_militaris',
            description_cid='QmTest2',
            proportion='50%'
        )

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—ã
        price1 = PriceInfo(
            price=100,
            currency='EUR',
            weight='100',
            weight_unit='g'
        )

        price2 = PriceInfo(
            price=200,
            currency='EUR',
            weight='200',
            weight_unit='g'
        )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product = Product(
            business_id='test_product_1',
            blockchain_id=1,
            status=1,
            title='Test Product',
            categories=['mushrooms'],
            forms=['powder'],
            species='amanita',
            cid='QmProductTest',
            organic_components=[component1, component2],
            prices=[price1, price2],
            cover_image_url='QmCoverTest'
        )

        print('‚úÖ Product —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º PriceInfo')
        print(f'  - business_id: {product.business_id}')
        print(f'  - blockchain_id: {product.blockchain_id}')
        print(f'  - status: {product.status}')
        print(f'  - title: {product.title}')
        print(f'  - components: {len(product.organic_components)}')
        print(f'  - prices: {len(product.prices)}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert product.business_id == 'test_product_1'
        assert product.blockchain_id == 1
        assert product.status == 1
        assert product.title == 'Test Product'
        assert len(product.organic_components) == 2
        assert len(product.prices) == 2

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Product: {e}')
        assert False, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"

def test_product_simple():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Product"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        component = OrganicComponent(
            biounit_id='simple_component',
            description_cid='QmSimple',
            proportion='100%'
        )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ü–µ–Ω—É
        price = PriceInfo(
            price=50,
            currency='USD'
        )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product = Product(
            business_id='simple_product',
            blockchain_id=2,
            status=1,
            title='Simple Product',
            categories=['herbs'],
            forms=['whole'],
            species='chamomile',
            cid='QmSimpleProduct',
            organic_components=[component],
            prices=[price],
            cover_image_url='QmSimpleCover'
        )

        print('‚úÖ –ü—Ä–æ—Å—Ç–æ–π Product —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
        print(f'  - business_id: {product.business_id}')
        print(f'  - blockchain_id: {product.blockchain_id}')
        print(f'  - status: {product.status}')
        print(f'  - title: {product.title}')
        print(f'  - components: {len(product.organic_components)}')
        print(f'  - prices: {len(product.prices)}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert product.business_id == 'simple_product'
        assert product.blockchain_id == 2
        assert product.status == 1
        assert product.title == 'Simple Product'
        assert len(product.organic_components) == 1
        assert len(product.prices) == 1

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Product: {e}')
        assert False, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"

if __name__ == '__main__':
    print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Product —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º PriceInfo')
    print('=' * 60)

    test_product_with_priceinfo()
    test_product_simple()

    print('=' * 60)
    print('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
