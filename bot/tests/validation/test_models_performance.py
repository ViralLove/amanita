#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import sys
import os
import time
from typing import List
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from bot.model.product import Product, PriceInfo
from bot.model.organic_component import OrganicComponent

def measure_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        return result, execution_time
    return wrapper

@measure_time
def create_single_component():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ OrganicComponent"""
    return OrganicComponent(
        biounit_id='test_component',
        description_cid='QmTestComponent123',
        proportion='100%'
    )

@measure_time
def create_single_price():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ PriceInfo"""
    return PriceInfo(
        price=100,
        currency='EUR',
        weight='100',
        weight_unit='g'
    )

@measure_time
def create_single_product():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ Product"""
    component = OrganicComponent('comp1', 'QmComp1', '100%')
    price = PriceInfo(100, 'EUR')
    
    return Product(
        id='test_product',
        alias='test-product',
        status=1,
        title='Test Product',
        categories=['test'],
        forms=['powder'],
        species='test_species',
        cid='QmTestProduct',
        organic_components=[component],
        prices=[price],
        cover_image_url='QmTestCover'
    )

@measure_time
def create_complex_product():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ Product —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏"""
    components = []
    for i in range(5):
        components.append(OrganicComponent(
            biounit_id=f'component_{i}',
            description_cid=f'QmComp{i}',
            proportion='20%'
        ))
    
    prices = []
    currencies = ['EUR', 'USD', 'GBP', 'JPY', 'RUB']
    weight_units = ['g', 'kg', 'oz', 'lb']
    
    for i in range(10):
        prices.append(PriceInfo(
            price=100 + i * 10,
            currency=currencies[i % len(currencies)],
            weight=str((i + 1) * 50),
            weight_unit=weight_units[i % len(weight_units)]
        ))
    
    return Product(
        id='complex_product',
        alias='complex-product',
        status=1,
        title='Complex Test Product',
        categories=['mushrooms', 'adaptogens', 'nootropics'],
        forms=['powder', 'capsules', 'extract'],
        species='complex_blend',
        cid='QmComplexProduct',
        organic_components=components,
        prices=prices,
        cover_image_url='QmComplexCover'
    )

@measure_time
def create_batch_products(count: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    products = []
    
    for i in range(count):
        component = OrganicComponent(f'comp_{i}', f'QmComp{i}', '100%')
        price = PriceInfo(100 + i, 'EUR')
        
        product = Product(
            id=f'product_{i}',
            alias=f'product-{i}',
            status=1,
            title=f'Product {i}',
            categories=['test'],
            forms=['powder'],
            species=f'species_{i}',
            cid=f'QmProduct{i}',
            organic_components=[component],
            prices=[price],
            cover_image_url=f'QmCover{i}'
        )
        products.append(product)
    
    return products

def test_single_operations_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π')
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    component, comp_time = create_single_component()
    print(f'  OrganicComponent: {comp_time*1000:.2f}ms')
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
    price, price_time = create_single_price()
    print(f'  PriceInfo: {price_time*1000:.2f}ms')
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    product, prod_time = create_single_product()
    print(f'  Product: {prod_time*1000:.2f}ms')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    max_time = 0.001  # 1ms
    
    results = {
        'OrganicComponent': comp_time < max_time,
        'PriceInfo': price_time < max_time,
        'Product': prod_time < max_time
    }
    
    print(f'  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (<1ms):')
    for operation, passed in results.items():
        status = '‚úÖ' if passed else '‚ùå'
        print(f'    {status} {operation}')
    
    assert all(results.values()), "–ù–µ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"

def test_complex_operations_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π')
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    complex_product, complex_time = create_complex_product()
    print(f'  –°–ª–æ–∂–Ω—ã–π Product (5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, 10 —Ü–µ–Ω): {complex_time*1000:.2f}ms')
    
    # –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    batch_products, batch_time = create_batch_products(100)
    avg_time = batch_time / 100
    print(f'  –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ 100 –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {batch_time*1000:.2f}ms')
    print(f'  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç: {avg_time*1000:.2f}ms')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    max_complex_time = 0.010  # 10ms –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    max_avg_time = 0.005     # 5ms –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
    
    results = {
        '–°–ª–æ–∂–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç': complex_time < max_complex_time,
        '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è': avg_time < max_avg_time
    }
    
    print(f'  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:')
    for operation, passed in results.items():
        status = '‚úÖ' if passed else '‚ùå'
        print(f'    {status} {operation}')
    
    assert all(results.values()), "–ù–µ –≤—Å–µ —Å–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"

def test_validation_overhead():
    """–¢–µ—Å—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ)
    start_time = time.perf_counter()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
    for i in range(1000):
        # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        test_id = f'test_{i}'
        test_price = 100 + i
        test_cid = f'QmTest{i}'
    
    baseline_time = time.perf_counter() - start_time
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    start_time = time.perf_counter()
    
    for i in range(100):  # –ú–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        component = OrganicComponent(f'comp_{i}', f'QmComp{i}', '100%')
    
    validation_time = time.perf_counter() - start_time
    avg_validation_time = validation_time / 100
    
    print(f'  –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è (1000 –æ–ø–µ—Ä–∞—Ü–∏–π): {baseline_time*1000:.2f}ms')
    print(f'  –í—Ä–µ–º—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (100 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤): {validation_time*1000:.2f}ms')
    print(f'  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {avg_validation_time*1000:.2f}ms')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    max_overhead = 0.005  # 5ms –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞–∫—Å–∏–º—É–º
    overhead_ok = avg_validation_time < max_overhead
    
    status = '‚úÖ' if overhead_ok else '‚ùå'
    print(f'    {status} –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–µ–º–ª–µ–º—ã')
    
    assert overhead_ok, "–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã"

if __name__ == '__main__':
    print('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π')
    print('=' * 70)
    
    results = []
    results.append(test_single_operations_performance())
    print()
    results.append(test_complex_operations_performance())
    print()
    results.append(test_validation_overhead())
    
    print('=' * 70)
    passed_tests = sum(results)
    total_tests = len(results)
    print(f'‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {passed_tests}/{total_tests} –ø—Ä–æ—à–ª–∏')
    
    if passed_tests == total_tests:
        print('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω—ã!')
        print('üí° –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ')
    else:
        print('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ—à–ª–∏')
        print('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
