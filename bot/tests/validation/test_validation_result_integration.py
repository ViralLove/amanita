#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ValidationResult –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from bot.model.product import Product, PriceInfo
from bot.model.organic_component import OrganicComponent
from bot.validation import ValidationFactory

def test_validation_result_details():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ValidationResult"""
    print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ValidationResult')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
    cid_validator = ValidationFactory.get_cid_validator()
    proportion_validator = ValidationFactory.get_proportion_validator()
    price_validator = ValidationFactory.get_price_validator()
    
    # –¢–µ—Å—Ç CID –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print('\nüìã –¢–µ—Å—Ç CID –≤–∞–ª–∏–¥–∞—Ü–∏–∏:')
    test_cids = [
        ('invalid_cid', False, '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π CID'),
        ('QmValidCID123', True, '–í–∞–ª–∏–¥–Ω—ã–π CID'),
        ('', False, '–ü—É—Å—Ç–æ–π CID'),
        ('Qm' + 'a' * 100, False, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π CID')
    ]
    
    for cid, should_be_valid, description in test_cids:
        result = cid_validator.validate(cid)
        status = '‚úÖ' if result.is_valid == should_be_valid else '‚ùå'
        print(f'  {status} {description}: {cid}')
        if not result.is_valid:
            print(f'    –û—à–∏–±–∫–∞: {result.error_message}')
            print(f'    –ü–æ–ª–µ: {result.field_name}')
            print(f'    –ö–æ–¥: {result.error_code}')
            if result.suggestions:
                print(f'    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {result.suggestions}')
    
    # –¢–µ—Å—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    print('\nüìã –¢–µ—Å—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π:')
    test_proportions = [
        ('0%', False, '–ù—É–ª–µ–≤–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('101%', False, '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ 100%'),
        ('50%', True, '–í–∞–ª–∏–¥–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è'),
        ('100g', True, '–í–∞–ª–∏–¥–Ω—ã–µ –≥—Ä–∞–º–º—ã'),
        ('invalid', False, '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    ]
    
    for proportion, should_be_valid, description in test_proportions:
        result = proportion_validator.validate(proportion)
        status = '‚úÖ' if result.is_valid == should_be_valid else '‚ùå'
        print(f'  {status} {description}: {proportion}')
        if not result.is_valid:
            print(f'    –û—à–∏–±–∫–∞: {result.error_message}')
            print(f'    –ü–æ–ª–µ: {result.field_name}')
            print(f'    –ö–æ–¥: {result.error_code}')
            if result.suggestions:
                print(f'    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {result.suggestions}')
    
    # –¢–µ—Å—Ç —Ü–µ–Ω
    print('\nüìã –¢–µ—Å—Ç —Ü–µ–Ω:')
    test_prices = [
        (-10, False, '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞'),
        (0, False, '–ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞'),
        (100, True, '–í–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞'),
        ('invalid', False, '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞')
    ]
    
    for price, should_be_valid, description in test_prices:
        result = price_validator.validate(price)
        status = '‚úÖ' if result.is_valid == should_be_valid else '‚ùå'
        print(f'  {status} {description}: {price}')
        if not result.is_valid:
            print(f'    –û—à–∏–±–∫–∞: {result.error_message}')
            print(f'    –ü–æ–ª–µ: {result.field_name}')
            print(f'    –ö–æ–¥: {result.error_code}')
            if result.suggestions:
                print(f'    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {result.suggestions}')
    
    pass

def test_model_validation_errors():
    """–¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—è—Ö"""
    print('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª—è—Ö')
    
    # –¢–µ—Å—Ç OrganicComponent –æ—à–∏–±–æ–∫
    print('\nüìã OrganicComponent –æ—à–∏–±–∫–∏:')
    try:
        component = OrganicComponent(
            biounit_id='invalid-id-with-dashes',
            description_cid='invalid_cid',
            proportion='150%'
        )
        print('  ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    except ValueError as e:
        print(f'  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}')
    
    # –¢–µ—Å—Ç PriceInfo –æ—à–∏–±–æ–∫
    print('\nüìã PriceInfo –æ—à–∏–±–∫–∏:')
    try:
        price = PriceInfo(
            price=-50,
            currency='INVALID',
            weight='-100',
            weight_unit='invalid_unit'
        )
        print('  ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    except ValueError as e:
        print(f'  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}')
    
    # –¢–µ—Å—Ç Product –æ—à–∏–±–æ–∫
    print('\nüìã Product –æ—à–∏–±–∫–∏:')
    try:
        component1 = OrganicComponent('comp1', 'QmComp1', '50%')
        component2 = OrganicComponent('comp1', 'QmComp2', '50%')  # –î—É–±–ª–∏—Ä—É—é—â–∏–π biounit_id
        
        product = Product(
            id='test_product',
            alias='test-product',
            status=1,
            title='Test Product',
            categories=['test'],
            forms=['powder'],
            species='test_species',
            cid='invalid_cid',
            organic_components=[component1, component2],
            prices=[PriceInfo(100, 'EUR')],
            cover_image_url='invalid_cover'
        )
        print('  ‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    except ValueError as e:
        print(f'  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}')
    
    pass

def test_validation_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
    
    import time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CID
    start_time = time.perf_counter()
    cid_validator = ValidationFactory.get_cid_validator()
    
    for i in range(1000):
        cid_validator.validate(f'QmTestCID{i}')
    
    cid_time = time.perf_counter() - start_time
    print(f'  CID –≤–∞–ª–∏–¥–∞—Ü–∏—è (1000 —Ä–∞–∑): {cid_time*1000:.2f}ms')
    print(f'  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {cid_time:.6f}ms –Ω–∞ CID')
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    start_time = time.perf_counter()
    proportion_validator = ValidationFactory.get_proportion_validator()
    
    for i in range(1000):
        proportion_validator.validate(f'{i % 100}%')
    
    proportion_time = time.perf_counter() - start_time
    print(f'  –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è (1000 —Ä–∞–∑): {proportion_time*1000:.2f}ms')
    print(f'  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {proportion_time:.6f}ms –Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏—é')
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω
    start_time = time.perf_counter()
    price_validator = ValidationFactory.get_price_validator()
    
    for i in range(1000):
        price_validator.validate(i + 1)
    
    price_time = time.perf_counter() - start_time
    print(f'  –¶–µ–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è (1000 —Ä–∞–∑): {price_time*1000:.2f}ms')
    print(f'  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {price_time:.6f}ms –Ω–∞ —Ü–µ–Ω—É')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    max_time_per_validation = 0.001  # 1ms –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    performance_ok = (
        cid_time < max_time_per_validation and
        proportion_time < max_time_per_validation and
        price_time < max_time_per_validation
    )
    
    status = '‚úÖ' if performance_ok else '‚ùå'
    print(f'  {status} –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–µ–º–ª–µ–º–∞')
    
    assert performance_ok, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–∞"

if __name__ == '__main__':
    print('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ValidationResult')
    print('=' * 70)
    
    results = []
    results.append(test_validation_result_details())
    results.append(test_model_validation_errors())
    results.append(test_validation_performance())
    
    print('=' * 70)
    passed_tests = sum(results)
    total_tests = len(results)
    print(f'‚úÖ –¢–µ—Å—Ç—ã ValidationResult: {passed_tests}/{total_tests} –ø—Ä–æ—à–ª–∏')
    
    if passed_tests == total_tests:
        print('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã ValidationResult —É—Å–ø–µ—à–Ω—ã!')
        print('üí° –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
    else:
        print('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã ValidationResult –Ω–µ –ø—Ä–æ—à–ª–∏')
        print('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
