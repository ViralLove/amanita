"""
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö
—Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
"""

import re
import decimal
from typing import Any, Dict, List, Optional, Union
from decimal import Decimal

from .rules import ValidationRule, ValidationResult
from .exceptions import (
    CIDValidationError,
    ProportionValidationError,
    PriceValidationError,
    ProductValidationError
)


class CIDValidator(ValidationRule[str]):
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è IPFS CID.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ CID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É IPFS:
    - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Qm'
    - –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    - –ò–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    """
    
    def __init__(self, min_length: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä CID.
        
        Args:
            min_length: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ CID
        """
        self.min_length = min_length
        self.cid_pattern = re.compile(r'^Qm[a-zA-Z0-9]+$')
    
    def validate(self, value: str) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç CID.
        
        Args:
            value: CID –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f"üîç CIDValidator.validate: –Ω–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é CID")
        logger.info(f"üìã –í—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{value}' (—Ç–∏–ø: {type(value)})")
        
        if not value:
            logger.warning(f"‚ö†Ô∏è CID –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É")
            return ValidationResult.failure(
                "CID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field_name="cid",
                field_value=value,
                error_code="EMPTY_CID"
            )
        
        if not isinstance(value, str):
            logger.warning(f"‚ö†Ô∏è CID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É")
            return ValidationResult.failure(
                "CID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
                field_name="cid",
                field_value=value,
                error_code="INVALID_CID_TYPE"
            )
        
        if len(value) < self.min_length:
            logger.warning(f"‚ö†Ô∏è CID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(value)} < {self.min_length}")
            return ValidationResult.failure(
                f"CID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {self.min_length} —Å–∏–º–≤–æ–ª–æ–≤",
                field_name="cid",
                field_value=value,
                error_code="CID_TOO_SHORT"
            )
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å CID: '{value}' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Qm'? {value.startswith('Qm')}")
        if not value.startswith('Qm'):
            logger.warning(f"‚ö†Ô∏è CID –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Qm': '{value}'")
            return ValidationResult.failure(
                "CID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'Qm'",
                field_name="cid",
                field_value=value,
                error_code="INVALID_CID_PREFIX"
            )
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω CID: '{value}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É? {bool(self.cid_pattern.match(value))}")
        if not self.cid_pattern.match(value):
            logger.warning(f"‚ö†Ô∏è CID —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: '{value}'")
            return ValidationResult.failure(
                "CID —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã",
                field_name="cid",
                field_value=value,
                error_code="INVALID_CID_CHARACTERS"
            )
        
        logger.info(f"‚úÖ CID '{value}' –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return ValidationResult.success()


class ProportionValidator(ValidationRule[str]):
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - –ü—Ä–æ—Ü–µ–Ω—Ç—ã: 100%, 50%
    - –í–µ—Å: 100g, 50.5g, 1kg
    - –û–±—ä–µ–º: 30ml, 1.5l
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–ø–æ—Ä—Ü–∏–π."""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        self.percentage_pattern = re.compile(r'^(\d{1,3})(?:\.\d+)?%$')
        self.weight_pattern = re.compile(r'^(-?\d+(?:\.\d+)?)\s*(g|kg|oz|lb)$')
        self.volume_pattern = re.compile(r'^(-?\d+(?:\.\d+)?)\s*(ml|l|oz_fl)$')
    
    def validate(self, value: str) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏—é.
        
        Args:
            value: –ü—Ä–æ–ø–æ—Ä—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not value:
            return ValidationResult.failure(
                "–ü—Ä–æ–ø–æ—Ä—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π",
                field_name="proportion",
                field_value=value,
                error_code="EMPTY_PROPORTION"
            )
        
        if not isinstance(value, str):
            return ValidationResult.failure(
                "–ü—Ä–æ–ø–æ—Ä—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
                field_name="proportion",
                field_value=value,
                error_code="INVALID_PROPORTION_TYPE"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        percentage_match = self.percentage_pattern.match(value)
        if percentage_match:
            percentage = int(percentage_match.group(1))
            if percentage < 1 or percentage > 100:
                return ValidationResult.failure(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%",
                    field_name="proportion",
                    field_value=value,
                    error_code="INVALID_PERCENTAGE_RANGE"
                )
            return ValidationResult.success()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å
        weight_match = self.weight_pattern.match(value)
        if weight_match:
            weight_value = float(weight_match.group(1))
            if weight_value <= 0:
                return ValidationResult.failure(
                    "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                    field_name="proportion",
                    field_value=value,
                    error_code="INVALID_WEIGHT_VALUE"
                )
            return ValidationResult.success()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
        volume_match = self.volume_pattern.match(value)
        if volume_match:
            volume_value = float(volume_match.group(1))
            if volume_value <= 0:
                return ValidationResult.failure(
                    "–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                    field_name="proportion",
                    field_value=value,
                    error_code="INVALID_VOLUME_VALUE"
                )
            return ValidationResult.success()
        
        return ValidationResult.failure(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 50%, 100g, 30ml",
            field_name="proportion",
            field_value=value,
            error_code="INVALID_PROPORTION_FORMAT"
        )


class PriceValidator(ValidationRule[Union[int, float, str, Decimal]]):
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –¶–µ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    """
    
    SUPPORTED_CURRENCIES = {
        'EUR', 'USD', 'GBP', 'JPY', 'RUB', 'CNY', 'USDT', 'ETH', 'BTC'
    }
    
    def __init__(self, min_price: Union[int, float, Decimal] = 0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ü–µ–Ω.
        
        Args:
            min_price: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞
        """
        self.min_price = Decimal(str(min_price))
    
    def validate(self, value: Union[int, float, str, Decimal]) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ü–µ–Ω—É.
        
        Args:
            value: –¶–µ–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if value is None:
            return ValidationResult.failure(
                "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π",
                field_name="price",
                field_value=value,
                error_code="EMPTY_PRICE"
            )
        
        try:
            price_decimal = Decimal(str(value))
        except (ValueError, TypeError, decimal.InvalidOperation):
            return ValidationResult.failure(
                "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                field_name="price",
                field_value=value,
                error_code="INVALID_PRICE_TYPE"
            )
        
        if price_decimal <= self.min_price:
            return ValidationResult.failure(
                f"–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {self.min_price}",
                field_name="price",
                field_value=value,
                error_code="PRICE_TOO_LOW"
            )
        
        return ValidationResult.success()
    
    def validate_with_currency(self, price: Union[int, float, str, Decimal], currency: str) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –≤–∞–ª—é—Ç–æ–π.
        
        Args:
            price: –¶–µ–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            currency: –í–∞–ª—é—Ç–∞
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        # –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price_result = self.validate(price)
        if not price_result.is_valid:
            return price_result
        
        # –ó–∞—Ç–µ–º –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É
        if not currency:
            return ValidationResult.failure(
                "–í–∞–ª—é—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π",
                field_name="currency",
                field_value=currency,
                error_code="EMPTY_CURRENCY"
            )
        
        if currency.upper() not in self.SUPPORTED_CURRENCIES:
            return ValidationResult.failure(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {currency}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(sorted(self.SUPPORTED_CURRENCIES))}",
                field_name="currency",
                field_value=currency,
                error_code="UNSUPPORTED_CURRENCY"
            )
        
        return ValidationResult.success()


class ProductValidator(ValidationRule[Dict[str, Any]]):
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (business_id, title, cover_image_url, species, organic_components)
    - –í–∞–ª–∏–¥–∞—Ü–∏—è business_id –∏ blockchain_id
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (cover_image_url —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cover_image)
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
        self.cid_validator = CIDValidator()
        self.proportion_validator = ProportionValidator()
        self.price_validator = PriceValidator()
    
    def validate(self, value: Dict[str, Any]) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç.
        
        Args:
            value: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not isinstance(value, dict):
            return ValidationResult.failure(
                "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º",
                field_name="product",
                field_value=value,
                error_code="INVALID_PRODUCT_TYPE"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['business_id', 'title', 'cover_image_url', 'species', 'organic_components']
        for field in required_fields:
            if field not in value:
                return ValidationResult.failure(
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}",
                    field_name=field,
                    field_value=None,
                    error_code="MISSING_REQUIRED_FIELD"
                )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º business_id
        business_id = value.get('business_id')
        if not business_id:
            return ValidationResult.failure(
                "business_id –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field_name="business_id",
                field_value=business_id,
                error_code="MISSING_BUSINESS_ID"
            )
        
        # business_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        if not isinstance(business_id, str) or not business_id.strip():
            return ValidationResult.failure(
                "business_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π",
                field_name="business_id",
                field_value=business_id,
                error_code="INVALID_BUSINESS_ID"
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º blockchain_id (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        blockchain_id = value.get('blockchain_id')
        if blockchain_id is not None:
            if not isinstance(blockchain_id, (int, str)) or not blockchain_id:
                return ValidationResult.failure(
                    "blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π",
                    field_name="blockchain_id",
                    field_value=blockchain_id,
                    error_code="INVALID_BLOCKCHAIN_ID"
                )
            
            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            if isinstance(blockchain_id, (int, float)) and blockchain_id <= 0:
                return ValidationResult.failure(
                    "blockchain_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                    field_name="blockchain_id",
                    field_value=blockchain_id,
                    error_code="INVALID_BLOCKCHAIN_ID_VALUE"
                )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = value.get('title')
        if not title or not title.strip():
            return ValidationResult.failure(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field_name="title",
                field_value=title,
                error_code="EMPTY_TITLE"
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º species
        species = value.get('species')
        if not species or not species.strip():
            return ValidationResult.failure(
                "Species –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field_name="species",
                field_value=species,
                error_code="EMPTY_SPECIES"
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        organic_components = value.get('organic_components', [])
        if not organic_components:
            return ValidationResult.failure(
                "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
                field_name="organic_components",
                field_value=organic_components,
                error_code="EMPTY_ORGANIC_COMPONENTS"
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        for i, component in enumerate(organic_components):
            component_result = self._validate_component(component, i)
            if not component_result.is_valid:
                return component_result
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (cover_image_url –∏–ª–∏ cover_image –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        cover_image_url = value.get('cover_image_url') or value.get('cover_image')
        if cover_image_url:
            image_result = self.cid_validator.validate(cover_image_url)
            if not image_result.is_valid:
                image_result.field_name = "cover_image_url"
                return image_result
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        prices = value.get('prices', [])
        for i, price_data in enumerate(prices):
            price_result = self._validate_price(price_data, i)
            if not price_result.is_valid:
                return price_result
        
        return ValidationResult.success()
    
    def _validate_component(self, component: Dict[str, Any], index: int) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
        
        Args:
            component: –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            index: –ò–Ω–¥–µ–∫—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not isinstance(component, dict):
            return ValidationResult.failure(
                f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {index} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º",
                field_name=f"organic_components[{index}]",
                field_value=component,
                error_code="INVALID_COMPONENT_TYPE"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        required_component_fields = ['biounit_id', 'description_cid', 'proportion']
        for field in required_component_fields:
            if field not in component:
                return ValidationResult.failure(
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {field}",
                    field_name=f"organic_components[{index}].{field}",
                    field_value=None,
                    error_code="MISSING_COMPONENT_FIELD"
                )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º biounit_id
        biounit_id = component.get('biounit_id')
        if not biounit_id or not biounit_id.strip():
            return ValidationResult.failure(
                "biounit_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field_name=f"organic_components[{index}].biounit_id",
                field_value=biounit_id,
                error_code="EMPTY_BIOUNIT_ID"
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º description_cid
        description_cid = component.get('description_cid')
        cid_result = self.cid_validator.validate(description_cid)
        if not cid_result.is_valid:
            cid_result.field_name = f"organic_components[{index}].description_cid"
            return cid_result
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º proportion
        proportion = component.get('proportion')
        proportion_result = self.proportion_validator.validate(proportion)
        if not proportion_result.is_valid:
            proportion_result.field_name = f"organic_components[{index}].proportion"
            return proportion_result
        
        return ValidationResult.success()
    
    def _validate_price(self, price_data: Dict[str, Any], index: int) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã.
        
        Args:
            price_data: –î–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
            index: –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω—ã
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not isinstance(price_data, dict):
            return ValidationResult.failure(
                f"–¶–µ–Ω–∞ {index} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º",
                field_name=f"prices[{index}]",
                field_value=price_data,
                error_code="INVALID_PRICE_TYPE"
            )
        
        price = price_data.get('price')
        currency = price_data.get('currency', 'EUR')
        
        return self.price_validator.validate_with_currency(price, currency)
