api_key_management_acceptance_criteria:
  storage_solution:
    - name: "Blockchain-based API key storage"
      description: "API ключи хранятся в смарт-контракте с привязкой к селлеру"
      criteria:
        - "API ключи привязаны к адресу селлера в блокчейне"
        - "Только авторизованный селлер может получить свой API ключ"
        - "Публичные данные (API ключ, адрес селлера) хранятся в контракте"
        - "Секретные ключи генерируются локально и не хранятся в блокчейне"
        - "Поддержка множественных API ключей для одного селлера"
    
    - name: "Local secret key management"
      description: "Секретные ключи управляются локально с шифрованием"
      criteria:
        - "Секретные ключи шифруются AES-256 перед сохранением"
        - "Ключи шифрования хранятся в защищенном месте (.env)"
        - "Поддержка ротации секретных ключей"
        - "Безопасное удаление старых ключей"

  key_operations:
    - name: "API key generation"
      description: "Система генерирует новые API ключи"
      criteria:
        - "Генерация UUID для API ключей"
        - "Генерация криптографически стойких секретных ключей"
        - "Связывание API ключа с адресом селлера"
        - "Запись в блокчейн контракт"
        - "Локальное сохранение зашифрованного секретного ключа"
    
    - name: "API key validation"
      description: "Система валидирует API ключи при запросах"
      criteria:
        - "Проверка существования API ключа в блокчейне"
        - "Проверка привязки к селлеру"
        - "Проверка активности ключа"
        - "Получение секретного ключа для HMAC валидации"
        - "Кэширование результатов для производительности"
    
    - name: "API key revocation"
      description: "Система поддерживает отзыв API ключей"
      criteria:
        - "Деактивация ключа в блокчейне"
        - "Удаление локального секретного ключа"
        - "Немедленная блокировка доступа"
        - "Логирование операций отзыва"

  blockchain_integration:
    - name: "Smart contract integration"
      description: "Интеграция с существующим блокчейн сервисом"
      criteria:
        - "Использование существующего BlockchainService"
        - "Интеграция с AmanitaRegistry контрактом"
        - "Поддержка существующих профилей (localhost, mainnet, amoy)"
        - "Обработка ошибок блокчейн операций"
        - "Логирование всех блокчейн взаимодействий"
    
    - name: "Contract functions"
      description: "Функции смарт-контракта для управления API ключами"
      criteria:
        - "registerApiKey(sellerAddress, apiKey) - регистрация ключа"
        - "getApiKey(sellerAddress) - получение ключа"
        - "revokeApiKey(sellerAddress, apiKey) - отзыв ключа"
        - "isApiKeyActive(sellerAddress, apiKey) - проверка активности"
        - "getSellerByApiKey(apiKey) - получение селлера по ключу"

  security:
    - name: "Encryption and key management"
      description: "Безопасное управление секретными ключами"
      criteria:
        - "AES-256 шифрование секретных ключей"
        - "Безопасное хранение ключей шифрования"
        - "Автоматическая ротация ключей"
        - "Безопасное удаление старых ключей"
        - "Аудит всех операций с ключами"
    
    - name: "Access control"
      description: "Контроль доступа к API ключам"
      criteria:
        - "Только владелец может управлять своими ключами"
        - "Проверка подписи для всех операций"
        - "Rate limiting для операций с ключами"
        - "Логирование всех попыток доступа"

  integration:
    - name: "HMAC middleware integration"
      description: "Интеграция с существующим HMAC middleware"
      criteria:
        - "Замена заглушки _validate_api_key на реальную проверку"
        - "Получение секретного ключа из локального хранилища"
        - "Кэширование результатов валидации"
        - "Обработка ошибок блокчейн операций"
        - "Fallback на локальную проверку при недоступности блокчейна"
    
    - name: "Service factory integration"
      description: "Интеграция с существующим ServiceFactory"
      criteria:
        - "Добавление ApiKeyService в ServiceFactory"
        - "Dependency injection для API маршрутов"
        - "Thread-safe использование в FastAPI"
        - "Интеграция с существующими сервисами"

  performance:
    - name: "Caching and optimization"
      description: "Оптимизация производительности"
      criteria:
        - "Кэширование API ключей в памяти"
        - "Кэширование результатов блокчейн запросов"
        - "Batch операции для множественных ключей"
        - "Асинхронные операции где возможно"
        - "Мониторинг производительности"

  testing:
    - name: "Unit testing"
      description: "Комплексное тестирование системы"
      criteria:
        - "Тесты генерации API ключей"
        - "Тесты валидации ключей"
        - "Тесты блокчейн интеграции"
        - "Тесты шифрования/дешифрования"
        - "Тесты отзыва ключей"
        - "Моки для блокчейн операций"
    
    - name: "Integration testing"
      description: "Тестирование интеграции с HMAC middleware"
      criteria:
        - "Тесты полного цикла аутентификации"
        - "Тесты с реальными API запросами"
        - "Тесты обработки ошибок"
        - "Тесты производительности"

  documentation:
    - name: "API documentation"
      description: "Документация API для управления ключами"
      criteria:
        - "OpenAPI документация для эндпоинтов управления ключами"
        - "Примеры использования"
        - "Описание процесса генерации ключей"
        - "Инструкции по безопасности"
    
    - name: "Code documentation"
      description: "Документация кода"
      criteria:
        - "Docstrings для всех методов"
        - "Комментарии к сложной логике"
        - "Примеры использования в коде"
        - "README с описанием архитектуры" 