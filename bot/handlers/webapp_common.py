from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineQueryResultArticle, InputTextMessageContent
from bot.services.localization import Localization
from bot.fsm.onboarding_states import OnboardingStates
from bot.model.user_settings import UserSettings
from bot.services.blockchain import BlockchainService
from bot.services.account import AccountService
import logging
import json

router = Router()
logger = logging.getLogger(__name__)
user_settings = UserSettings()
blockchain = BlockchainService()
account_service = AccountService(blockchain)

@router.message(F.web_app_data)
async def handle_web_app_data(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    logger.info(f"[WEBAPP] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp –¥–ª—è user_id={user_id}: {message.web_app_data.data}")
    logger.info(f"[WEBAPP] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
    logger.info(f"[WEBAPP] –ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: {dir(message)}")

    try:
        data = json.loads(message.web_app_data.data)
        event = data.get("event")
        wallet_address = data.get("address")
        query_id = data.get("query_id")
        
        logger.info(f"[WEBAPP] –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: event={event}, address={wallet_address}, query_id={query_id}")
        logger.info(f"[WEBAPP] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2)}")

        if not wallet_address or not wallet_address.startswith('0x') or len(wallet_address) != 42:
            logger.warning(f"[WEBAPP][WARNING] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞: {wallet_address}")
            await message.answer(loc.t("onboarding.invalid_address_format"))
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Invite NFT –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        if event == "restored_access":
            has_invite = await account_service.validate_invite_code(wallet_address)
            if not has_invite:
                logger.warning(f"[WEBAPP][BLOCKED] –ê–¥—Ä–µ—Å {wallet_address} –Ω–µ –≤–ª–∞–¥–µ–µ—Ç Invite NFT")
                await message.answer(loc.t("onboarding.no_invite_nft"))
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ —Ñ–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info(f"[WEBAPP] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å {wallet_address} –¥–ª—è user_id={user_id}")
        user_settings.set_web3_credentials(user_id, wallet_address, None)
        user_settings.set_setting(user_id, 'wallet_connected', True)

        # FSM-–ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è created_access
        current_state = await state.get_state()
        logger.info(f"[WEBAPP] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state}, event: {event}")

        if event == "created_access" and current_state == OnboardingStates.WebAppConnecting.state:
            logger.info(f"[WEBAPP] –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è user_id={user_id}")
            user_settings.set_setting(user_id, 'invite_verified', True)
            await state.set_state(OnboardingStates.Completed)

            # –ü–æ–ª—É—á–∞–µ–º invite_code –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            data = await state.get_data()
            logger.info(f"[WEBAPP] –î–∞–Ω–Ω—ã–µ –∏–∑ FSM: {data}")
            invite_code = data.get('invite_code')
            
            new_invite_codes = await account_service.activate_and_mint_invites(invite_code, wallet_address)
            
            if invite_code and wallet_address and new_invite_codes:
                logger.info(f"[WEBAPP][INVITE] –ò–Ω–≤–∞–π—Ç {invite_code} –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                try:
                    
                    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    final_message = (
                        f"{loc.t('onboarding.onboarding_complete')}\n\n"
                        f"{loc.t('onboarding.onboarding_complete_summary')}\n\n"
                        f"{loc.t('onboarding.onboarding_reminder')}"
                    )
                    await message.answer(final_message)

                    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await message.answer("üéÅ –¢–≤–æ–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:")
                    for i, code in enumerate(new_invite_codes, 1):
                        await message.answer(f"–ò–Ω–≤–∞–π—Ç #{i}:\n`{code}`", parse_mode="Markdown")

                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=loc.t("onboarding.btn_catalog"), callback_data="menu:catalog")]
                    ])
                    await message.answer("üõç –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=keyboard)

                except Exception as e:
                    logger.error(f"[WEBAPP][INVITE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç–∞: {str(e)}")
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
            return

        # –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if event == "tx_signed":
            signature = data.get("signature")
            order_id = data.get("order_id")
            tx_type = data.get("tx_type")

            if not signature or not order_id or not tx_type:
                logger.error("[WEBAPP][TX_SIGNED] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                await message.answer(loc.t("onboarding.signature_incomplete"))
                return

            # –°–æ–∫—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            short_signature = f"{signature[:10]}...{signature[-10:]}"

            logger.info(f"[WEBAPP][TX_SIGNED] –ü–æ–¥–ø–∏—Å—å –æ—Ç {wallet_address}: {signature} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            await message.answer(
                loc.t("onboarding.signature_received", tx_type, order_id, short_signature),
                parse_mode="Markdown"
            )
            return

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        short_address = f"{wallet_address[:10]}...{wallet_address[-8:]}"
        
        logger.info(f"[WEBAPP] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫ –¥–ª—è user_id={user_id}")
        await message.answer(
            loc.t("onboarding.wallet_connected", short_address),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"[WEBAPP][ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ web_app_data: {str(e)}")
        await message.answer(loc.t("onboarding.webapp_error"))