"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–∞—Ç–∞–ª–æ–≥–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
"""

import logging
from typing import Optional, Dict, Any
from aiogram.types import CallbackQuery
from services.common.localization import Localization
from services.application.catalog.error_handling_service import ErrorHandlingService

logger = logging.getLogger(__name__)


class ErrorHandlerMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Å–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.error_handling_service = ErrorHandlingService()
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.info(f"[{self.__class__.__name__}] ErrorHandlerMixin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_error(self, error: Exception, callback: CallbackQuery, 
                          loc: Localization, context: str = "") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ErrorHandlingService
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            callback: Callback –∑–∞–ø—Ä–æ—Å
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.logger.error(f"[{self.__class__.__name__}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ {context}: {error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if "catalog" in context.lower():
                return await self.error_handling_service.handle_catalog_error(error, callback, loc, context)
            elif "product" in context.lower():
                product_id = getattr(error, 'product_id', '')
                return await self.error_handling_service.handle_product_error(error, callback, loc, product_id)
            elif "image" in context.lower():
                image_url = getattr(error, 'image_url', '')
                return await self.error_handling_service.handle_image_error(error, callback, loc, image_url)
            else:
                # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                return await self._handle_general_error(error, callback, loc, context)
                
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")
            return False
    
    async def _handle_general_error(self, error: Exception, callback: CallbackQuery, 
                                   loc: Localization, context: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –æ—à–∏–±–∫–∏
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            callback: Callback –∑–∞–ø—Ä–æ—Å
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            error_message = self._get_general_error_message(error, loc)
            await callback.message.answer(error_message)
            await callback.answer()
            return True
            
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏: {e}")
            return False
    
    def _get_general_error_message(self, error: Exception, loc: Localization) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            error_type = type(error).__name__
            error_message = str(error).lower()
            
            if "timeout" in error_message:
                return loc.t('error.timeout', '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            elif "connection" in error_message:
                return loc.t('error.connection', 'üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.')
            elif "not found" in error_message:
                return loc.t('error.not_found', 'üì≠ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            elif "permission" in error_message or "access" in error_message:
                return loc.t('error.permission', 'üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.')
            elif "validation" in error_message or "invalid" in error_message:
                return loc.t('error.validation', '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
            else:
                return loc.t('error.general', '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
                
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
    
    def log_error(self, error: Exception, context: str = "", user_id: Optional[int] = None) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            user_info = f" –¥–ª—è user_id {user_id}" if user_id else ""
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –≤ {context}{user_info}: {error}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.debug(f"[{self.__class__.__name__}] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(error).__name__}")
            self.logger.debug(f"[{self.__class__.__name__}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {str(error)}")
            
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏: {e}")
    
    async def send_error_message(self, callback: CallbackQuery, loc: Localization, 
                                error_type: str = "general", custom_message: str = "") -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            callback: Callback –∑–∞–ø—Ä–æ—Å
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            custom_message: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            if custom_message:
                error_message = custom_message
            else:
                error_message = loc.t(f'error.{error_type}', f'‚ùå –û—à–∏–±–∫–∞: {error_type}')
            
            await callback.message.answer(error_message)
            await callback.answer()
            
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def register_fallback_strategy(self, error_key: str, strategy) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –æ—à–∏–±–∫–∏
        
        Args:
            error_key: –ö–ª—é—á –æ—à–∏–±–∫–∏
            strategy: –§—É–Ω–∫—Ü–∏—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            self.error_handling_service.register_fallback_strategy(error_key, strategy)
            self.logger.info(f"[{self.__class__.__name__}] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è: {error_key}")
            
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
    
    def get_error_statistics(self) -> Dict[str, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        
        Returns:
            Dict[str, int]: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
        """
        try:
            return self.error_handling_service.get_error_statistics()
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫: {e}")
            return {}
    
    def clear_error_statistics(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        try:
            self.error_handling_service.clear_error_statistics()
            self.logger.info(f"[{self.__class__.__name__}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫: {e}")
