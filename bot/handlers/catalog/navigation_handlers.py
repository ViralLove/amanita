"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É.
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Å–∫—Ä–æ–ª–ª–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç BaseCatalogHandler –∏ –º–∏–∫—Å–∏–Ω—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from .base_handler import BaseCatalogHandler
from .mixins import ErrorHandlerMixin, LocalizationMixin, ProgressMixin, ValidationMixin

router = Router()
logger = logging.getLogger(__name__)


class NavigationHandler(BaseCatalogHandler, ErrorHandlerMixin, LocalizationMixin, ProgressMixin, ValidationMixin):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        super().__init__()
        self.logger.info(f"[{self.__class__.__name__}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_callback(self, callback: CallbackQuery) -> None:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback"""
        await handle_scroll_to_catalog(callback)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
navigation_handler = NavigationHandler()

@router.callback_query(F.data == "scroll:catalog")
async def scroll_to_catalog(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞.
    """
    logger.info(f"[NAVIGATION_HANDLER] scroll_to_catalog –≤—ã–∑–≤–∞–Ω! callback.data={callback.data}, from_user={callback.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–∏–∫—Å–∏–Ω
        loc = navigation_handler.get_localization(callback)
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        scroll_message = (
            f"üìö <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n"
            f"‚Ä¢ #catalog - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥\n"
            f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É</i>"
        )
        
        await callback.message.answer(
            scroll_message,
            parse_mode="HTML"
        )
        
        logger.info(f"[NAVIGATION_HANDLER] –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –∫ –∫–∞—Ç–∞–ª–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"[NAVIGATION_HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É")
        except:
            pass
    
    finally:
        await callback.answer()


# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–ª–∞—Å—Å NavigationHandler
async def handle_scroll_to_catalog(self, callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validations = {
            "callback_data": {"patterns": [r"^scroll:catalog$"]},
            "user_permissions": {"permissions": ["catalog_navigation"]}
        }
        validation_results = self.validate_all(callback, validations)
        validation_errors = self.get_validation_errors(validation_results)
        
        if validation_errors:
            loc = self.get_localization(callback)
            await self.send_error_message(callback, loc, "validation", 
                                        f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {', '.join(validation_errors)}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
        loc = self.get_localization(callback)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        scroll_message = (
            f"üìö <b>{loc.t('catalog.title', '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')}</b>\n\n"
            f"‚Ä¢ #catalog - {loc.t('catalog.main', '–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥')}\n"
            f"‚Ä¢ #search - {loc.t('catalog.search', '–ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É')}\n"
            f"‚Ä¢ #categories - {loc.t('catalog.categories', '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')}\n"
            f"‚Ä¢ #favorites - {loc.t('catalog.favorites', '–∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã')}\n\n"
            f"üí° {loc.t('catalog.tip', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(scroll_message, parse_mode="HTML")
        
    except Exception as e:
        loc = self.get_localization(callback)
        await self.handle_error(e, callback, loc, "scroll_to_catalog")


# –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫ –∫–ª–∞—Å—Å—É
# NavigationHandler.handle_callback = handle_scroll_to_catalog  # –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ
