"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ UI –ª–æ–≥–∏–∫—É, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ ProductService.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç BaseCatalogHandler –∏ –º–∏–∫—Å–∏–Ω—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from bot.services.application.catalog.product_service import ProductService
from bot.dependencies import get_product_service
from .base_handler import BaseCatalogHandler
from .mixins import ErrorHandlerMixin, LocalizationMixin, ProgressMixin, ValidationMixin

router = Router()
logger = logging.getLogger(__name__)


class ProductHandler(BaseCatalogHandler, ErrorHandlerMixin, LocalizationMixin, ProgressMixin, ValidationMixin):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        super().__init__()
        self.logger.info(f"[{self.__class__.__name__}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_callback(self, callback: CallbackQuery) -> None:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback"""
        await handle_show_product_details(callback)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
product_handler = ProductHandler()

@router.callback_query(F.data.startswith("product:details:"))
async def show_product_details(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ" –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
    """
    logger.info(f"[PRODUCT_HANDLER] show_product_details –≤—ã–∑–≤–∞–Ω! callback.data={callback.data}, from_user={callback.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ DI
        product_service = get_product_service()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ callback.data
        # –§–æ—Ä–º–∞—Ç: "product:details:{product_id}"
        product_id = callback.data.split(":")[-1]
        logger.info(f"[PRODUCT_HANDLER] –ò–∑–≤–ª–µ—á–µ–Ω product_id: {product_id}")
        
        if not product_id or product_id == "details":
            logger.error("[PRODUCT_HANDLER] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π product_id")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–∏–∫—Å–∏–Ω
        loc = product_handler.get_localization(callback)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await callback.message.answer(
            loc.t("catalog.loading") if hasattr(loc, 't') else "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ..."
        )
        
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å
        product = await product_service.get_product_by_id(product_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        if not product:
            logger.error(f"[PRODUCT_HANDLER] –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å
        await product_service.send_product_details(callback, product, loc)
        
    except Exception as e:
        logger.error(f"[PRODUCT_HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ")
        except:
            pass
    
    finally:
        await callback.answer()


# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–ª–∞—Å—Å ProductHandler
async def handle_show_product_details(self, callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        product_id = self.extract_product_id_from_callback(callback, "product:details:")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validations = {
            "callback_data": {"patterns": [r"^product:details:.+$"]},
            "user_permissions": {"permissions": ["product_view"]},
            "product_id": product_id
        }
        validation_results = self.validate_all(callback, validations)
        validation_errors = self.get_validation_errors(validation_results)
        
        if validation_errors:
            loc = self.get_localization(callback)
            await self.send_error_message(callback, loc, "validation", 
                                        f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {', '.join(validation_errors)}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
        loc = self.get_localization(callback)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_message = await self.create_simple_progress(callback, "product_loading", loc)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            product_service = get_product_service()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            product = await product_service.get_product_by_id(product_id)
            
            if not product:
                # –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                not_found_message = loc.t('product.not_found', f'üì≠ –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
                if progress_message:
                    await self.complete_simple_progress(progress_message, "product_loading", loc, False)
                    await callback.message.answer(not_found_message)
                else:
                    await callback.message.answer(not_found_message)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                await product_service.send_product_details(callback, product, loc)
                
                if progress_message:
                    await self.complete_simple_progress(progress_message, "product_loading", loc, True)
        
        except Exception as e:
            if progress_message:
                await self.complete_simple_progress(progress_message, "product_loading", loc, False)
            await self.handle_error(e, callback, loc, "product_loading")
            
    except Exception as e:
        loc = self.get_localization(callback)
        await self.handle_error(e, callback, loc, "show_product_details")


# –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫ –∫–ª–∞—Å—Å—É
# ProductHandler.handle_callback = handle_show_product_details  # –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ
