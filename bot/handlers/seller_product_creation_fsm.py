from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from bot.fsm.product_creation_states import ProductCreationStates
from bot.services.common.localization import Localization
from bot.model.user_settings import UserSettings
from bot.services.product.registry import ProductRegistryService
from bot.services.core.blockchain import BlockchainService
from bot.services.core.storage.ar_weave import ArWeaveUploader
import logging
import os

router = Router()
logger = logging.getLogger(__name__)
user_settings = UserSettings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
blockchain_service = BlockchainService()
arweave_uploader = ArWeaveUploader()
product_registry_service = ProductRegistryService(blockchain_service, arweave_uploader)

@router.message(F.text == "/create_product")
async def start_product_creation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    await state.set_state(ProductCreationStates.TitleInput)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        loc.t("e-catalog.product_creation.start") + "\n\n" + loc.t("e-catalog.product_creation.ask_title")
    )


@router.message(ProductCreationStates.TitleInput)
async def collect_title(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await state.update_data(title=message.text.strip())

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProductCreationStates.DescriptionInput)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer(loc.t("e-catalog.product_creation.ask_description"))


@router.message(ProductCreationStates.DescriptionInput)
async def collect_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(description=message.text.strip())

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProductCreationStates.PriceInput)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–µ–Ω—É
    await message.answer(loc.t("e-catalog.product_creation.ask_price"))


@router.message(ProductCreationStates.PriceInput)
async def collect_price(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    price_text = message.text.strip()
    if not price_text.isdigit():
        await message.answer(loc.t("e-catalog.product_creation.invalid_price"))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
    await state.update_data(price=int(price_text))

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProductCreationStates.CoverImageInput)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É
    await message.answer(loc.t("e-catalog.product_creation.ask_cover_image"))


@router.message(ProductCreationStates.CoverImageInput)
async def upload_cover_image(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    if not message.photo:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±–ª–æ–∂–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä—ë–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî –ø–æ—Å–ª–µ–¥–Ω—é—é –≤ —Å–ø–∏—Å–∫–µ)
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    file_name = f"cover_{user_id}.jpg"
    await message.bot.download_file(file_path, file_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    await state.update_data(cover_image_path=file_name)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProductCreationStates.GalleryInput)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
    await message.answer(loc.t("e-catalog.product_creation.ask_gallery"))


@router.message(ProductCreationStates.GalleryInput)
async def upload_gallery_images(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer(loc.t("e-catalog.product_creation.invalid_gallery"))
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    gallery_paths = []
    for photo in message.photo:
        file = await message.bot.get_file(photo.file_id)
        file_path = file.file_path
        file_name = f"gallery_{user_id}_{photo.file_id}.jpg"
        await message.bot.download_file(file_path, file_name)
        gallery_paths.append(file_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    await state.update_data(gallery_paths=gallery_paths)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProductCreationStates.VideoInput)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    await message.answer(loc.t("e-catalog.product_creation.ask_video"))

@router.message(ProductCreationStates.VideoInput)
async def upload_video(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    video_path = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ –≤–∏–¥–µ–æ
    if message.text and message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        video_path = None
    elif message.video:
        file = await message.bot.get_file(message.video.file_id)
        file_path = file.file_path
        video_path = f"video_{user_id}.mp4"
        await message.bot.download_file(file_path, video_path)
    else:
        await message.answer(loc.t("e-catalog.product_creation.invalid_video"))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
    await state.update_data(video_path=video_path)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(ProductCreationStates.CategoriesInput)
    await message.answer(loc.t("e-catalog.product_creation.ask_categories"))

@router.message(ProductCreationStates.CategoriesInput)
async def collect_categories(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    text = message.text.strip()
    if not text:
        await message.answer(loc.t("e-catalog.product_creation.invalid_categories"))
        return

    categories = [cat.strip() for cat in text.split(",") if cat.strip()]
    if not categories:
        await message.answer(loc.t("e-catalog.product_creation.invalid_categories"))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(categories=categories)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ProductCreationStates.AttributesInput)
    await message.answer(loc.t("e-catalog.product_creation.ask_attributes"))

@router.message(ProductCreationStates.AttributesInput)
async def collect_attributes(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    text = message.text.strip()
    attributes = {}
    
    if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ü–∞—Ä—Å–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–ª—é—á2: –∑–Ω–∞—á–µ–Ω–∏–µ2"
        pairs = [pair.strip() for pair in text.split(",")]
        for pair in pairs:
            if ":" not in pair:
                await message.answer(loc.t("e-catalog.product_creation.invalid_attributes"))
                return

            key, value = pair.split(":", 1)
            attributes[key.strip()] = value.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    await state.update_data(attributes=attributes)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(ProductCreationStates.Confirmation)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    preview = (
        f"üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–¶–µ–Ω–∞: {data['price']} USDT\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(data['categories'])}\n"
        f"–ê—Ç—Ä–∏–±—É—Ç—ã: {attributes}\n\n"
        f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞'"
    )
    await message.answer(preview)

@router.message(ProductCreationStates.Confirmation)
async def finalize_product_creation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    if message.text.strip().lower() != "–¥–∞":
        await message.answer(loc.t("e-catalog.product_creation.cancelled"))
        await state.clear()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        tx_hash = await product_registry_service.create_product(
            title=data['title'],
            description=data['description'],
            price=data['price'],
            cover_image_path=data['cover_image_path'],
            gallery_paths=data.get('gallery_paths', []),
            video_path=data.get('video_path'),
            categories=data['categories'],
            attributes=data.get('attributes', {})
        )

        if tx_hash:
            await message.answer(loc.t("e-catalog.product_creation.success"))
        else:
            await message.answer(loc.t("e-catalog.product_creation.error"))

    except Exception as e:
        logger.error(f"Error creating product: {e}")
        await message.answer(loc.t("e-catalog.product_creation.error"))
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if 'cover_image_path' in data:
                os.unlink(data['cover_image_path'])
            if 'gallery_paths' in data:
                for path in data['gallery_paths']:
                    os.unlink(path)
            if 'video_path' in data and data['video_path']:
                os.unlink(data['video_path'])
        except Exception as e:
            logger.error(f"Error cleaning up files: {e}")
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

