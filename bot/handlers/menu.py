"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from bot.services.common.localization import Localization
from bot.model.user_settings import UserSettings
from bot.config import WALLET_APP_URL
import logging
import json
import os

router = Router()

# –ü–æ–ª—É—á–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UserSettings (Singleton)
user_settings = UserSettings()

# –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è WebApp –∫–æ—à–µ–ª—å–∫–∞
logging.info(f"[MENU] WALLET_APP_URL –∏–∑ config: {WALLET_APP_URL}")

def get_main_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    lang_code = user_settings.get_language(user_id)
    logging.info(f"[MENU] get_main_menu_keyboard: user_id={user_id}, lang_code={lang_code}")
    loc = Localization(lang_code)
    keyboard = [
        [
            InlineKeyboardButton(
            text=loc.t("menu.catalog"),
            callback_data="menu:catalog"
        )

        ],
        [
            InlineKeyboardButton(
                text=loc.t("menu.cart"),
                callback_data="menu:cart"
            ),
            InlineKeyboardButton(
                text=loc.t("menu.profile"),
                callback_data="menu:profile"
            )
        ],
        [
            InlineKeyboardButton(
                text=loc.t("menu.orders"),
                callback_data="menu:orders"
            ),
            InlineKeyboardButton(
                text=loc.t("menu.support"),
                callback_data="menu:support"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîê –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫",
                callback_data="menu:wallet"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("menu"))
async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    lang_code = user_settings.get_language(user_id)
    logging.info(f"[MENU] show_main_menu: user_id={user_id}, lang_code={lang_code}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    all_user_settings = user_settings.get_all_settings(user_id)
    logging.info(f"[MENU] –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(all_user_settings, default=str)}")
    
    loc = Localization(lang_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    logging.info(f"[MENU] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ 'menu.welcome'")
    welcome_text = loc.t("menu.welcome")
    logging.info(f"[MENU] –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é: '{welcome_text[:50]}...'")
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(user_id)
    )

@router.message(Command("wallet"))
async def show_wallet(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–º —á–µ—Ä–µ–∑ WebApp"""
    user_id = message.from_user.id
    lang_code = user_settings.get_language(user_id)
    logging.info(f"[WALLET] show_wallet: user_id={user_id}, lang_code={lang_code}, wallet_url={WALLET_APP_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–∞–π—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invite_verified = user_settings.get_setting(user_id, 'invite_verified', False)
    logging.info(f"[WALLET] invite_verified –¥–ª—è user_id={user_id}: {invite_verified}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–∞–π—Ç–∞
    wallet_url = WALLET_APP_URL
    if '?' not in wallet_url:
        wallet_url += f"?invite_verified={str(invite_verified).lower()}"
    else:
        wallet_url += f"&invite_verified={str(invite_verified).lower()}"
        
    logging.info(f"[WALLET][DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ WebAppInfo —Å URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {wallet_url}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üîê –û—Ç–∫—Ä—ã—Ç—å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫",
                web_app=WebAppInfo(url=wallet_url)
            )
        ]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫. "
        "–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ —Å–∏–¥-—Ñ—Ä–∞–∑–µ.",
        reply_markup=keyboard
    )
    logging.info(f"[WALLET][DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π WebApp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: url={wallet_url}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ WebApp (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
@router.callback_query(lambda c: c.data == "webapp_error")
async def handle_webapp_error(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ WebApp"""
    error_data = callback_query.data
    logging.error(f"[WALLET][ERROR] –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç WebApp: {error_data}")
    await callback_query.answer("–û—à–∏–±–∫–∞ WebApp –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

@router.callback_query(lambda c: c.data.startswith("menu:"))
async def process_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    user_id = callback_query.from_user.id
    action = callback_query.data.split(":")[1]
    lang_code = user_settings.get_language(user_id)
    loc = Localization(lang_code)

    logging.info(f"[MENU] process_menu_callback: user_id={user_id}, action={action}, lang_code={lang_code}")
    logging.info(f"hahaha")
    if action == "catalog":
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ catalog.py
        logging.info(f"Catalog callback detected")
        return

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é
    if action == "cart":
        await callback_query.message.edit_text(
            text=loc.t("menu.cart") + " (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    elif action == "profile":
        await callback_query.message.edit_text(
            text=loc.t("menu.profile") + " (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    elif action == "orders":
        await callback_query.message.edit_text(
            text=loc.t("menu.orders") + " (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    elif action == "support":
        await callback_query.message.edit_text(
            text=loc.t("menu.support") + " (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "menu:wallet")
async def open_wallet(callback: types.CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ inline —Ä–µ–∂–∏–º"""
    lang_code = user_settings.get_language(callback.from_user.id)
    loc = Localization(lang_code)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=loc.t("menu.open_wallet"),
            web_app=WebAppInfo(url=f"{WALLET_APP_URL}?source=inline")
        )
    ]])
    
    await callback.message.answer(
        loc.t("menu.wallet_instruction"),
        reply_markup=keyboard
    )
    await callback.answer()