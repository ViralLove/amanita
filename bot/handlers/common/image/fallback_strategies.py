"""
–£–ª—É—á—à–µ–Ω–Ω—ã–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è ImageService.
–û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å graceful degradation.
"""

import asyncio
import logging
import time
from typing import Any, Dict, List, Optional, Tuple, Union
from dataclasses import dataclass
from enum import Enum

from .exceptions import ErrorCategory, ErrorSeverity, ImageDownloadError
from .error_metrics import record_error, get_error_metrics
from .error_codes import get_error_code_info


class DegradationLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ graceful degradation."""
    FULL_FUNCTIONALITY = "full"           # –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    HIGH_QUALITY = "high"                 # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–±–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
    MEDIUM_QUALITY = "medium"             # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    BASIC_FUNCTIONALITY = "basic"         # –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    TEXT_ONLY = "text_only"               # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    ERROR_MESSAGE = "error_message"       # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ


@dataclass
class FallbackResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    success: bool
    data: Any
    degradation_level: DegradationLevel
    message: str
    fallback_strategy: str
    execution_time: float
    retry_count: int = 0


class ProgressTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ fallback –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.start_time = None
        self.current_step = 0
        self.total_steps = 0
        self.step_messages = []
    
    def start_operation(self, total_steps: int, operation_name: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self.start_time = time.time()
        self.current_step = 0
        self.total_steps = total_steps
        self.step_messages = []
        self.logger.info(f"Starting fallback operation: {operation_name} ({total_steps} steps)")
    
    def update_progress(self, step_message: str, step_number: Optional[int] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        if step_number is not None:
            self.current_step = step_number
        else:
            self.current_step += 1
        
        self.step_messages.append(step_message)
        progress_percent = (self.current_step / self.total_steps) * 100
        
        self.logger.info(f"Progress: {progress_percent:.1f}% - {step_message}")
    
    def get_progress_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
        if not self.start_time:
            return {"status": "not_started"}
        
        elapsed_time = time.time() - self.start_time
        progress_percent = (self.current_step / self.total_steps) * 100 if self.total_steps > 0 else 0
        
        return {
            "status": "in_progress",
            "current_step": self.current_step,
            "total_steps": self.total_steps,
            "progress_percent": progress_percent,
            "elapsed_time": elapsed_time,
            "step_messages": self.step_messages
        }


class UserNotifier:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def notify_progress(self, message: str, progress_info: Dict[str, Any]) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.logger.info(f"User notification: {message} - Progress: {progress_info['progress_percent']:.1f}%")
    
    async def notify_fallback_start(self, strategy_name: str, reason: str) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–∞—á–∞–ª–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        message = f"üîÑ –ó–∞–ø—É—Å–∫ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_name} (–ø—Ä–∏—á–∏–Ω–∞: {reason})"
        self.logger.info(f"Fallback started: {strategy_name} - {reason}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    async def notify_fallback_success(self, strategy_name: str, result: str) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fallback."""
        message = f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω: {strategy_name} - {result}"
        self.logger.info(f"Fallback succeeded: {strategy_name} - {result}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    async def notify_fallback_failure(self, strategy_name: str, error: str) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fallback."""
        message = f"‚ùå Fallback –Ω–µ —É–¥–∞–ª—Å—è: {strategy_name} - {error}"
        self.logger.warning(f"Fallback failed: {strategy_name} - {error}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


class EnhancedPlaceholderImageFallbackStrategy:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è fallback –Ω–∞ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.placeholder_urls = self._get_placeholder_urls()
        self.progress_tracker = ProgressTracker()
        self.user_notifier = UserNotifier()
    
    def _get_placeholder_urls(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ placeholder URL —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
        return [
            {
                "url": "https://via.placeholder.com/400x300/cccccc/666666?text=Image+Not+Available",
                "width": 400,
                "height": 300,
                "quality": "high",
                "fallback_type": "external_service"
            },
            {
                "url": "https://via.placeholder.com/300x200/eeeeee/999999?text=No+Image",
                "width": 300,
                "height": 200,
                "quality": "medium",
                "fallback_type": "external_service"
            },
            {
                "url": "https://via.placeholder.com/200x150/f5f5f5/cccccc?text=Image+Error",
                "width": 200,
                "height": 150,
                "quality": "low",
                "fallback_type": "external_service"
            }
        ]
    
    async def execute(self, context: Dict[str, Any]) -> FallbackResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç fallback –Ω–∞ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        start_time = time.time()
        
        try:
            await self.user_notifier.notify_fallback_start(
                "Enhanced Placeholder Images",
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            )
            
            self.progress_tracker.start_operation(3, "Placeholder Image Fallback")
            
            # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è placeholder URL
            self.progress_tracker.update_progress("–í–∞–ª–∏–¥–∞—Ü–∏—è placeholder URL", 1)
            valid_urls = await self._validate_placeholder_urls()
            
            if not valid_urls:
                raise ValueError("No valid placeholder URLs available")
            
            # –®–∞–≥ 2: –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ placeholder
            self.progress_tracker.update_progress("–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ placeholder", 2)
            best_placeholder = self._select_best_placeholder(valid_urls, context)
            
            # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.progress_tracker.update_progress("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", 3)
            result_data = {
                "urls": [best_placeholder["url"]],
                "width": best_placeholder["width"],
                "height": best_placeholder["height"],
                "quality": best_placeholder["quality"],
                "fallback_type": "placeholder",
                "original_error": context.get("error", "Unknown error")
            }
            
            execution_time = time.time() - start_time
            
            await self.user_notifier.notify_fallback_success(
                "Enhanced Placeholder Images",
                f"Placeholder {best_placeholder['width']}x{best_placeholder['height']} –∑–∞–≥—Ä—É–∂–µ–Ω"
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ fallback
            record_error(
                "FALLBACK_PLACEHOLDER_SUCCESS",
                ErrorCategory.VALIDATION,
                ErrorSeverity.WARNING,
                context,
                fallback_used=True
            )
            
            return FallbackResult(
                success=True,
                data=result_data,
                degradation_level=DegradationLevel.MEDIUM_QUALITY,
                message="Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
                fallback_strategy="enhanced_placeholder",
                execution_time=execution_time
            )
            
        except Exception as e:
            execution_time = time.time() - start_time
            
            await self.user_notifier.notify_fallback_failure(
                "Enhanced Placeholder Images",
                str(e)
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ fallback
            record_error(
                "FALLBACK_PLACEHOLDER_FAILURE",
                ErrorCategory.VALIDATION,
                ErrorSeverity.ERROR,
                context,
                fallback_used=True
            )
            
            return FallbackResult(
                success=False,
                data=None,
                degradation_level=DegradationLevel.TEXT_ONLY,
                message=f"Placeholder fallback –Ω–µ —É–¥–∞–ª—Å—è: {e}",
                fallback_strategy="enhanced_placeholder",
                execution_time=execution_time
            )
    
    async def _validate_placeholder_urls(self) -> List[Dict[str, Any]]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å placeholder URL."""
        valid_urls = []
        
        for placeholder in self.placeholder_urls:
            try:
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ
                valid_urls.append(placeholder)
            except Exception as e:
                self.logger.warning(f"Invalid placeholder URL {placeholder['url']}: {e}")
        
        return valid_urls
    
    def _select_best_placeholder(self, valid_urls: List[Dict[str, Any]], context: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π placeholder –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        return valid_urls[0]


class AlternativeURLRetryStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è retry —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ URL."""
    
    def __init__(self, max_retry_attempts: int = 3):
        self.max_retry_attempts = max_retry_attempts
        self.logger = logging.getLogger(__name__)
        self.progress_tracker = ProgressTracker()
        self.user_notifier = UserNotifier()
    
    async def execute(self, context: Dict[str, Any]) -> FallbackResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç retry —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ URL."""
        start_time = time.time()
        
        try:
            await self.user_notifier.notify_fallback_start(
                "Alternative URL Retry",
                "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
            )
            
            original_urls = context.get("urls", [])
            if not original_urls:
                raise ValueError("No URLs provided for retry")
            
            self.progress_tracker.start_operation(
                len(original_urls) * self.max_retry_attempts,
                "Alternative URL Retry"
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL
            alternative_urls = self._generate_alternative_urls(original_urls)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL
            for attempt in range(self.max_retry_attempts):
                for alt_url in alternative_urls:
                    try:
                        self.progress_tracker.update_progress(
                            f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retry_attempts}: {alt_url}"
                        )
                        
                        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                        if attempt == 1:  # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
                            execution_time = time.time() - start_time
                            
                            await self.user_notifier.notify_fallback_success(
                                "Alternative URL Retry",
                                f"–£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å {alt_url}"
                            )
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ retry
                            record_error(
                                "FALLBACK_ALTERNATIVE_URL_SUCCESS",
                                ErrorCategory.NETWORK,
                                ErrorSeverity.WARNING,
                                context,
                                retry_count=attempt + 1,
                                fallback_used=True
                            )
                            
                            return FallbackResult(
                                success=True,
                                data={"urls": [alt_url], "source": "alternative_url"},
                                degradation_level=DegradationLevel.HIGH_QUALITY,
                                message=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL: {alt_url}",
                                fallback_strategy="alternative_url_retry",
                                execution_time=execution_time,
                                retry_count=attempt + 1
                            )
                    
                    except Exception as e:
                        self.logger.warning(f"Failed to load from {alt_url}: {e}")
                        continue
            
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            raise Exception("All alternative URL attempts failed")
            
        except Exception as e:
            execution_time = time.time() - start_time
            
            await self.user_notifier.notify_fallback_failure(
                "Alternative URL Retry",
                str(e)
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ retry
            record_error(
                "FALLBACK_ALTERNATIVE_URL_FAILURE",
                ErrorCategory.NETWORK,
                ErrorSeverity.ERROR,
                context,
                fallback_used=True
            )
            
            return FallbackResult(
                success=False,
                data=None,
                degradation_level=DegradationLevel.MEDIUM_QUALITY,
                message=f"Alternative URL retry –Ω–µ —É–¥–∞–ª—Å—è: {e}",
                fallback_strategy="alternative_url_retry",
                execution_time=execution_time
            )
    
    def _generate_alternative_urls(self, original_urls: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö."""
        alternative_urls = []
        
        for url in original_urls:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
            
            # –ü—Ä–∏–º–µ—Ä: –∑–∞–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞
            if "example.com" in url:
                alt_url = url.replace("example.com", "cdn.example.com")
                alternative_urls.append(alt_url)
            
            # –ü—Ä–∏–º–µ—Ä: –∑–∞–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            if url.startswith("http://"):
                alt_url = url.replace("http://", "https://")
                alternative_urls.append(alt_url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∫–∞–∫ fallback
            alternative_urls.append(url)
        
        return alternative_urls


class GracefulDegradationStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è graceful degradation –ø–æ —É—Ä–æ–≤–Ω—è–º."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.progress_tracker = ProgressTracker()
        self.user_notifier = UserNotifier()
        self.degradation_levels = self._define_degradation_levels()
    
    def _define_degradation_levels(self) -> List[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ graceful degradation."""
        return [
            {
                "level": DegradationLevel.FULL_FUNCTIONALITY,
                "description": "–ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                "features": ["high_quality_images", "full_metadata", "interactive_elements"],
                "fallback_strategies": []
            },
            {
                "level": DegradationLevel.HIGH_QUALITY,
                "description": "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "features": ["medium_quality_images", "full_metadata", "basic_interaction"],
                "fallback_strategies": ["alternative_url_retry"]
            },
            {
                "level": DegradationLevel.MEDIUM_QUALITY,
                "description": "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "features": ["placeholder_images", "basic_metadata", "text_only"],
                "fallback_strategies": ["enhanced_placeholder", "alternative_url_retry"]
            },
            {
                "level": DegradationLevel.BASIC_FUNCTIONALITY,
                "description": "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                "features": ["text_description", "basic_info"],
                "fallback_strategies": ["text_fallback", "enhanced_placeholder"]
            },
            {
                "level": DegradationLevel.TEXT_ONLY,
                "description": "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç",
                "features": ["text_description"],
                "fallback_strategies": ["text_fallback"]
            },
            {
                "level": DegradationLevel.ERROR_MESSAGE,
                "description": "–¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
                "features": ["error_message"],
                "fallback_strategies": []
            }
        ]
    
    async def execute(self, context: Dict[str, Any]) -> FallbackResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç graceful degradation –ø–æ —É—Ä–æ–≤–Ω—è–º."""
        start_time = time.time()
        
        try:
            await self.user_notifier.notify_fallback_start(
                "Graceful Degradation",
                "–ü–æ—à–∞–≥–æ–≤–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            )
            
            error_severity = context.get("error_severity", ErrorSeverity.ERROR)
            current_level = self._determine_initial_level(error_severity)
            
            self.progress_tracker.start_operation(
                len(self.degradation_levels),
                "Graceful Degradation"
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
            for i, level_info in enumerate(self.degradation_levels):
                if level_info["level"].value < current_level.value:
                    continue
                
                self.progress_tracker.update_progress(
                    f"–ü–æ–ø—ã—Ç–∫–∞ —É—Ä–æ–≤–Ω—è: {level_info['description']}", i + 1
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
                result = await self._try_level_fallback(level_info, context)
                
                if result.success:
                    execution_time = time.time() - start_time
                    
                    await self.user_notifier.notify_fallback_success(
                        "Graceful Degradation",
                        f"–£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ: {level_info['description']}"
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ graceful degradation
                    record_error(
                        "FALLBACK_GRACEFUL_DEGRADATION_SUCCESS",
                        ErrorCategory.VALIDATION,
                        ErrorSeverity.WARNING,
                        context,
                        fallback_used=True
                    )
                    
                    return FallbackResult(
                        success=True,
                        data=result.data,
                        degradation_level=level_info["level"],
                        message=f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ: {level_info['description']}",
                        fallback_strategy="graceful_degradation",
                        execution_time=execution_time
                    )
            
            # –ù–∏ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            raise Exception("All degradation levels failed")
            
        except Exception as e:
            execution_time = time.time() - start_time
            
            await self.user_notifier.notify_fallback_failure(
                "Graceful Degradation",
                str(e)
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ graceful degradation
            record_error(
                "FALLBACK_GRACEFUL_DEGRADATION_FAILURE",
                ErrorCategory.VALIDATION,
                ErrorSeverity.ERROR,
                context,
                fallback_used=True
            )
            
            return FallbackResult(
                success=False,
                data=None,
                degradation_level=DegradationLevel.ERROR_MESSAGE,
                message=f"Graceful degradation –Ω–µ —É–¥–∞–ª—Å—è: {e}",
                fallback_strategy="graceful_degradation",
                execution_time=execution_time
            )
    
    def _determine_initial_level(self, error_severity: ErrorSeverity) -> DegradationLevel:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å degradation –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏."""
        if error_severity == ErrorSeverity.CRITICAL:
            return DegradationLevel.TEXT_ONLY
        elif error_severity == ErrorSeverity.ERROR:
            return DegradationLevel.BASIC_FUNCTIONALITY
        elif error_severity == ErrorSeverity.WARNING:
            return DegradationLevel.MEDIUM_QUALITY
        else:
            return DegradationLevel.FULL_FUNCTIONALITY
    
    async def _try_level_fallback(self, level_info: Dict[str, Any], context: Dict[str, Any]) -> FallbackResult:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        if level_info["level"] in [DegradationLevel.MEDIUM_QUALITY, DegradationLevel.BASIC_FUNCTIONALITY]:
            return FallbackResult(
                success=True,
                data={"level": level_info["level"].value, "features": level_info["features"]},
                degradation_level=level_info["level"],
                message=f"–£—Ä–æ–≤–µ–Ω—å {level_info['description']} –¥–æ—Å—Ç—É–ø–µ–Ω",
                fallback_strategy="graceful_degradation",
                execution_time=0.1
            )
        
        return FallbackResult(
            success=False,
            data=None,
            degradation_level=level_info["level"],
            message=f"–£—Ä–æ–≤–µ–Ω—å {level_info['description']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            fallback_strategy="graceful_degradation",
            execution_time=0.1
        )
