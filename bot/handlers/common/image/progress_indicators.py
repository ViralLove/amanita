"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è fallback –æ–ø–µ—Ä–∞—Ü–∏–π.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–π.
"""

import asyncio
import logging
import time
from typing import Any, Dict, List, Optional, Callable
from dataclasses import dataclass, field
from enum import Enum
from abc import ABC, abstractmethod

from .fallback_strategies import DegradationLevel, FallbackResult


class ProgressStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    NOT_STARTED = "not_started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class ProgressType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    DETERMINATE = "determinate"      # –° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
    INDETERMINATE = "indeterminate"  # –ë–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
    SPINNER = "spinner"              # –°–ø–∏–Ω–Ω–µ—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π


@dataclass
class ProgressStep:
    """–®–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    id: str
    name: str
    description: str
    status: ProgressStatus = ProgressStatus.NOT_STARTED
    start_time: Optional[float] = None
    end_time: Optional[float] = None
    error: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ProgressInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    operation_id: str
    operation_name: str
    status: ProgressStatus
    progress_type: ProgressType
    current_step: int
    total_steps: int
    progress_percent: float
    start_time: float
    elapsed_time: float
    estimated_remaining: Optional[float] = None
    steps: List[ProgressStep] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)


class ProgressCallback(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    
    @abstractmethod
    async def on_progress_update(self, progress_info: ProgressInfo) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        pass
    
    @abstractmethod
    async def on_step_complete(self, step: ProgressStep) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞."""
        pass
    
    @abstractmethod
    async def on_operation_complete(self, progress_info: ProgressInfo, result: Any) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        pass
    
    @abstractmethod
    async def on_operation_failed(self, progress_info: ProgressInfo, error: Exception) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        pass


class LoggingProgressCallback(ProgressCallback):
    """Callback –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def on_progress_update(self, progress_info: ProgressInfo) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        self.logger.info(
            f"Progress: {progress_info.operation_name} - "
            f"{progress_info.progress_percent:.1f}% "
            f"({progress_info.current_step}/{progress_info.total_steps})"
        )
    
    async def on_step_complete(self, step: ProgressStep) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞."""
        if step.error:
            self.logger.error(f"Step failed: {step.name} - {step.error}")
        else:
            self.logger.info(f"Step completed: {step.name}")
    
    async def on_operation_complete(self, progress_info: ProgressInfo, result: Any) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self.logger.info(
            f"Operation completed: {progress_info.operation_name} "
            f"in {progress_info.elapsed_time:.2f}s"
        )
    
    async def on_operation_failed(self, progress_info: ProgressInfo, error: Exception) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self.logger.error(
            f"Operation failed: {progress_info.operation_name} "
            f"after {progress_info.elapsed_time:.2f}s - {error}"
        )


class TelegramProgressCallback(ProgressCallback):
    """Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram."""
    
    def __init__(self, message_sender: Optional[Callable] = None):
        self.message_sender = message_sender
        self.logger = logging.getLogger(__name__)
    
    async def on_progress_update(self, progress_info: ProgressInfo) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ Telegram."""
        if self.message_sender:
            try:
                message = self._format_progress_message(progress_info)
                await self.message_sender(message)
            except Exception as e:
                self.logger.error(f"Failed to send Telegram progress message: {e}")
        else:
            self.logger.info(f"Telegram progress: {progress_info.progress_percent:.1f}%")
    
    async def on_step_complete(self, step: ProgressStep) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞ –≤ Telegram."""
        if self.message_sender:
            try:
                message = self._format_step_message(step)
                await self.message_sender(message)
            except Exception as e:
                self.logger.error(f"Failed to send Telegram step message: {e}")
    
    async def on_operation_complete(self, progress_info: ProgressInfo, result: Any) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Telegram."""
        if self.message_sender:
            try:
                message = self._format_completion_message(progress_info, result)
                await self.message_sender(message)
            except Exception as e:
                self.logger.error(f"Failed to send Telegram completion message: {e}")
    
    async def on_operation_failed(self, progress_info: ProgressInfo, error: Exception) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Telegram."""
        if self.message_sender:
            try:
                message = self._format_error_message(progress_info, error)
                await self.message_sender(message)
            except Exception as e:
                self.logger.error(f"Failed to send Telegram error message: {e}")
    
    def _format_progress_message(self, progress_info: ProgressInfo) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
        emoji = "üîÑ" if progress_info.status == ProgressStatus.IN_PROGRESS else "‚úÖ"
        return (
            f"{emoji} **{progress_info.operation_name}**\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_info.progress_percent:.1f}% "
            f"({progress_info.current_step}/{progress_info.total_steps})\n"
            f"–í—Ä–µ–º—è: {progress_info.elapsed_time:.1f}s"
        )
    
    def _format_step_message(self, step: ProgressStep) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —à–∞–≥–µ."""
        if step.error:
            return f"‚ùå **{step.name}** - –û—à–∏–±–∫–∞: {step.error}"
        else:
            return f"‚úÖ **{step.name}** - –ó–∞–≤–µ—Ä—à–µ–Ω"
    
    def _format_completion_message(self, progress_info: ProgressInfo, result: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
        return (
            f"üéâ **{progress_info.operation_name}** - –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {progress_info.elapsed_time:.1f}s\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
        )
    
    def _format_error_message(self, progress_info: ProgressInfo, error: Exception) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        return (
            f"üí• **{progress_info.operation_name}** - –û—à–∏–±–∫–∞!\n"
            f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {progress_info.elapsed_time:.1f}s\n"
            f"–û—à–∏–±–∫–∞: {error}"
        )


class ProgressManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(self, callbacks: Optional[List[ProgressCallback]] = None):
        self.callbacks = callbacks or [LoggingProgressCallback()]
        self.logger = logging.getLogger(__name__)
        self.active_operations: Dict[str, ProgressInfo] = {}
    
    def start_operation(
        self,
        operation_id: str,
        operation_name: str,
        total_steps: int,
        progress_type: ProgressType = ProgressType.DETERMINATE,
        metadata: Optional[Dict[str, Any]] = None
    ) -> ProgressInfo:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        progress_info = ProgressInfo(
            operation_id=operation_id,
            operation_name=operation_name,
            status=ProgressStatus.IN_PROGRESS,
            progress_type=progress_type,
            current_step=0,
            total_steps=total_steps,
            progress_percent=0.0,
            start_time=time.time(),
            elapsed_time=0.0,
            steps=[],
            metadata=metadata or {}
        )
        
        self.active_operations[operation_id] = progress_info
        self.logger.info(f"Started progress tracking: {operation_name} ({total_steps} steps)")
        
        return progress_info
    
    def add_step(
        self,
        operation_id: str,
        step_id: str,
        step_name: str,
        description: str,
        metadata: Optional[Dict[str, Any]] = None
    ) -> ProgressStep:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —à–∞–≥ –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        if operation_id not in self.active_operations:
            raise ValueError(f"Operation {operation_id} not found")
        
        progress_info = self.active_operations[operation_id]
        step = ProgressStep(
            id=step_id,
            name=step_name,
            description=description,
            metadata=metadata or {}
        )
        
        progress_info.steps.append(step)
        return step
    
    def start_step(self, operation_id: str, step_id: str) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞."""
        if operation_id not in self.active_operations:
            raise ValueError(f"Operation {operation_id} not found")
        
        progress_info = self.active_operations[operation_id]
        step = self._find_step(progress_info, step_id)
        
        if step:
            step.status = ProgressStatus.IN_PROGRESS
            step.start_time = time.time()
            self.logger.info(f"Started step: {step.name}")
    
    def complete_step(self, operation_id: str, step_id: str, error: Optional[str] = None) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞."""
        if operation_id not in self.active_operations:
            raise ValueError(f"Operation {operation_id} not found")
        
        progress_info = self.active_operations[operation_id]
        step = self._find_step(progress_info, step_id)
        
        if step:
            step.status = ProgressStatus.COMPLETED if not error else ProgressStatus.FAILED
            step.end_time = time.time()
            step.error = error
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_info.current_step += 1
            progress_info.progress_percent = (progress_info.current_step / progress_info.total_steps) * 100
            progress_info.elapsed_time = time.time() - progress_info.start_time
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å event loop)
            try:
                asyncio.create_task(self._notify_step_complete(step))
                asyncio.create_task(self._notify_progress_update(progress_info))
            except RuntimeError:
                # –ù–µ—Ç event loop, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                self.logger.debug("No event loop, skipping async notifications")
            
            self.logger.info(f"Completed step: {step.name}")
    
    def fail_step(self, operation_id: str, step_id: str, error: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —à–∞–≥ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π."""
        self.complete_step(operation_id, step_id, error)
    
    def complete_operation(self, operation_id: str, result: Any) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é."""
        if operation_id not in self.active_operations:
            raise ValueError(f"Operation {operation_id} not found")
        
        progress_info = self.active_operations[operation_id]
        progress_info.status = ProgressStatus.COMPLETED
        progress_info.elapsed_time = time.time() - progress_info.start_time
        progress_info.progress_percent = 100.0
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å event loop)
        try:
            asyncio.create_task(self._notify_operation_complete(progress_info, result))
        except RuntimeError:
            # –ù–µ—Ç event loop, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.logger.debug("No event loop, skipping async notifications")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        del self.active_operations[operation_id]
        
        self.logger.info(f"Completed operation: {progress_info.operation_name}")
    
    def fail_operation(self, operation_id: str, error: Exception) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é."""
        if operation_id not in self.active_operations:
            raise ValueError(f"Operation {operation_id} not found")
        
        progress_info = self.active_operations[operation_id]
        progress_info.status = ProgressStatus.FAILED
        progress_info.elapsed_time = time.time() - progress_info.start_time
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º callbacks (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å event loop)
        try:
            asyncio.create_task(self._notify_operation_failed(progress_info, error))
        except RuntimeError:
            # –ù–µ—Ç event loop, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.logger.debug("No event loop, skipping async notifications")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        del self.active_operations[operation_id]
        
        self.logger.error(f"Failed operation: {progress_info.operation_name} - {error}")
    
    def get_progress(self, operation_id: str) -> Optional[ProgressInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        return self.active_operations.get(operation_id)
    
    def get_all_progress(self) -> List[ProgressInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö."""
        return list(self.active_operations.values())
    
    def _find_step(self, progress_info: ProgressInfo, step_id: str) -> Optional[ProgressStep]:
        """–ù–∞—Ö–æ–¥–∏—Ç —à–∞–≥ –ø–æ ID."""
        for step in progress_info.steps:
            if step.id == step_id:
                return step
        return None
    
    async def _notify_progress_update(self, progress_info: ProgressInfo) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç callbacks –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        for callback in self.callbacks:
            try:
                await callback.on_progress_update(progress_info)
            except Exception as e:
                self.logger.error(f"Callback error in on_progress_update: {e}")
    
    async def _notify_step_complete(self, step: ProgressStep) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç callbacks –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞."""
        for callback in self.callbacks:
            try:
                await callback.on_step_complete(step)
            except Exception as e:
                self.logger.error(f"Callback error in on_step_complete: {e}")
    
    async def _notify_operation_complete(self, progress_info: ProgressInfo, result: Any) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç callbacks –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        for callback in self.callbacks:
            try:
                await callback.on_operation_complete(progress_info, result)
            except Exception as e:
                self.logger.error(f"Callback error in on_operation_complete: {e}")
    
    async def _notify_operation_failed(self, progress_info: ProgressInfo, error: Exception) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç callbacks –æ–± –æ—à–∏–±–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        for callback in self.callbacks:
            try:
                await callback.on_operation_failed(progress_info, error)
            except Exception as e:
                self.logger.error(f"Callback error in on_operation_failed: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
_progress_manager = ProgressManager()


def get_progress_manager() -> ProgressManager:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    
    Returns:
        ProgressManager: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    return _progress_manager


def add_progress_callback(callback: ProgressCallback) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
    
    Args:
        callback: Callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    """
    _progress_manager.callbacks.append(callback)


def remove_progress_callback(callback: ProgressCallback) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
    
    Args:
        callback: Callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ callback –±—ã–ª —É–¥–∞–ª–µ–Ω
    """
    try:
        _progress_manager.callbacks.remove(callback)
        return True
    except ValueError:
        return False
