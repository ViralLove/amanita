"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è ImageService.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ —Å retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∏ fallback —Ü–µ–ø–æ—á–∫–∞–º–∏.
"""

import asyncio
import logging
import time
from typing import Any, Callable, Dict, List, Optional, Tuple, Union
from functools import wraps

from .exceptions import (
    ImageDownloadError, NetworkError, FileError, ValidationError, SessionError,
    ErrorCategory, ErrorSeverity, create_image_error
)
from .image_service_config import ImageServiceConfig


class RetryStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å exponential backoff."""
    
    def __init__(
        self,
        max_attempts: int = 3,
        base_delay: float = 1.0,
        max_delay: float = 60.0,
        exponential_base: float = 2.0,
        jitter: bool = True
    ):
        self.max_attempts = max_attempts
        self.base_delay = base_delay
        self.max_delay = max_delay
        self.exponential_base = exponential_base
        self.jitter = jitter
    
    def get_delay(self, attempt: int) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏.
        
        Args:
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            float: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if attempt == 0:
            return 0
        
        delay = self.base_delay * (self.exponential_base ** (attempt - 1))
        delay = min(delay, self.max_delay)
        
        if self.jitter:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
            import random
            delay *= (0.5 + random.random() * 0.5)
        
        return delay


class FallbackStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è fallback –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫."""
    
    def __init__(self, name: str, priority: int = 0):
        self.name = name
        self.priority = priority  # –ú–µ–Ω—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    async def execute(self, context: Dict[str, Any]) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fallback
        """
        raise NotImplementedError("Subclasses must implement execute method")


class TextFallbackStrategy(FallbackStrategy):
    """Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    
    def __init__(self):
        super().__init__("text_fallback", priority=0)
    
    async def execute(self, context: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ fallback."""
        product = context.get('product')
        loc = context.get('loc')
        
        if not product or not loc:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        title = getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')
        description = getattr(product, 'description', '')
        
        caption = f"üè∑Ô∏è <b>{title}</b>"
        if description:
            caption += f"\n\n{description}"
        
        if hasattr(product, 'price') and product.price:
            caption += f"\n\nüí∞ –¶–µ–Ω–∞: {product.price}"
        
        caption += "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        return caption


class PlaceholderImageFallbackStrategy(FallbackStrategy):
    """Fallback –Ω–∞ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    
    def __init__(self, placeholder_urls: Optional[List[str]] = None):
        super().__init__("placeholder_image", priority=1)
        self.placeholder_urls = placeholder_urls or [
            "https://via.placeholder.com/400x300/cccccc/666666?text=Image+Not+Available"
        ]
    
    async def execute(self, context: Dict[str, Any]) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        return self.placeholder_urls


class RetryFallbackStrategy(FallbackStrategy):
    """Fallback —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    
    def __init__(self, retry_strategy: RetryStrategy):
        super().__init__("retry_fallback", priority=2)
        self.retry_strategy = retry_strategy
    
    async def execute(self, context: Dict[str, Any]) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        operation = context.get('operation')
        if not operation:
            raise ValueError("Operation not provided in context")
        
        return await self._retry_operation(operation, context)
    
    async def _retry_operation(
        self,
        operation: Callable,
        context: Dict[str, Any]
    ) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –ª–æ–≥–∏–∫–æ–π."""
        last_error = None
        
        for attempt in range(self.retry_strategy.max_attempts):
            try:
                return await operation()
            except Exception as e:
                last_error = e
                
                if attempt < self.retry_strategy.max_attempts - 1:
                    delay = self.retry_strategy.get_delay(attempt)
                    await asyncio.sleep(delay)
                    continue
                else:
                    break
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É
        raise create_image_error(
            last_error,
            ErrorCategory.NETWORK,
            context
        )


class ImageErrorHandler:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è ImageService.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
    - Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å exponential backoff
    - Fallback —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    - –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, config: Optional[ImageServiceConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        """
        self.config = config or ImageServiceConfig()
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.retry_strategy = RetryStrategy(
            max_attempts=getattr(self.config, 'retry_attempts', 3),
            base_delay=getattr(self.config, 'retry_delay', 1.0)
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.fallback_strategies = self._initialize_fallback_strategies()
        
        self.logger.info(f"[ImageErrorHandler] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.fallback_strategies)} fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏")
    
    def _initialize_fallback_strategies(self) -> List[FallbackStrategy]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        strategies = [
            TextFallbackStrategy(),
            PlaceholderImageFallbackStrategy(),
            RetryFallbackStrategy(self.retry_strategy)
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        strategies.sort(key=lambda s: s.priority)
        return strategies
    
    def handle_error(
        self,
        error: Exception,
        context: Optional[Dict[str, Any]] = None
    ) -> ImageDownloadError:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        
        Args:
            error: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            ImageDownloadError: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        """
        context = context or {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if isinstance(error, ImageDownloadError):
            custom_error = error
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
            category = self._categorize_error(error)
            custom_error = create_image_error(error, category, context)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self._log_error(custom_error, context)
        
        return custom_error
    
    def _categorize_error(self, error: Exception) -> ErrorCategory:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—à–∏–±–∫–∏."""
        error_type = type(error).__name__
        
        if error_type in ['TimeoutError', 'ConnectionError', 'DNSResolutionError']:
            return ErrorCategory.NETWORK
        elif error_type in ['OSError', 'FileNotFoundError', 'PermissionError']:
            return ErrorCategory.FILE
        elif error_type in ['ValueError', 'TypeError']:
            return ErrorCategory.VALIDATION
        elif error_type in ['aiohttp.ClientError', 'aiohttp.ServerError']:
            return ErrorCategory.SESSION
        else:
            return ErrorCategory.UNKNOWN
    
    def _log_error(self, error: ImageDownloadError, context: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
        log_level = logging.WARNING if error.severity == ErrorSeverity.WARNING else logging.ERROR
        
        self.logger.log(
            log_level,
            f"[{error.error_code}] {error.message} | "
            f"Category: {error.category.value}, "
            f"Severity: {error.severity.value}, "
            f"Context: {context}"
        )
        
        if error.original_error:
            self.logger.debug(f"Original error: {error.original_error}")
    
    async def handle_network_error(
        self,
        error: Exception,
        context: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ —Å retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π.
        
        Args:
            error: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ fallback
        """
        custom_error = self.handle_error(error, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if self._is_retryable_network_error(custom_error):
            return await self._retry_network_operation(context)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            return await self._execute_fallback_chain(custom_error, context)
    
    def _is_retryable_network_error(self, error: ImageDownloadError) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
        if error.category != ErrorCategory.NETWORK:
            return False
        
        # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if error.severity == ErrorSeverity.CRITICAL:
            return False
        
        # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö HTTP —Å—Ç–∞—Ç—É—Å–æ–≤
        if hasattr(error, 'context') and 'status_code' in error.context:
            status_code = error.context['status_code']
            if status_code in [400, 401, 403, 404]:  # Client errors
                return False
        
        return True
    
    async def _retry_network_operation(self, context: Dict[str, Any]) -> Any:
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å exponential backoff."""
        operation = context.get('operation')
        if not operation:
            raise ValueError("Operation not provided in context for retry")
        
        last_error = None
        
        for attempt in range(self.retry_strategy.max_attempts):
            try:
                return await operation()
            except Exception as e:
                last_error = e
                
                if attempt < self.retry_strategy.max_attempts - 1:
                    delay = self.retry_strategy.get_delay(attempt)
                    self.logger.info(f"Retry attempt {attempt + 1}/{self.retry_strategy.max_attempts} in {delay:.1f}s")
                    await asyncio.sleep(delay)
                    continue
                else:
                    break
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        self.logger.warning(f"All retry attempts exhausted, using fallback strategies")
        return await self._execute_fallback_chain(last_error, context)
    
    async def handle_file_error(
        self,
        error: Exception,
        context: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –æ—à–∏–±–∫–∏.
        
        Args:
            error: –§–∞–π–ª–æ–≤–∞—è –æ—à–∏–±–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ fallback
        """
        custom_error = self.handle_error(error, context)
        
        # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if custom_error.severity == ErrorSeverity.CRITICAL:
            return await self._execute_fallback_chain(custom_error, context)
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        return await self._fix_file_error(custom_error, context)
    
    async def _fix_file_error(
        self,
        error: ImageDownloadError,
        context: Dict[str, Any]
    ) -> Any:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–æ–≤—É—é –æ—à–∏–±–∫—É."""
        if isinstance(error, PermissionDeniedError):
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            path = error.context.get('path')
            if path:
                try:
                    import os
                    os.chmod(path, 0o644)
                    self.logger.info(f"Fixed permissions for {path}")
                    return await self._retry_file_operation(context)
                except Exception as e:
                    self.logger.error(f"Failed to fix permissions for {path}: {e}")
        
        # –ï—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return await self._execute_fallback_chain(error, context)
    
    async def _retry_file_operation(self, context: Dict[str, Any]) -> Any:
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
        operation = context.get('operation')
        if operation:
            return await operation()
        return None
    
    async def handle_validation_error(
        self,
        error: Exception,
        context: Dict[str, Any]
    ) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
        
        Args:
            error: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ fallback
        """
        custom_error = self.handle_error(error, context)
        
        # –î–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return await self._execute_fallback_chain(custom_error, context)
    
    async def _execute_fallback_chain(
        self,
        error: Exception,
        context: Dict[str, Any]
    ) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫—É fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.
        
        Args:
            error: –û—à–∏–±–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–µ–Ω fallback
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        context['error'] = error
        
        for strategy in self.fallback_strategies:
            try:
                self.logger.info(f"Trying fallback strategy: {strategy.name}")
                result = await strategy.execute(context)
                
                if result is not None:
                    self.logger.info(f"Fallback strategy {strategy.name} succeeded")
                    return result
                    
            except Exception as e:
                self.logger.warning(f"Fallback strategy {strategy.name} failed: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        self.logger.error("All fallback strategies failed")
        raise error
    
    def create_retry_decorator(
        self,
        max_attempts: Optional[int] = None,
        base_delay: Optional[float] = None
    ):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö retry.
        
        Args:
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        Returns:
            Callable: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        """
        retry_strategy = RetryStrategy(
            max_attempts=max_attempts or self.retry_strategy.max_attempts,
            base_delay=base_delay or self.retry_strategy.base_delay
        )
        
        def decorator(func: Callable) -> Callable:
            @wraps(func)
            async def wrapper(*args, **kwargs):
                last_error = None
                
                for attempt in range(retry_strategy.max_attempts):
                    try:
                        return await func(*args, **kwargs)
                    except Exception as e:
                        last_error = e
                        
                        if attempt < retry_strategy.max_attempts - 1:
                            delay = retry_strategy.get_delay(attempt)
                            self.logger.info(f"Retry attempt {attempt + 1}/{retry_strategy.max_attempts} in {delay:.1f}s")
                            await asyncio.sleep(delay)
                            continue
                        else:
                            break
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É
                raise create_image_error(
                    last_error,
                    ErrorCategory.NETWORK,
                    {"function": func.__name__, "args": args, "kwargs": kwargs}
                )
            
            return wrapper
        
        return decorator
    
    def get_error_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫.
        
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
        return {
            "total_errors": 0,
            "errors_by_category": {},
            "errors_by_severity": {},
            "retry_attempts": 0,
            "fallback_successes": 0
        }
    
    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫."""
        self.logger.info("[ImageErrorHandler] Cleanup completed")
