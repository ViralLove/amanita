"""
–°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è Telegram.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IProductFormatter —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import logging
from typing import Dict, Any, Optional, List
from bot.services.common.localization import Localization
from .product_formatter_interface import IProductFormatter
from .product_formatter_config import ProductFormatterConfig
from .section_tracker import SectionTracker, SectionTypes


class ProductFormatterService(IProductFormatter):
    """
    –°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è Telegram.
    
    –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IProductFormatter –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    - –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    
    def __init__(self, config: Optional[ProductFormatterConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        """
        self.config = config or ProductFormatterConfig()
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(self.config.logging_level)
        
        self.logger.info(f"[ProductFormatterService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: "
                        f"max_length={self.config.max_text_length}, "
                        f"emoji={self.config.enable_emoji}, "
                        f"html={self.config.enable_html}")
    
    def format_product_for_telegram(self, product: Any, loc: Localization) -> Dict[str, str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram —Å UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º.
        
        Args:
            product: –û–±—ä–µ–∫—Ç Product –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
        """
        try:
            self.logger.debug(f"[ProductFormatterService] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {getattr(product, 'title', 'unknown')}")
            
            result = {
                'main_info': self.format_main_info_ux(product, loc),
                'composition': self.format_composition_ux(product, loc),
                'pricing': self.format_pricing_ux(product, loc),
                'details': self.format_details_ux(product, loc)
            }
            
            self.logger.debug(f"[ProductFormatterService] –ü—Ä–æ–¥—É–∫—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return result
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            return self._fallback_formatting(product, loc)
    
    def format_main_info_ux(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
        
        Args:
            product: –û–±—ä–µ–∫—Ç Product
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        try:
            # üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
            main_info = f"{self.config.get_emoji('product')} <b>{product.title}</b>{self.config.get_template('section_separator')}"
            
            # üåø –í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ —ç—Ç–æ
            if product.species:
                main_info += f"{self.config.get_emoji('species')} <b>{product.species}</b>{self.config.get_template('section_separator')}"
            
            # ‚úÖ –°—Ç–∞—Ç—É—Å - –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if product.status == 1:
                status_emoji = self.config.get_emoji('status_available')
                status_text = loc.t('catalog.product.available_for_order')
                main_info += f"{status_emoji} <b>{status_text}</b>{self.config.get_template('section_separator')}"
            else:
                status_emoji = self.config.get_emoji('status_unavailable')
                status_text = loc.t('catalog.product.temporarily_unavailable')
                main_info += f"{status_emoji} <b>{status_text}</b>{self.config.get_template('section_separator')}"
            
            return main_info
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return f"{self.config.get_emoji('product')} <b>{getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')}</b>"
    
    def format_composition_ux(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
        
        Args:
            product: –û–±—ä–µ–∫—Ç Product
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤
        """
        try:
            if not hasattr(product, 'organic_components') or not product.organic_components:
                composition_emoji = self.config.get_emoji('composition')
                composition_text = f"{composition_emoji} <b>{loc.t('catalog.product.composition')}</b>: {loc.t('catalog.product.composition_not_specified')}{self.config.get_template('section_separator')}"
                return composition_text
            
            composition_text = f"{self.config.get_emoji('composition')} <b>{loc.t('catalog.product.composition_title')}</b>{self.config.get_template('section_separator')}"
            
            for i, component in enumerate(product.organic_components, 1):
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                composition_text += f"   {i}. <b>{component.biounit_id}</b>"
                
                # –ü—Ä–æ–ø–æ—Ä—Ü–∏—è - –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
                if hasattr(component, 'proportion') and component.proportion:
                    composition_text += f" ‚Ä¢ {component.proportion}"
                
                composition_text += self.config.get_template('component_separator')
            
            return composition_text
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞: {e}")
            return f"{self.config.get_emoji('composition')} <b>{loc.t('catalog.product.composition')}</b>: {loc.t('catalog.product.composition_not_specified')}"
    
    def format_pricing_ux(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
        
        Args:
            product: –û–±—ä–µ–∫—Ç Product
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
        """
        try:
            if not product.prices:
                pricing_emoji = self.config.get_emoji('pricing')
                pricing_text = f"{pricing_emoji} <b>{loc.t('catalog.product.pricing')}</b>: {loc.t('catalog.product.pricing_not_specified')}{self.config.get_template('section_separator')}"
                return pricing_text
            
            pricing_text = f"{self.config.get_emoji('pricing')} <b>{loc.t('catalog.product.pricing_title')}</b>{self.config.get_template('section_separator')}"
            
            for i, price in enumerate(product.prices, 1):
                pricing_text += f"   {i}. "
                
                # –¶–µ–Ω–∞ - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                if hasattr(price, 'price') and price.price:
                    pricing_text += f"<b>{price.price} {price.currency}</b>"
                
                # –í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º - –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                if hasattr(price, 'weight') and price.weight:
                    pricing_text += f"{self.config.get_template('price_separator')}<b>{price.weight} {price.weight_unit}</b>"
                elif hasattr(price, 'volume') and price.volume:
                    pricing_text += f"{self.config.get_template('price_separator')}<b>{price.volume} {price.volume_unit}</b>"
                
                # –§–æ—Ä–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
                if hasattr(price, 'form') and price.form:
                    pricing_text += f"{self.config.get_template('form_separator')}{price.form}"
                
                pricing_text += self.config.get_template('component_separator')
            
            return pricing_text
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω: {e}")
            return f"{self.config.get_emoji('pricing')} <b>{loc.t('catalog.product.pricing')}</b>: {loc.t('catalog.product.pricing_not_specified')}"
    
    def format_details_ux(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
        
        Args:
            product: –û–±—ä–µ–∫—Ç Product
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        try:
            details_text = f"{self.config.get_emoji('details')} <b>{loc.t('catalog.product.details')}</b>{self.config.get_template('section_separator')}"
            
            # üì¶ –§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
            if product.forms:
                forms_text = ', '.join(product.forms)
                details_text += f"{self.config.get_emoji('forms')} <b>{loc.t('catalog.product.forms_label')}</b>: {forms_text}{self.config.get_template('section_separator')}"
            
            # üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
            if product.categories:
                categories_text = ', '.join(product.categories)
                details_text += f"{self.config.get_emoji('categories')} <b>{loc.t('catalog.product.category_label')}</b>: {categories_text}{self.config.get_template('section_separator')}"
            
            return details_text
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}")
            return f"{self.config.get_emoji('details')} <b>{loc.t('catalog.product.details')}</b>"
    
    def format_product_details_for_telegram(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è Telegram.
        
        Args:
            product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            self.logger.debug(f"[ProductFormatterService] –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {getattr(product, 'title', 'unknown')}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            section_tracker = SectionTracker()
            
            # üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details_text = f"{self.config.get_emoji('product')} <b>{product.title}</b>{self.config.get_template('section_separator')}"
            details_text += f"{self.config.get_emoji('species')} <b>–í–∏–¥:</b> {product.species}{self.config.get_template('section_separator')}"
            
            # ‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
            if product.status == 1:
                status_emoji = self.config.get_emoji('status_available')
                status_text = loc.t('catalog.product.available_for_order')
                details_text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{self.config.get_template('section_separator')}"
            else:
                status_emoji = self.config.get_emoji('status_unavailable')
                status_text = loc.t('catalog.product.temporarily_unavailable')
                details_text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{self.config.get_template('section_separator')}"
            
            # üî¨ –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if hasattr(product, 'scientific_name') and product.scientific_name:
                details_text += f"{self.config.get_emoji('scientific_name')} <b>–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {product.scientific_name}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.SCIENTIFIC_NAME)
            
            details_text += self.config.get_template('section_separator')
            
            # üî¨ –°–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            if hasattr(product, 'organic_components') and product.organic_components:
                details_text += f"{self.config.get_emoji('composition')} <b>–°–æ—Å—Ç–∞–≤</b>{self.config.get_template('section_separator')}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–µ–∫—Ü–∏—é —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
                if hasattr(product, 'cover_image_url') and product.cover_image_url:
                    details_text += f"üñºÔ∏è <i>–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</i>{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                
                for i, component in enumerate(product.organic_components, 1):
                    details_text += f"‚Ä¢ <b>{component.biounit_id}</b> - <b>{component.proportion}</b>{self.config.get_template('component_separator')}"
                    
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ ComponentDescription
                    if hasattr(component, 'description') and component.description:
                        desc = component.description
                        
                        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'generic_description') and desc.generic_description and 
                            section_tracker.can_output_section(SectionTypes.GENERIC_DESCRIPTION, 'component')):
                            details_text += f"  {self.config.get_emoji('description')} <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>{self.config.get_template('section_separator')}    {desc.generic_description}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.GENERIC_DESCRIPTION)
                        
                        # –≠—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'effects') and desc.effects and 
                            section_tracker.can_output_section(SectionTypes.EFFECTS, 'component')):
                            details_text += f"  {self.config.get_emoji('effects')} <b>–≠—Ñ—Ñ–µ–∫—Ç—ã</b>{self.config.get_template('section_separator')}    {desc.effects}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.EFFECTS)
                        
                        # –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (hasattr(desc, 'shamanic') and desc.shamanic and 
                            section_tracker.can_output_section(SectionTypes.SHAMANIC, 'component')):
                            details_text += f"  {self.config.get_emoji('shamanic')} <b>–®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</b>{self.config.get_template('section_separator')}    {desc.shamanic}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.SHAMANIC)
                        
                        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (hasattr(desc, 'warnings') and desc.warnings and 
                            section_tracker.can_output_section(SectionTypes.WARNINGS, 'component')):
                            details_text += f"  {self.config.get_emoji('warnings')} <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>{self.config.get_template('section_separator')}    {desc.warnings}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.WARNINGS)
                        
                        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'dosage_instructions') and desc.dosage_instructions and 
                            section_tracker.can_output_section(SectionTypes.DOSAGE_INSTRUCTIONS, 'component')):
                            details_text += f"  {self.config.get_emoji('dosage')} <b>–î–æ–∑–∏—Ä–æ–≤–∫–∞</b>{self.config.get_template('section_separator')}"
                            for instruction in desc.dosage_instructions:
                                details_text += f"    ‚Ä¢ {instruction.title}: {instruction.description}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.DOSAGE_INSTRUCTIONS)
                        
                        # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'features') and desc.features and 
                            section_tracker.can_output_section(SectionTypes.FEATURES, 'component')):
                            details_text += f"  {self.config.get_emoji('features')} <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b>{self.config.get_template('section_separator')}    {', '.join(desc.features)}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.FEATURES)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if hasattr(component, 'properties') and component.properties:
                        details_text += f"  {component.properties}{self.config.get_template('component_separator')}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º "–≤–æ–∑–¥—É—Ö" –º–µ–∂–¥—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                    details_text += self.config.get_template('section_separator')
                details_text += self.config.get_template('section_separator')
            
            # üìù –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
            if (hasattr(product, 'generic_description') and product.generic_description and 
                section_tracker.can_output_section(SectionTypes.GENERIC_DESCRIPTION, 'product')):
                details_text += f"{self.config.get_emoji('description')} <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>{self.config.get_template('section_separator')}{product.generic_description}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.GENERIC_DESCRIPTION)
            
            # ‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
            if (hasattr(product, 'effects') and product.effects and 
                section_tracker.can_output_section(SectionTypes.EFFECTS, 'product')):
                details_text += f"{self.config.get_emoji('effects')} <b>–≠—Ñ—Ñ–µ–∫—Ç—ã</b>{self.config.get_template('section_separator')}{product.effects}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.EFFECTS)
            
            # üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º—ã - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(product, 'prices') and product.prices:
                details_text += f"{self.config.get_emoji('pricing')} <b>–¶–µ–Ω—ã</b>{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.PRICES)
                for i, price in enumerate(product.prices, 1):
                    details_text += f"‚Ä¢ <b>{price.format_price()}</b>"
                    
                    # –í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º
                    if price.is_weight_based:
                        details_text += f"{self.config.get_template('price_separator')}<b>{price.format_amount()}</b>"
                    elif price.is_volume_based:
                        details_text += f"{self.config.get_template('price_separator')}<b>{price.format_amount()}</b>"
                    
                    # –§–æ—Ä–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                    if hasattr(price, 'form') and price.form:
                        details_text += f" <i>{price.form}</i>"
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ
                    if hasattr(price, 'description') and price.description:
                        details_text += f" - {price.description}"
                    
                    details_text += self.config.get_template('component_separator')
                details_text += self.config.get_template('section_separator')
            
            # üì¶ –§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞
            if hasattr(product, 'forms') and product.forms:
                forms_text = ', '.join(product.forms)
                details_text += f"{self.config.get_emoji('forms')} <b>–§–æ—Ä–º—ã</b>{self.config.get_template('section_separator')}{forms_text}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.FORMS)
            
            # üíä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'dosage_instructions') and product.dosage_instructions and 
                section_tracker.can_output_section(SectionTypes.DOSAGE_INSTRUCTIONS, 'product')):
                details_text += f"{self.config.get_emoji('dosage')} <b>–î–æ–∑–∏—Ä–æ–≤–∫–∞</b>{self.config.get_template('section_separator')}"
                for instruction in product.dosage_instructions:
                    details_text += f"<b>{instruction.title}</b>{self.config.get_template('section_separator')}"
                    details_text += f"{instruction.description}{self.config.get_template('component_separator')}"
                    
                    # –¢–∏–ø –¥–æ–∑–∏—Ä–æ–≤–∫–∏
                    if hasattr(instruction, 'type') and instruction.type:
                        details_text += f"<i>–¢–∏–ø: {instruction.type}</i>{self.config.get_template('component_separator')}"
                    
                    details_text += self.config.get_template('section_separator')
                details_text += self.config.get_template('section_separator')
                section_tracker.mark_section_outputted(SectionTypes.DOSAGE_INSTRUCTIONS)
            
            # üßô‚Äç‚ôÇÔ∏è –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'shamanic') and product.shamanic and 
                section_tracker.can_output_section(SectionTypes.SHAMANIC, 'product')):
                details_text += f"{self.config.get_emoji('shamanic')} <b>–®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</b>{self.config.get_template('section_separator')}{product.shamanic}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.SHAMANIC)
            
            # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'warnings') and product.warnings and 
                section_tracker.can_output_section(SectionTypes.WARNINGS, 'product')):
                details_text += f"{self.config.get_emoji('warnings')} <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>{self.config.get_template('section_separator')}{product.warnings}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.WARNINGS)
            
            # üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            if hasattr(product, 'categories') and product.categories:
                categories_text = ', '.join(product.categories)
                details_text += f"{self.config.get_emoji('categories')} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>{self.config.get_template('section_separator')}{categories_text}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.CATEGORIES)
            
            # üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'features') and product.features and 
                section_tracker.can_output_section(SectionTypes.FEATURES, 'product')):
                details_text += f"{self.config.get_emoji('features')} <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b>{self.config.get_template('section_separator')}"
                for feature in product.features:
                    details_text += f"‚Ä¢ {feature}{self.config.get_template('component_separator')}"
                details_text += self.config.get_template('section_separator')
                section_tracker.mark_section_outputted(SectionTypes.FEATURES)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if self.config.should_truncate(details_text):
                original_length = len(details_text)
                details_text = self._truncate_text(details_text)
                final_length = len(details_text)
                self.logger.info(f"[ProductFormatterService] –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω: {original_length} -> {final_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            self.logger.debug(f"[ProductFormatterService] –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return details_text
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return self._fallback_formatting(product, loc)
    
    def format_product_main_info_for_telegram(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–∏–¥, —Å—Ç–∞—Ç—É—Å, —Å–æ—Å—Ç–∞–≤, —Ü–µ–Ω—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        
        Args:
            product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Ç–µ–∫—Å—Ç —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            self.logger.debug(f"[ProductFormatterService] –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {getattr(product, 'title', 'unknown')}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            section_tracker = SectionTracker()
            
            # üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            main_info_text = f"{self.config.get_emoji('product')} <b>{product.title}</b>{self.config.get_template('section_separator')}"
            main_info_text += f"{self.config.get_emoji('species')} <b>–í–∏–¥:</b> {product.species}{self.config.get_template('section_separator')}"
            
            # ‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
            if product.status == 1:
                status_emoji = self.config.get_emoji('status_available')
                status_text = loc.t('catalog.product.available_for_order')
                main_info_text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{self.config.get_template('section_separator')}"
            else:
                status_emoji = self.config.get_emoji('status_unavailable')
                status_text = loc.t('catalog.product.temporarily_unavailable')
                main_info_text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}{self.config.get_template('section_separator')}"
            
            # üî¨ –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if hasattr(product, 'scientific_name') and product.scientific_name:
                main_info_text += f"{self.config.get_emoji('scientific_name')} <b>–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {product.scientific_name}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.SCIENTIFIC_NAME)
            
            main_info_text += self.config.get_template('section_separator')
            
            # üî¨ –°–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if hasattr(product, 'organic_components') and product.organic_components:
                main_info_text += f"{self.config.get_emoji('composition')} <b>–°–æ—Å—Ç–∞–≤</b>{self.config.get_template('section_separator')}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–µ–∫—Ü–∏—é —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
                if hasattr(product, 'cover_image_url') and product.cover_image_url:
                    main_info_text += f"üñºÔ∏è <i>–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</i>{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                
                for i, component in enumerate(product.organic_components, 1):
                    main_info_text += f"‚Ä¢ <b>{component.biounit_id}</b> - <b>{component.proportion}</b>{self.config.get_template('component_separator')}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º "–≤–æ–∑–¥—É—Ö" –º–µ–∂–¥—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                    main_info_text += self.config.get_template('section_separator')
                main_info_text += self.config.get_template('section_separator')
            
            # üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º—ã - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(product, 'prices') and product.prices:
                main_info_text += f"{self.config.get_emoji('pricing')} <b>–¶–µ–Ω—ã</b>{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.PRICES)
                for i, price in enumerate(product.prices, 1):
                    main_info_text += f"‚Ä¢ <b>{price.format_price()}</b>"
                    
                    # –í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º
                    if price.is_weight_based:
                        main_info_text += f"{self.config.get_template('price_separator')}<b>{price.format_amount()}</b>"
                    elif price.is_volume_based:
                        main_info_text += f"{self.config.get_template('price_separator')}<b>{price.format_amount()}</b>"
                    
                    # –§–æ—Ä–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                    if hasattr(price, 'form') and price.form:
                        main_info_text += f" <i>{price.form}</i>"
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ
                    if hasattr(price, 'description') and price.description:
                        main_info_text += f" - {price.description}"
                    
                    main_info_text += self.config.get_template('component_separator')
                main_info_text += self.config.get_template('section_separator')
            
            # üì¶ –§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞
            if hasattr(product, 'forms') and product.forms:
                forms_text = ', '.join(product.forms)
                main_info_text += f"{self.config.get_emoji('forms')} <b>–§–æ—Ä–º—ã</b>{self.config.get_template('section_separator')}{forms_text}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.FORMS)
            
            # üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            if hasattr(product, 'categories') and product.categories:
                categories_text = ', '.join(product.categories)
                main_info_text += f"{self.config.get_emoji('categories')} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>{self.config.get_template('section_separator')}{categories_text}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.CATEGORIES)
            
            self.logger.debug(f"[ProductFormatterService] –û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return main_info_text
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return self._fallback_formatting(product, loc)
    
    def format_product_description_for_telegram(self, product: Any, loc: Localization) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã, —à–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞, –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è.
        
        Args:
            product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        """
        try:
            self.logger.debug(f"[ProductFormatterService] –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {getattr(product, 'title', 'unknown')}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            section_tracker = SectionTracker()
            
            description_text = ""
            
            # üî¨ –°–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            if hasattr(product, 'organic_components') and product.organic_components:
                description_text += f"{self.config.get_emoji('composition')} <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤</b>{self.config.get_template('section_separator')}"
                
                for i, component in enumerate(product.organic_components, 1):
                    description_text += f"‚Ä¢ <b>{component.biounit_id}</b> - <b>{component.proportion}</b>{self.config.get_template('component_separator')}"
                    
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ ComponentDescription
                    if hasattr(component, 'description') and component.description:
                        desc = component.description
                        
                        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'generic_description') and desc.generic_description and 
                            section_tracker.can_output_section(SectionTypes.GENERIC_DESCRIPTION, 'component')):
                            description_text += f"  {self.config.get_emoji('description')} <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>{self.config.get_template('section_separator')}    {desc.generic_description}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.GENERIC_DESCRIPTION)
                        
                        # –≠—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'effects') and desc.effects and 
                            section_tracker.can_output_section(SectionTypes.EFFECTS, 'component')):
                            description_text += f"  {self.config.get_emoji('effects')} <b>–≠—Ñ—Ñ–µ–∫—Ç—ã</b>{self.config.get_template('section_separator')}    {desc.effects}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.EFFECTS)
                        
                        # –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (hasattr(desc, 'shamanic') and desc.shamanic and 
                            section_tracker.can_output_section(SectionTypes.SHAMANIC, 'component')):
                            description_text += f"  {self.config.get_emoji('shamanic')} <b>–®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</b>{self.config.get_template('section_separator')}    {desc.shamanic}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.SHAMANIC)
                        
                        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (hasattr(desc, 'warnings') and desc.warnings and 
                            section_tracker.can_output_section(SectionTypes.WARNINGS, 'component')):
                            description_text += f"  {self.config.get_emoji('warnings')} <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>{self.config.get_template('section_separator')}    {desc.warnings}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.WARNINGS)
                        
                        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'dosage_instructions') and desc.dosage_instructions and 
                            section_tracker.can_output_section(SectionTypes.DOSAGE_INSTRUCTIONS, 'component')):
                            description_text += f"  {self.config.get_emoji('dosage')} <b>–î–æ–∑–∏—Ä–æ–≤–∫–∞</b>{self.config.get_template('section_separator')}"
                            for instruction in desc.dosage_instructions:
                                description_text += f"    ‚Ä¢ {instruction.title}: {instruction.description}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.DOSAGE_INSTRUCTIONS)
                        
                        # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        if (hasattr(desc, 'features') and desc.features and 
                            section_tracker.can_output_section(SectionTypes.FEATURES, 'component')):
                            description_text += f"  {self.config.get_emoji('features')} <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b>{self.config.get_template('section_separator')}    {', '.join(desc.features)}{self.config.get_template('component_separator')}"
                            section_tracker.mark_section_outputted(SectionTypes.FEATURES)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if hasattr(component, 'properties') and component.properties:
                        description_text += f"  {component.properties}{self.config.get_template('component_separator')}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º "–≤–æ–∑–¥—É—Ö" –º–µ–∂–¥—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                    description_text += self.config.get_template('section_separator')
                description_text += self.config.get_template('section_separator')
            
            # üìù –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
            if (hasattr(product, 'generic_description') and product.generic_description and 
                section_tracker.can_output_section(SectionTypes.GENERIC_DESCRIPTION, 'product')):
                description_text += f"{self.config.get_emoji('description')} <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>{self.config.get_template('section_separator')}{product.generic_description}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.GENERIC_DESCRIPTION)
            
            # ‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
            if (hasattr(product, 'effects') and product.effects and 
                section_tracker.can_output_section(SectionTypes.EFFECTS, 'product')):
                description_text += f"{self.config.get_emoji('effects')} <b>–≠—Ñ—Ñ–µ–∫—Ç—ã</b>{self.config.get_template('section_separator')}{product.effects}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.EFFECTS)
            
            # üíä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'dosage_instructions') and product.dosage_instructions and 
                section_tracker.can_output_section(SectionTypes.DOSAGE_INSTRUCTIONS, 'product')):
                description_text += f"{self.config.get_emoji('dosage')} <b>–î–æ–∑–∏—Ä–æ–≤–∫–∞</b>{self.config.get_template('section_separator')}"
                for instruction in product.dosage_instructions:
                    description_text += f"<b>{instruction.title}</b>{self.config.get_template('section_separator')}"
                    description_text += f"{instruction.description}{self.config.get_template('component_separator')}"
                    
                    # –¢–∏–ø –¥–æ–∑–∏—Ä–æ–≤–∫–∏
                    if hasattr(instruction, 'type') and instruction.type:
                        description_text += f"<i>–¢–∏–ø: {instruction.type}</i>{self.config.get_template('component_separator')}"
                    
                    description_text += self.config.get_template('section_separator')
                description_text += self.config.get_template('section_separator')
                section_tracker.mark_section_outputted(SectionTypes.DOSAGE_INSTRUCTIONS)
            
            # üßô‚Äç‚ôÇÔ∏è –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'shamanic') and product.shamanic and 
                section_tracker.can_output_section(SectionTypes.SHAMANIC, 'product')):
                description_text += f"{self.config.get_emoji('shamanic')} <b>–®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</b>{self.config.get_template('section_separator')}{product.shamanic}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.SHAMANIC)
            
            # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'warnings') and product.warnings and 
                section_tracker.can_output_section(SectionTypes.WARNINGS, 'product')):
                description_text += f"{self.config.get_emoji('warnings')} <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>{self.config.get_template('section_separator')}{product.warnings}{self.config.get_template('section_separator')}{self.config.get_template('section_separator')}"
                section_tracker.mark_section_outputted(SectionTypes.WARNINGS)
            
            # üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
            if (hasattr(product, 'features') and product.features and 
                section_tracker.can_output_section(SectionTypes.FEATURES, 'product')):
                description_text += f"{self.config.get_emoji('features')} <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b>{self.config.get_template('section_separator')}"
                for feature in product.features:
                    description_text += f"‚Ä¢ {feature}{self.config.get_template('component_separator')}"
                description_text += self.config.get_template('section_separator')
                section_tracker.mark_section_outputted(SectionTypes.FEATURES)
            
            self.logger.debug(f"[ProductFormatterService] –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return description_text
            
        except Exception as e:
            self.logger.error(f"[ProductFormatterService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏: {e}")
            return self._fallback_formatting(product, loc)
    
    def _truncate_text(self, text: str) -> str:
        """
        –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if len(text) <= self.config.max_text_length:
            return text
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        truncated = text[:self.config.max_text_length-100]  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π –∞–±–∑–∞—Ü
        last_newline = truncated.rfind('\n\n')
        if last_newline > self.config.max_text_length * 0.8:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫–æ–Ω—Ü–∞
            truncated = truncated[:last_newline]
        
        truncated += self.config.get_template('truncate_indicator')
        return truncated
    
    def _fallback_formatting(self, product: Any, loc: Localization) -> str:
        """
        Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        
        Args:
            product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
            loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        try:
            title = getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')
            return f"{self.config.get_emoji('product')} <b>{title}</b>{self.config.get_template('section_separator')}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        except:
            return f"{self.config.get_emoji('product')} <b>–ü—Ä–æ–¥—É–∫—Ç</b>{self.config.get_template('section_separator')}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    def get_config(self) -> ProductFormatterConfig:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞.
        
        Returns:
            ProductFormatterConfig: –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        return self.config
    
    def update_config(self, new_config: ProductFormatterConfig) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            new_config: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        self.config = new_config
        self.logger.setLevel(self.config.logging_level)
        self.logger.info(f"[ProductFormatterService] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def create_custom_config(self, **kwargs) -> ProductFormatterConfig:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π.
        
        Args:
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            
        Returns:
            ProductFormatterConfig: –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        from dataclasses import replace
        return replace(self.config, **kwargs)
