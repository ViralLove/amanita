"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ProductFormatterService.
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
"""

from dataclasses import dataclass, field
from typing import Dict, Any, Optional
import logging


@dataclass
class ProductFormatterConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    
    Attributes:
        max_text_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
        enable_emoji: –í–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏
        enable_html: –í–∫–ª—é—á–∏—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É
        truncate_text: –û–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        emoji_mapping: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
        text_templates: –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–∞
        logging_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    max_text_length: int = 4000
    enable_emoji: bool = True
    enable_html: bool = True
    truncate_text: bool = True
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    emoji_mapping: Dict[str, str] = field(default_factory=lambda: {
        'product': 'üè∑Ô∏è',
        'species': 'üåø',
        'status_available': '‚úÖ',
        'status_unavailable': '‚è∏Ô∏è',
        'composition': 'üî¨',
        'pricing': 'üí∞',
        'details': 'üìã',
        'forms': 'üì¶',
        'categories': 'üè∑Ô∏è',
        'description': 'üìñ',
        'effects': '‚ú®',
        'shamanic': 'üßô‚Äç‚ôÇÔ∏è',
        'warnings': '‚ö†Ô∏è',
        'dosage': 'üíä',
        'features': 'üåü',
        'scientific_name': 'üî¨'
    })
    
    text_templates: Dict[str, str] = field(default_factory=lambda: {
        'truncate_indicator': '... <i>–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è Telegram. –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ.</i>',
        'section_separator': '\n',
        'component_separator': '\n',
        'price_separator': ' –∑–∞ ',
        'form_separator': ' ‚Ä¢ '
    })
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging_level: int = logging.INFO
    enable_debug_logging: bool = False
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if self.max_text_length < 100:
            raise ValueError("max_text_length –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        
        if self.max_text_length > 10000:
            raise ValueError("max_text_length –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10000 —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.getLogger(__name__).setLevel(self.logging_level)
    
    def get_emoji(self, key: str, default: str = "‚Ä¢") -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ –∫–ª—é—á—É.
        
        Args:
            key: –ö–ª—é—á —ç–º–æ–¥–∑–∏
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            str: –≠–º–æ–¥–∑–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        if not self.enable_emoji:
            return ""
        return self.emoji_mapping.get(key, default)
    
    def get_template(self, key: str, default: str = "") -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –∫–ª—é—á—É.
        
        Args:
            key: –ö–ª—é—á —à–∞–±–ª–æ–Ω–∞
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        Returns:
            str: –®–∞–±–ª–æ–Ω –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        return self.text_templates.get(key, default)
    
    def should_truncate(self, text: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç.
        
        Args:
            text: –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å
        """
        return self.truncate_text and len(text) > self.max_text_length
