"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è Telegram.
"""

from typing import Dict, Any
from bot.services.common.localization import Localization
from .section_tracker import SectionTracker, SectionTypes

def format_product_for_telegram(product, loc: Localization) -> Dict[str, str]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram —Å UX-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∞–∂–Ω—É—é –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
    
    Args:
        product: –û–±—ä–µ–∫—Ç Product –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
    """
    return {
        'main_info': format_main_info_ux(product, loc),
        'composition': format_composition_ux(product, loc),
        'pricing': format_pricing_ux(product, loc),
        'details': format_details_ux(product, loc)
    }

def format_main_info_ux(product, loc: Localization) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
    
    Args:
        product: –û–±—ä–µ–∫—Ç Product
        loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    # üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
    main_info = f"üè∑Ô∏è <b>{product.title}</b>\n\n"
    
    # üåø –í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —á—Ç–æ —ç—Ç–æ
    if product.species:
        main_info += f"üåø <b>{product.species}</b>\n"
    
    # ‚úÖ –°—Ç–∞—Ç—É—Å - –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if product.status == 1:
        main_info += f"‚úÖ <b>{loc.t('catalog.product.available_for_order')}</b>\n"
    else:
        main_info += f"‚è∏Ô∏è <b>{loc.t('catalog.product.temporarily_unavailable')}</b>\n"
    
    return main_info

def format_composition_ux(product, loc: Localization) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
    
    Args:
        product: –û–±—ä–µ–∫—Ç Product
        loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤
    """
    if not hasattr(product, 'organic_components') or not product.organic_components:
        return f"üî¨ <b>{loc.t('catalog.product.composition')}</b>: {loc.t('catalog.product.composition_not_specified')}\n\n"
    
    composition_text = f"üî¨ <b>{loc.t('catalog.product.composition_title')}</b>\n"
    
    for i, component in enumerate(product.organic_components, 1):
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        composition_text += f"   {i}. <b>{component.biounit_id}</b>"
        
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏—è - –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
        if hasattr(component, 'proportion') and component.proportion:
            composition_text += f" ‚Ä¢ {component.proportion}"
        
        composition_text += "\n"
    
    return composition_text

def format_pricing_ux(product, loc: Localization) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
    
    Args:
        product: –û–±—ä–µ–∫—Ç Product
        loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
    """
    if not product.prices:
        return f"üí∞ <b>{loc.t('catalog.product.pricing')}</b>: {loc.t('catalog.product.pricing_not_specified')}\n\n"
    
    pricing_text = f"üí∞ <b>{loc.t('catalog.product.pricing_title')}</b>\n"
    
    for i, price in enumerate(product.prices, 1):
        pricing_text += f"   {i}. "
        
        # –¶–µ–Ω–∞ - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if hasattr(price, 'price') and price.price:
            pricing_text += f"<b>{price.price} {price.currency}</b>"
        
        # –í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º - –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if hasattr(price, 'weight') and price.weight:
            pricing_text += f" –∑–∞ <b>{price.weight} {price.weight_unit}</b>"
        elif hasattr(price, 'volume') and price.volume:
            pricing_text += f" –∑–∞ <b>{price.volume} {price.volume_unit}</b>"
        
        # –§–æ—Ä–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
        if hasattr(price, 'form') and price.form:
            pricing_text += f" ‚Ä¢ {price.form}"
        
        pricing_text += "\n"
    
    return pricing_text

def format_details_ux(product, loc: Localization) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
    
    Args:
        product: –û–±—ä–µ–∫—Ç Product
        loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    details_text = f"üìã <b>{loc.t('catalog.product.details')}</b>\n"
    
    # üì¶ –§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞
    if product.forms:
        forms_text = ', '.join(product.forms)
        details_text += f"üì¶ <b>{loc.t('catalog.product.forms_label')}</b>: {forms_text}\n"
    
    # üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    if product.categories:
        categories_text = ', '.join(product.categories)
        details_text += f"üè∑Ô∏è <b>{loc.t('catalog.product.category_label')}</b>: {categories_text}\n"
    
    return details_text

def format_product_details_for_telegram(product, loc: Localization) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –¥–ª—è Telegram.
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    
    Args:
        product: –û–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
        loc: –û–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        section_tracker = SectionTracker()
        
        # üè∑Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        details_text = f"üè∑Ô∏è <b>{product.title}</b>\n"
        details_text += f"üåø <b>–í–∏–¥:</b> {product.species}\n"
        
        # ‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞
        if product.status == 1:
            details_text += f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {loc.t('catalog.product.available_for_order')}\n"
        else:
            details_text += f"‚è∏Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {loc.t('catalog.product.temporarily_unavailable')}\n"
        
        # üî¨ –ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if hasattr(product, 'scientific_name') and product.scientific_name:
            details_text += f"üî¨ <b>–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {product.scientific_name}\n"
            section_tracker.mark_section_outputted(SectionTypes.SCIENTIFIC_NAME)
        
        details_text += "\n"
        
        # üî¨ –°–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        if hasattr(product, 'organic_components') and product.organic_components:
            details_text += f"üî¨ <b>–°–æ—Å—Ç–∞–≤</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–µ–∫—Ü–∏—é —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            if hasattr(product, 'cover_image_url') and product.cover_image_url:
                details_text += f"üñºÔ∏è <i>–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</i>\n\n"
            
            for i, component in enumerate(product.organic_components, 1):
                details_text += f"‚Ä¢ <b>{component.biounit_id}</b> - <b>{component.proportion}</b>\n"
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ ComponentDescription
                if hasattr(component, 'description') and component.description:
                    desc = component.description
                    
                    # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if (hasattr(desc, 'generic_description') and desc.generic_description and 
                        section_tracker.can_output_section(SectionTypes.GENERIC_DESCRIPTION, 'component')):
                        details_text += f"  üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>\n    {desc.generic_description}\n"
                        section_tracker.mark_section_outputted(SectionTypes.GENERIC_DESCRIPTION)
                    
                    # –≠—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if (hasattr(desc, 'effects') and desc.effects and 
                        section_tracker.can_output_section(SectionTypes.EFFECTS, 'component')):
                        details_text += f"  ‚ú® <b>–≠—Ñ—Ñ–µ–∫—Ç—ã</b>\n    {desc.effects}\n"
                        section_tracker.mark_section_outputted(SectionTypes.EFFECTS)
                    
                    # –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    if (hasattr(desc, 'shamanic') and desc.shamanic and 
                        section_tracker.can_output_section(SectionTypes.SHAMANIC, 'component')):
                        details_text += f"  üßô‚Äç‚ôÇÔ∏è <b>–®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</b>\n    {desc.shamanic}\n"
                        section_tracker.mark_section_outputted(SectionTypes.SHAMANIC)
                    
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                    if (hasattr(desc, 'warnings') and desc.warnings and 
                        section_tracker.can_output_section(SectionTypes.WARNINGS, 'component')):
                        details_text += f"  ‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>\n    {desc.warnings}\n"
                        section_tracker.mark_section_outputted(SectionTypes.WARNINGS)
                    
                    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if (hasattr(desc, 'dosage_instructions') and desc.dosage_instructions and 
                        section_tracker.can_output_section(SectionTypes.DOSAGE_INSTRUCTIONS, 'component')):
                        details_text += f"  üíä <b>–î–æ–∑–∏—Ä–æ–≤–∫–∞</b>\n"
                        for instruction in desc.dosage_instructions:
                            details_text += f"    ‚Ä¢ {instruction.title}: {instruction.description}\n"
                        section_tracker.mark_section_outputted(SectionTypes.DOSAGE_INSTRUCTIONS)
                    
                    # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    if (hasattr(desc, 'features') and desc.features and 
                        section_tracker.can_output_section(SectionTypes.FEATURES, 'component')):
                        details_text += f"  üåü <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b>\n    {', '.join(desc.features)}\n"
                        section_tracker.mark_section_outputted(SectionTypes.FEATURES)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                if hasattr(component, 'properties') and component.properties:
                    details_text += f"  {component.properties}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º "–≤–æ–∑–¥—É—Ö" –º–µ–∂–¥—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
                details_text += "\n"
            details_text += "\n"
        
        # üìù –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
        if (hasattr(product, 'generic_description') and product.generic_description and 
            section_tracker.can_output_section(SectionTypes.GENERIC_DESCRIPTION, 'product')):
            details_text += f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>\n{product.generic_description}\n\n"
            section_tracker.mark_section_outputted(SectionTypes.GENERIC_DESCRIPTION)
        
        # ‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)
        if (hasattr(product, 'effects') and product.effects and 
            section_tracker.can_output_section(SectionTypes.EFFECTS, 'product')):
            details_text += f"‚ú® <b>–≠—Ñ—Ñ–µ–∫—Ç—ã</b>\n{product.effects}\n\n"
            section_tracker.mark_section_outputted(SectionTypes.EFFECTS)
        
        # üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º—ã - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(product, 'prices') and product.prices:
            details_text += f"üí∞ <b>–¶–µ–Ω—ã</b>\n"
            section_tracker.mark_section_outputted(SectionTypes.PRICES)
            for i, price in enumerate(product.prices, 1):
                details_text += f"‚Ä¢ <b>{price.format_price()}</b>"
                
                # –í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º
                if price.is_weight_based:
                    details_text += f" –∑–∞ <b>{price.format_amount()}</b>"
                elif price.is_volume_based:
                    details_text += f" –∑–∞ <b>{price.format_amount()}</b>"
                
                # –§–æ—Ä–º–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                if hasattr(price, 'form') and price.form:
                    details_text += f" <i>{price.form}</i>"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ
                if hasattr(price, 'description') and price.description:
                    details_text += f" - {price.description}"
                
                details_text += "\n"
            details_text += "\n"
        
        # üì¶ –§–æ—Ä–º—ã –ø—Ä–æ–¥—É–∫—Ç–∞
        if hasattr(product, 'forms') and product.forms:
            forms_text = ', '.join(product.forms)
            details_text += f"üì¶ <b>–§–æ—Ä–º—ã</b>\n{forms_text}\n\n"
            section_tracker.mark_section_outputted(SectionTypes.FORMS)
        
        # üíä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
        if (hasattr(product, 'dosage_instructions') and product.dosage_instructions and 
            section_tracker.can_output_section(SectionTypes.DOSAGE_INSTRUCTIONS, 'product')):
            details_text += f"üíä <b>–î–æ–∑–∏—Ä–æ–≤–∫–∞</b>\n"
            for instruction in product.dosage_instructions:
                details_text += f"<b>{instruction.title}</b>\n"
                details_text += f"{instruction.description}\n"
                
                # –¢–∏–ø –¥–æ–∑–∏—Ä–æ–≤–∫–∏
                if hasattr(instruction, 'type') and instruction.type:
                    details_text += f"<i>–¢–∏–ø: {instruction.type}</i>\n"
                
                details_text += "\n"
            details_text += "\n"
            section_tracker.mark_section_outputted(SectionTypes.DOSAGE_INSTRUCTIONS)
        
        # üßô‚Äç‚ôÇÔ∏è –®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
        if (hasattr(product, 'shamanic') and product.shamanic and 
            section_tracker.can_output_section(SectionTypes.SHAMANIC, 'product')):
            details_text += f"üßô‚Äç‚ôÇÔ∏è <b>–®–∞–º–∞–Ω—Å–∫–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞</b>\n{product.shamanic}\n\n"
            section_tracker.mark_section_outputted(SectionTypes.SHAMANIC)
        
        # ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
        if (hasattr(product, 'warnings') and product.warnings and 
            section_tracker.can_output_section(SectionTypes.WARNINGS, 'product')):
            details_text += f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</b>\n{product.warnings}\n\n"
            section_tracker.mark_section_outputted(SectionTypes.WARNINGS)
        
        # üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        if hasattr(product, 'categories') and product.categories:
            categories_text = ', '.join(product.categories)
            details_text += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n{categories_text}\n\n"
            section_tracker.mark_section_outputted(SectionTypes.CATEGORIES)
        
        # üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ)
        if (hasattr(product, 'features') and product.features and 
            section_tracker.can_output_section(SectionTypes.FEATURES, 'product')):
            details_text += f"üåü <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b>\n"
            for feature in product.features:
                details_text += f"‚Ä¢ {feature}\n"
            details_text += "\n"
            section_tracker.mark_section_outputted(SectionTypes.FEATURES)
        
        return details_text
        
    except Exception as e:
        # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"[FORMATTING] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'title', 'unknown')}: {e}")
        return f"üè∑Ô∏è <b>{getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')}</b>\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
