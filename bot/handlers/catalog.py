from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from bot.services.localization import Localization
from bot.model.user_settings import UserSettings
from bot.services.product_registry import ProductRegistryService
from bot.services.blockchain import BlockchainService
from bot.services.ar_weave import ArWeaveUploader
import logging
import tempfile
import aiohttp
import os

router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
user_settings = UserSettings()
blockchain_service = BlockchainService()
arweave_uploader = ArWeaveUploader()
product_registry_service = ProductRegistryService(blockchain_service, arweave_uploader)

@router.callback_query(F.data == "menu:catalog")
async def show_catalog(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º user_id –∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ user_settings
    3. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ ProductRegistryService (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ Arweave –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    """
    user_id = callback.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    try:
        logger.info("[CATALOG] –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wallet_address = user_settings.get_wallet_address(user_id)
        if not wallet_address:
            logger.warning(f"[CATALOG] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è user_id={user_id}")
            await callback.message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üîê –ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫ –≤ –º–µ–Ω—é")
            return

        logger.info(f"[CATALOG] –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: {wallet_address}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        products = await product_registry_service.get_all_products()
        
        if not products:
            logger.info(f"[CATALOG] –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞ {wallet_address}")
            await callback.message.answer("ü§∑‚Äç‚ôÇÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –º–µ–¥–∏–∞
        for product in products:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏–∑ Arweave
                if product.cover_image_url:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    async with aiohttp.ClientSession() as session:
                        async with session.get(product.cover_image_url) as response:
                            if response.status == 200:
                                with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                                    tmp_file.write(await response.read())
                                    image_path = tmp_file.name
                            else:
                                logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {product.cover_image_url}")
                                image_path = None

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
                product_text = (
                    f"üè∑ {product.title}\n\n"
                    f"üìù {product.description}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price} USDT\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(product.categories)}\n"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                if image_path:
                    await callback.message.answer_photo(
                        FSInputFile(image_path),
                        caption=product_text
                    )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(image_path)
                else:
                    await callback.message.answer(product_text)

            except Exception as e:
                logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id}: {e}")
                continue
        
    except Exception as e:
        logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")
    
    finally:
        await callback.answer() 