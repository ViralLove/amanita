from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from bot.services.common.localization import Localization
from bot.model.user_settings import UserSettings
from bot.services.product.registry_singleton import product_registry_service
from bot.services.core.blockchain import BlockchainService
from bot.services.core.ipfs_factory import IPFSFactory
from bot.services.product.validation import ProductValidationService
from bot.services.core.account import AccountService
from bot.keyboards.common import get_product_keyboard, get_product_details_keyboard_no_duplicate, get_product_details_keyboard_with_scroll
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ dependency providers
from .common.formatting import ProductFormatterService
from .dependencies import get_product_formatter_service
import logging
import tempfile
import aiohttp
import os
from typing import Dict

router = Router()
logger = logging.getLogger(__name__)

# ================== –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –í–´–ù–ï–°–ï–ù–´ –í –ú–û–î–£–õ–¨ .common.formatting ==================

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
formatter_service = get_product_formatter_service()

logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
try:
    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserSettings...")
    user_settings = UserSettings()
    logger.info("[CATALOG] UserSettings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockchainService...")
    blockchain_service = BlockchainService()
    logger.info("[CATALOG] BlockchainService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IPFSFactory...")
    storage_service = IPFSFactory().get_storage()
    logger.info("[CATALOG] IPFSFactory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProductValidationService...")
    validation_service = ProductValidationService()
    logger.info("[CATALOG] ProductValidationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccountService...")
    account_service = AccountService(blockchain_service)
    logger.info("[CATALOG] AccountService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä product_registry_service
    logger.info("[CATALOG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä product_registry_service")
    logger.info("[CATALOG] –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
except Exception as e:
    logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    import traceback
    logger.error(traceback.format_exc())

@router.callback_query(F.data == "menu:catalog")
async def show_catalog(callback: CallbackQuery):
    logger.info(f"[CATALOG] show_catalog –≤—ã–∑–≤–∞–Ω! callback.data={callback.data}, from_user={callback.from_user.id}")
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º user_id –∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ ProductRegistryService (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    """
    user_id = callback.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    try:
        logger.info("[CATALOG] –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await callback.message.answer(loc.t("catalog.loading"))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        products = await product_registry_service.get_all_products()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        if not products:
            logger.info("[CATALOG] –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            await callback.message.answer(loc.t("catalog.empty"))
            return

        logger.info(f"[CATALOG] –ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        progress_message = await callback.message.answer(
            f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: 0/{len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n\n"
            f"üîç <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b> #catalog"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, product in enumerate(products):
            try:
                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    formatted_sections = formatter_service.format_product_for_telegram(product, loc)
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –æ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞)
                    product_text = (
                        formatted_sections['main_info'] +
                        formatted_sections['composition'] +
                        formatted_sections['pricing'] +
                        formatted_sections['details']
                    )
                except Exception as e:
                    logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}: {e}")
                    # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    product_text = f"üè∑Ô∏è <b>{getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')}</b>\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
                
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
                original_length = len(product_text)
                product_text = formatter_service._truncate_text(product_text)
                final_length = len(product_text)
                
                if original_length != final_length:
                    logger.info(f"[CATALOG] –¢–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')} –æ–±—Ä–µ–∑–∞–Ω: {original_length} -> {final_length} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
                if product.cover_image_url:
                    try:
                        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º storage service –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL
                        image_url = storage_service.get_public_url(product.cover_image_url)
                        logger.info(f"[CATALOG] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        async with aiohttp.ClientSession() as session:
                            async with session.get(image_url) as response:
                                if response.status == 200:
                                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                                        tmp_file.write(await response.read())
                                        image_path = tmp_file.name
                                    
                                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
                                    product_id = getattr(product, 'id', getattr(product, 'business_id', 'unknown'))
                                    keyboard = get_product_keyboard(product_id, loc)
                                    
                                    await callback.message.answer_photo(
                                        FSInputFile(image_path),
                                        caption=product_text,
                                        parse_mode="HTML",
                                        reply_markup=keyboard
                                    )
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    os.unlink(image_path)
                                    logger.info(f"[CATALOG] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}")
                                else:
                                    logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (HTTP {response.status}): {image_url}")
                                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                                    product_id = getattr(product, 'id', getattr(product, 'business_id', 'unknown'))
                                    keyboard = get_product_keyboard(product_id, loc)
                                    await callback.message.answer(product_text, parse_mode="HTML", reply_markup=keyboard)
                    except Exception as e:
                        logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {getattr(product, 'id', 'unknown')}: {e}")
                        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        product_id = getattr(product, 'id', getattr(product, 'business_id', 'unknown'))
                        keyboard = get_product_keyboard(product_id, loc)
                        await callback.message.answer(product_text, parse_mode="HTML", reply_markup=keyboard)
                else:
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_id = getattr(product, 'id', getattr(product, 'business_id', 'unknown'))
                    keyboard = get_product_keyboard(product_id, loc)
                    await callback.message.answer(product_text, parse_mode="HTML", reply_markup=keyboard)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await progress_message.edit_text(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: {i+1}/{len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(products) - 1:
                    await callback.message.answer("‚òÄÔ∏è" * 8)

            except Exception as e:
                logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id}: {e}")
                continue
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await progress_message.delete()
        await callback.message.answer(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
        
        logger.info(f"[CATALOG] –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await callback.message.answer(loc.t("catalog.error"))
    
    finally:
        await callback.answer()

@router.callback_query(F.data == "scroll:catalog")
async def scroll_to_catalog(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞.
    """
    logger.info(f"[SCROLL_CATALOG] scroll_to_catalog –≤—ã–∑–≤–∞–Ω! callback.data={callback.data}, from_user={callback.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        lang = user_settings.get_language(user_id)
        loc = Localization(lang)
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        scroll_message = (
            f"üìö <b>–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>\n\n"
            f"‚Ä¢ #catalog - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥\n"
            f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É</i>"
        )
        
        await callback.message.answer(
            scroll_message,
            parse_mode="HTML"
        )
        
        logger.info(f"[SCROLL_CATALOG] –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –∫ –∫–∞—Ç–∞–ª–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"[SCROLL_CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É")
        except:
            pass
    
    finally:
        await callback.answer()



@router.callback_query(F.data.startswith("product:details:"))
async def show_product_details(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ" –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
    """
    logger.info(f"[PRODUCT_DETAILS] show_product_details –≤—ã–∑–≤–∞–Ω! callback.data={callback.data}, from_user={callback.from_user.id}")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id –∏–∑ callback.data
        # –§–æ—Ä–º–∞—Ç: "product:details:{product_id}"
        product_id = callback.data.split(":")[-1]
        logger.info(f"[PRODUCT_DETAILS] –ò–∑–≤–ª–µ—á–µ–Ω product_id: {product_id}")
        
        if not product_id or product_id == "details":
            logger.error("[PRODUCT_DETAILS] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π product_id")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        lang = user_settings.get_language(user_id)
        loc = Localization(lang)
        
        logger.info(f"[PRODUCT_DETAILS] –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await callback.message.answer(loc.t("catalog.loading") if hasattr(loc, 't') else "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º get_all_products –∏ –∏—â–µ–º –ø–æ ID
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ get_product_by_id –≤ ProductRegistryService
        products = await product_registry_service.get_all_products()
        product = None
        
        for p in products:
            if (getattr(p, 'id', None) == product_id or 
                getattr(p, 'business_id', None) == product_id):
                product = p
                break
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        if not product:
            logger.error(f"[PRODUCT_DETAILS] –ü—Ä–æ–¥—É–∫—Ç —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        
        logger.info(f"[PRODUCT_DETAILS] –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product.title}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        try:
            # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è caption (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 1024 —Å–∏–º–≤–æ–ª–æ–≤)
            main_info_text = formatter_service.format_product_main_info_for_telegram(product, loc)
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª–∏–Ω—ã, –±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            description_text = formatter_service.format_product_description_for_telegram(product, loc)
            
            logger.info(f"[PRODUCT_DETAILS] –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {len(main_info_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"[PRODUCT_DETAILS] –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(description_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"[PRODUCT_DETAILS] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            # Fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            main_info_text = f"üè∑Ô∏è <b>{getattr(product, 'title', '–ü—Ä–æ–¥—É–∫—Ç')}</b>\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            description_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = get_product_details_keyboard_with_scroll(product_id, loc)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if product.cover_image_url:
            try:
                # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ storage service
                image_url = storage_service.get_public_url(product.cover_image_url)
                logger.info(f"[PRODUCT_DETAILS] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                async with aiohttp.ClientSession() as session:
                    async with session.get(image_url) as response:
                        if response.status == 200:
                            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                                tmp_file.write(await response.read())
                                image_path = tmp_file.name
                            
                            # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –∫–Ω–æ–ø–∫–∏
                            await callback.message.answer_photo(
                                FSInputFile(image_path),
                                caption=main_info_text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                            
                            # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏
                            await callback.message.answer(
                                description_text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                            
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            os.unlink(image_path)
                            logger.info(f"[PRODUCT_DETAILS] –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
                        else:
                            logger.error(f"[PRODUCT_DETAILS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (HTTP {response.status}): {image_url}")
                            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                            await callback.message.answer(main_info_text, parse_mode="HTML", reply_markup=keyboard)
                            await callback.message.answer(description_text, parse_mode="HTML", reply_markup=keyboard)
            except Exception as e:
                logger.error(f"[PRODUCT_DETAILS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await callback.message.answer(main_info_text, parse_mode="HTML", reply_markup=keyboard)
                await callback.message.answer(description_text, parse_mode="HTML", reply_markup=keyboard)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(main_info_text, parse_mode="HTML", reply_markup=keyboard)
            await callback.message.answer(description_text, parse_mode="HTML", reply_markup=keyboard)
            logger.info(f"[PRODUCT_DETAILS] –î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
        
        logger.info(f"[PRODUCT_DETAILS] –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        
    except Exception as e:
        logger.error(f"[PRODUCT_DETAILS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ")
        except:
            pass
    
    finally:
        await callback.answer() 