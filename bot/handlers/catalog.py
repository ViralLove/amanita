from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from bot.services.common.localization import Localization
from bot.model.user_settings import UserSettings
from bot.services.product.registry_singleton import product_registry_service
from bot.services.core.blockchain import BlockchainService
from bot.services.core.ipfs_factory import IPFSFactory
from bot.services.product.validation import ProductValidationService
from bot.services.core.account import AccountService
import logging
import tempfile
import aiohttp
import os

router = Router()
logger = logging.getLogger(__name__)

logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
try:
    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserSettings...")
    user_settings = UserSettings()
    logger.info("[CATALOG] UserSettings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockchainService...")
    blockchain_service = BlockchainService()
    logger.info("[CATALOG] BlockchainService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IPFSFactory...")
    storage_service = IPFSFactory().get_storage()
    logger.info("[CATALOG] IPFSFactory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProductValidationService...")
    validation_service = ProductValidationService()
    logger.info("[CATALOG] ProductValidationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    logger.info("[CATALOG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AccountService...")
    account_service = AccountService(blockchain_service)
    logger.info("[CATALOG] AccountService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä product_registry_service
    logger.info("[CATALOG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä product_registry_service")
    logger.info("[CATALOG] –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
except Exception as e:
    logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    import traceback
    logger.error(traceback.format_exc())

@router.callback_query(F.data == "menu:catalog")
async def show_catalog(callback: CallbackQuery):
    logger.info(f"[CATALOG] show_catalog –≤—ã–∑–≤–∞–Ω! callback.data={callback.data}, from_user={callback.from_user.id}")
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º user_id –∏ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ ProductRegistryService (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    """
    user_id = callback.from_user.id
    lang = user_settings.get_language(user_id)
    loc = Localization(lang)

    try:
        logger.info("[CATALOG] –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await callback.message.answer(loc.t("catalog.loading"))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        products = product_registry_service.get_all_products()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        if not products:
            logger.info("[CATALOG] –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            await callback.message.answer(loc.t("catalog.empty"))
            return

        logger.info(f"[CATALOG] –ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, product in enumerate(products):
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
                product_text = (
                    f"üè∑ <b>{product.title}</b>\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if product.description and product.description.generic_description:
                    product_text += f"üìù {product.description.generic_description[:200]}...\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥ –∏ —Ñ–æ—Ä–º—ã
                if product.species:
                    product_text += f"{loc.t('catalog.product.species')}: <b>{product.species}</b>\n"
                
                if product.forms:
                    product_text += f"{loc.t('catalog.product.forms')}: <b>{', '.join(product.forms)}</b>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if product.categories:
                    product_text += f"{loc.t('catalog.product.categories')}: <b>{', '.join(product.categories)}</b>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã
                if product.prices:
                    product_text += f"{loc.t('catalog.product.prices')}:\n"
                    for price in product.prices:
                        product_text += f"   ‚Ä¢ {price.format_full()}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_text = loc.t('catalog.product.active') if product.is_active else loc.t('catalog.product.inactive')
                product_text += f"\n{status_text}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
                if product.cover_image_url:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        async with aiohttp.ClientSession() as session:
                            async with session.get(product.cover_image_url) as response:
                                if response.status == 200:
                                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                                        tmp_file.write(await response.read())
                                        image_path = tmp_file.name
                                    
                                    await callback.message.answer_photo(
                                        FSInputFile(image_path),
                                        caption=product_text,
                                        parse_mode="HTML"
                                    )
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    os.unlink(image_path)
                                else:
                                    logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {product.cover_image_url}")
                                    await callback.message.answer(product_text, parse_mode="HTML")
                    except Exception as e:
                        logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        await callback.message.answer(product_text, parse_mode="HTML")
                else:
                    await callback.message.answer(product_text, parse_mode="HTML")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < len(products) - 1:
                    await callback.message.answer("‚òÄÔ∏è" * 20)

            except Exception as e:
                logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id}: {e}")
                continue
        
        logger.info(f"[CATALOG] –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"[CATALOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await callback.message.answer(loc.t("catalog.error"))
    
    finally:
        await callback.answer() 