"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

from fastapi import APIRouter, Depends, HTTPException, Request
from typing import List, Dict, Any
from bot.api.dependencies import get_product_registry_service
from bot.services.product.registry import ProductRegistryService
from bot.api.models.product import (
    ProductUploadIn, ProductUploadRequest, ProductResponse, ProductsUploadResponse,
    ProductUpdateIn, ProductStatusUpdate
)
from bot.api.exceptions.validation import ProductValidationError, UnifiedValidationError
from bot.api.converters import ConverterFactory
from bot.api.models.common import EthereumAddress
import logging

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/products", tags=["products"])

@router.get("/{seller_address}")
async def get_seller_catalog(
    seller_address: str,
    registry_service: ProductRegistryService = Depends(get_product_registry_service),
    http_request: Request = None
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞.
    
    Args:
        seller_address: Ethereum –∞–¥—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞
        registry_service: –°–µ—Ä–≤–∏—Å —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        http_request: HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
        
    Raises:
        HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞
    """
    logger.info(f"[API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å GET /products/{seller_address}")
    logger.info(f"[API] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_address}")
    
    try:
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è Ethereum –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        logger.info(f"[API] –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è Ethereum –∞–¥—Ä–µ—Å–∞: {seller_address}")
        try:
            validated_address = EthereumAddress(seller_address)
            seller_address = str(validated_address)  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            logger.info(f"[API] ‚úÖ Ethereum –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: {seller_address}")
        except ValueError as e:
            logger.warning(f"[API] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Ethereum –∞–¥—Ä–µ—Å–∞: {seller_address}, –æ—à–∏–±–∫–∞: {e}")
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Ethereum –∞–¥—Ä–µ—Å–∞: {seller_address}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 0x + 40 hex —Å–∏–º–≤–æ–ª–æ–≤"
            )
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥)
        logger.info(f"[API] –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        current_seller_address = registry_service.seller_account.address
        logger.info(f"[API] –¢–µ–∫—É—â–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü: {current_seller_address}")
        logger.info(f"[API] –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {seller_address}")
        
        if seller_address.lower() != current_seller_address.lower():
            logger.warning(f"[API] ‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞. –ó–∞–ø—Ä–æ—à–µ–Ω: {seller_address}, —Ç–µ–∫—É—â–∏–π: {current_seller_address}")
            raise HTTPException(
                status_code=403,
                detail="Access denied: can only view own catalog"
            )
        
        logger.info(f"[API] ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_address}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        logger.info(f"[API] –®–∞–≥ 3: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_address}")
        logger.info(f"[API] –í—ã–∑—ã–≤–∞–µ–º registry_service.get_all_products()...")
        products = await registry_service.get_all_products()
        
        logger.info(f"[API] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_address}")
        if products:
            logger.info(f"[API] –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: business_id={products[0].business_id if hasattr(products[0], 'business_id') else 'N/A'}")
        else:
            logger.info(f"[API] ‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç - 0 –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"[API] –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        response_data = {
            "seller_address": seller_address,
            "total_count": len(products),
            "products": [
                {
                    "business_id": str(product.business_id),  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
                    "blockchain_id": product.blockchain_id if hasattr(product, 'blockchain_id') and product.blockchain_id else None,  # üîß –î–û–ë–ê–í–õ–ï–ù–û: blockchain_id (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø)
                    "title": product.title,
                    "status": product.status,
                    "cid": product.cid,
                    "categories": product.categories,
                    "forms": product.forms,
                    "species": product.species,
                    "cover_image_url": product.cover_image_url,
                    "organic_components": [
                        {
                            "biounit_id": component.biounit_id,
                            "description_cid": component.description_cid,
                            "proportion": component.proportion
                        } for component in product.organic_components
                    ] if hasattr(product, 'organic_components') and product.organic_components else [],  # üîß –î–û–ë–ê–í–õ–ï–ù–û: organic_components
                    "prices": [
                        {
                            "price": price.price,
                            "currency": price.currency,
                            "weight": price.weight,
                            "weight_unit": price.weight_unit,
                            "volume": price.volume,
                            "volume_unit": price.volume_unit,
                            "form": price.form
                        } for price in product.prices
                    ] if product.prices else []
                } for product in products
            ]
        }
        
        logger.info(f"[API] ‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_address}")
        logger.info(f"[API] üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: seller_address={response_data['seller_address']}, total_count={response_data['total_count']}, products_count={len(response_data['products'])}")
        return response_data
        
    except HTTPException as http_ex:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        logger.warning(f"[API] ‚ö†Ô∏è HTTPException –ø–µ—Ä–µ–±—Ä–æ—à–µ–Ω: status_code={http_ex.status_code}, detail={http_ex.detail}")
        raise
    except Exception as e:
        logger.error(f"[API] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_address}: {e}")
        import traceback
        logger.error(f"[API] üîç –ü–æ–ª–Ω—ã–π traceback –æ—à–∏–±–∫–∏:")
        logger.error(traceback.format_exc())
        raise HTTPException(
            status_code=500,
            detail=f"Internal server error: {str(e)}"
        )

@router.post("/upload", response_model=ProductsUploadResponse)
async def upload_products(
    request: ProductUploadRequest,
    registry_service: ProductRegistryService = Depends(get_product_registry_service),
    http_request: Request = None
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ e-commerce —Å–∏—Å—Ç–µ–º.
    """
    logger.info(f"[API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /products/upload: {request}")
    logger.info(f"[API] request.products: {request.products}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    product_converter = ConverterFactory.get_product_converter()
    results = []
    
    for product in request.products:
        try:
            # –ü–æ–ª—É—á–∞–µ–º business_id –∏–∑ –º–æ–¥–µ–ª–∏
            business_id = product.get_business_id()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–º–µ—Å—Ç–æ model_dump()
            try:
                product_dict = product_converter.api_to_dict(product)
            except (ValueError, UnifiedValidationError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id}: {e}")
                error_message = str(e)
                if isinstance(e, UnifiedValidationError):
                    error_message = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}"
                    if e.error_code:
                        error_message += f" (–∫–æ–¥: {e.error_code})"
                results.append(ProductResponse(
                    id=str(product.id),
                    status="error",
                    error=error_message
                ))
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º business_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'business_id' not in product_dict or not product_dict['business_id']:
                product_dict['business_id'] = business_id
            
            logger.info(f"[API] product_dict –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {product_dict}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            result = await registry_service.create_product(product_dict)
            logger.info(f"[API] –†–µ–∑—É–ª—å—Ç–∞—Ç create_product: {result}")
            
            results.append(ProductResponse(
                id=business_id,
                blockchain_id=result.get("blockchain_id"),
                tx_hash=result.get("tx_hash"),
                metadata_cid=result.get("metadata_cid"),
                status=result.get("status", "error"),
                error=result.get("error")
            ))
        except (ProductValidationError, UnifiedValidationError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id}: {e}")
            error_message = str(e)
            if isinstance(e, UnifiedValidationError):
                error_message = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}"
                if e.error_code:
                    error_message += f" (–∫–æ–¥: {e.error_code})"
            results.append(ProductResponse(
                id=str(product.id),
                status="error",
                error=error_message
            ))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product.id}: {e}")
            results.append(ProductResponse(
                id=str(product.id),
                status="error",
                error=str(e)
            ))
    logger.info(f"[API] –§–∏–Ω–∞–ª—å–Ω—ã–π results: {results}")
    return ProductsUploadResponse(results=results)

@router.put("/{product_id}")
async def update_product(
    product_id: str,
    request: ProductUpdateIn,
    registry_service: ProductRegistryService = Depends(get_product_registry_service),
    http_request: Request = None
):
    """
    –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID.
    """
    logger.info(f"[API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å PUT /products/{product_id}: {request}")
    
    try:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ID –ø—Ä–æ–¥—É–∫—Ç–∞
        if not product_id or product_id.strip() == "":
            logger.error(f"[API] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        product_converter = ConverterFactory.get_product_converter()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–º–µ—Å—Ç–æ model_dump()
        try:
            product_dict = product_converter.api_to_dict(request)
        except (ValueError, UnifiedValidationError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            error_message = str(e)
            if isinstance(e, UnifiedValidationError):
                error_message = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}"
                if e.error_code:
                    error_message += f" (–∫–æ–¥: {e.error_code})"
            raise HTTPException(
                status_code=422,
                detail=error_message
            )
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        logger.info(f"[API] –í—ã–∑—ã–≤–∞–µ–º registry_service.update_product –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}")
        result = await registry_service.update_product(product_id, product_dict)
        logger.info(f"[API] –†–µ–∑—É–ª—å—Ç–∞—Ç update_product: {result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        if result.get("status") == "error":
            error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.error(f"[API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {error_message}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.lower():
                raise HTTPException(status_code=404, detail=error_message)
            elif "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in error_message.lower():
                raise HTTPException(status_code=403, detail=error_message)
            elif "–≤–∞–ª–∏–¥–∞—Ü–∏—è" in error_message.lower():
                raise HTTPException(status_code=422, detail=error_message)
            else:
                raise HTTPException(status_code=500, detail=error_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = ProductResponse(
            id=result.get("id", product_id),
            blockchain_id=result.get("blockchain_id"),
            tx_hash=result.get("tx_hash"),
            metadata_cid=result.get("metadata_cid"),
            status=result.get("status", "success"),
            error=result.get("error")
        )
        logger.info(f"[API] –†–µ–∑—É–ª—å—Ç–∞—Ç PUT /products/{product_id}: {response}")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"[API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.post("/{product_id}/status")
async def update_product_status(
    product_id: str,
    request: ProductStatusUpdate,
    registry_service: ProductRegistryService = Depends(get_product_registry_service),
    http_request: Request = None
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    logger.info(f"[API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å POST /products/{product_id}/status: {request}")
    
    try:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ID –ø—Ä–æ–¥—É–∫—Ç–∞
        if not product_id or product_id.strip() == "":
            logger.error(f"[API] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞: {product_id}")
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞"
            )
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if request.status not in [0, 1]:
            logger.error(f"[API] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {request.status}")
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0 (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω), 1 (–∞–∫—Ç–∏–≤–µ–Ω)"
            )
        
        # TODO: TASK-002.3 - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è MVP
        response = ProductResponse(
            id=product_id,
            status="success",
            error=None
        )
        logger.info(f"[API] –†–µ–∑—É–ª—å—Ç–∞—Ç POST /products/{product_id}/status: {response}")
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"[API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )
