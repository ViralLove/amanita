"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –º–µ–∂–¥—É API –∏ Service –º–æ–¥–µ–ª—è–º–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–µ–∂–¥—É:
- API: ProductUploadIn (Pydantic)
- Service: Product (class)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:
- OrganicComponentConverter –¥–ª—è organic_components
- PriceConverter –¥–ª—è prices
"""

from typing import Dict, Any, Optional, List
from bot.api.models.product import ProductUploadIn, OrganicComponentAPI, PriceModel
from bot.model.product import Product, OrganicComponent, PriceInfo
from bot.api.converters.base import BaseConverter
from bot.api.converters.organic_component_converter import OrganicComponentConverter
from bot.api.converters.price_converter import PriceConverter
from bot.validation import ValidationFactory, ValidationResult

class ProductConverter(BaseConverter[ProductUploadIn, Product]):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É API –∏ Service –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - ProductUploadIn ‚Üî Product
    - Dict ‚Üî Product
    - –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ValidationFactory
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å –∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞–º–∏."""
        self.component_converter = OrganicComponentConverter()
        self.price_converter = PriceConverter()
    
    def api_to_service(self, api_model: ProductUploadIn) -> Product:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç API –º–æ–¥–µ–ª—å –≤ Service –º–æ–¥–µ–ª—å.
        
        Args:
            api_model: API –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            Product: Service –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º organic_components
        organic_components = [
            self.component_converter.api_to_service(component)
            for component in api_model.organic_components
        ]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        prices = [
            self.price_converter.api_to_service(price)
            for price in api_model.prices
        ]
        
        # –°–æ–∑–¥–∞–µ–º Service –º–æ–¥–µ–ª—å
        return Product(
            business_id=str(api_model.id),  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–µ–Ω–æ id –Ω–∞ business_id
            blockchain_id=api_model.id,      # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ blockchain_id
            status=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            cid="",  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
            title=api_model.title,
            organic_components=organic_components,
            cover_image_url=api_model.cover_image_url,
            categories=api_model.categories,
            forms=api_model.forms,
            species=api_model.species,
            prices=prices
        )
    
    def service_to_api(self, service_model: Product) -> ProductUploadIn:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Service –º–æ–¥–µ–ª—å –≤ API –º–æ–¥–µ–ª—å.
        
        Args:
            service_model: Service –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            ProductUploadIn: API –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º organic_components
        organic_components = [
            self.component_converter.service_to_api(component)
            for component in service_model.organic_components
        ]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        prices = [
            self.price_converter.service_to_api(price)
            for price in service_model.prices
        ]
        
        # –°–æ–∑–¥–∞–µ–º API –º–æ–¥–µ–ª—å
        return ProductUploadIn(
            id=int(service_model.business_id) if service_model.business_id.isdigit() else 1,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id
            title=service_model.title,
            organic_components=organic_components,
            cover_image_url=service_model.cover_image_url,
            categories=service_model.categories,
            forms=service_model.forms,
            species=service_model.species,
            prices=prices
        )
    
    def dict_to_api(self, data: Dict[str, Any]) -> ProductUploadIn:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ API –º–æ–¥–µ–ª—å.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            ProductUploadIn: API –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º organic_components
        organic_components = [
            self.component_converter.dict_to_api(component_data)
            for component_data in data.get('organic_components', [])
        ]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        prices = [
            self.price_converter.dict_to_api(price_data)
            for price_data in data.get('prices', [])
        ]
        
        # –°–æ–∑–¥–∞–µ–º API –º–æ–¥–µ–ª—å
        return ProductUploadIn(
            id=data.get('id', 0),
            title=data.get('title', ''),
            organic_components=organic_components,
            cover_image_url=data.get('cover_image_url', ''),
            categories=data.get('categories', []),
            forms=data.get('forms', []),
            species=data.get('species', ''),
            prices=prices
        )
    
    def api_to_dict(self, api_model: ProductUploadIn) -> Dict[str, Any]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç API –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Args:
            api_model: API –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        """
        return {
            'id': api_model.id,
            'title': api_model.title,
            'organic_components': [
                self.component_converter.api_to_dict(component)
                for component in api_model.organic_components
            ],
            'cover_image_url': api_model.cover_image_url,
            'categories': api_model.categories,
            'forms': api_model.forms,
            'species': api_model.species,
            'prices': [
                self.price_converter.api_to_dict(price)
                for price in api_model.prices
            ]
        }
    
    def validate_api_model(self, api_model: ProductUploadIn) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç API –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ ValidationFactory.
        
        Args:
            api_model: API –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º API –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            data = self.api_to_dict(api_model)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ValidationFactory
            validator = ValidationFactory.get_product_validator()
            validation_result = validator.validate(data)
            
            return validation_result.is_valid
            
        except Exception:
            return False
    
    def validate_service_model(self, service_model: Product) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Service –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ ValidationFactory.
        
        Args:
            service_model: Service –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Service –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            data = {
                'id': service_model.business_id,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º business_id –≤–º–µ—Å—Ç–æ id
                'title': service_model.title,
                'organic_components': [
                    {
                        'biounit_id': component.biounit_id,
                        'description_cid': component.description_cid,
                        'proportion': component.proportion
                    }
                    for component in service_model.organic_components
                ],
                'cover_image_url': service_model.cover_image_url,
                'categories': service_model.categories,
                'forms': service_model.forms,
                'species': service_model.species,
                'prices': [
                    {
                        'weight': price.weight,
                        'weight_unit': price.weight_unit,
                        'price': str(price.price),
                        'currency': price.currency
                    }
                    for price in service_model.prices
                ]
            }
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ValidationFactory
            validator = ValidationFactory.get_product_validator()
            validation_result = validator.validate(data)
            
            return validation_result.is_valid
            
        except Exception:
            return False
