require("dotenv").config();
const { Web3 } = require("web3");
const fs = require("fs");
const path = require("path");
const hre = require("hardhat");

require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏
const network = hre.network.name;
// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ .env
const deployerPrivateKey = process.env.DEPLOYER_PRIVATE_KEY.startsWith('0x') 
  ? process.env.DEPLOYER_PRIVATE_KEY 
  : `0x${process.env.DEPLOYER_PRIVATE_KEY}`;

const sellerPrivateKey = process.env.SELLER_PRIVATE_KEY.startsWith('0x')
  ? process.env.SELLER_PRIVATE_KEY
  : `0x${process.env.SELLER_PRIVATE_KEY}`;

const AMANITA_REGISTRY_CONTRACT_ADDRESS = process.env.AMANITA_REGISTRY_CONTRACT_ADDRESS;
console.log("AMANITA_REGISTRY_CONTRACT_ADDRESS:", AMANITA_REGISTRY_CONTRACT_ADDRESS);

// RPC URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å–µ—Ç–∏
const RPC_URL = hre.network.config.url;

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
const web3 = new Web3(RPC_URL);

// –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
const deployerAccount = web3.eth.accounts.privateKeyToAccount(deployerPrivateKey);
web3.eth.accounts.wallet.add(deployerAccount);

const sellerAccount = web3.eth.accounts.privateKeyToAccount(sellerPrivateKey);
web3.eth.accounts.wallet.add(sellerAccount);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
async function loadContract(contractName, contractAddress = null) {

  if (contractAddress == null) {
    contractAddress = await amanitaRegistry.methods.getAddress(contractName).call();
  }

  const contractJSON = await loadContractArtifact(contractName);

  let contract;
  if (contractAddress) {
    contract = new web3.eth.Contract(contractJSON.abi, contractAddress);
  } else {
    contract = new web3.eth.Contract(contractJSON.abi);
  }
  return contract;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
function generateRandomAlphanumeric(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

async function loadContractArtifact(contractName) {
  const artifactPath = path.join(__dirname, "..", "artifacts", "contracts", `${contractName}.sol`, `${contractName}.json`);
  if (!fs.existsSync(artifactPath)) {
    throw new Error(`Contract artifact not found for ${contractName}. Please compile the contract first.`);
  }
  return JSON.parse(fs.readFileSync(artifactPath, "utf8"));
}

amanitaRegistry = null;
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
async function deployContract(contractName, constructorArgs = [], options = {}) {
  console.log(`\n=== –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π ${contractName} –≤ —Å–µ—Ç—å ${network.toUpperCase()} ===`);
  
  const artifact = await loadContractArtifact(contractName);
  const contract = new web3.eth.Contract(artifact.abi);
  
  const gasPrice = await web3.eth.getGasPrice();
  console.log("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞:", web3.utils.fromWei(gasPrice, 'gwei'), "Gwei");
  
  const instance = await contract.deploy({
    data: artifact.bytecode,
    arguments: constructorArgs
  }).send({
    from: deployerAccount.address,
    gas: options.gas || 5000000,
    gasPrice: gasPrice
  });

  if (amanitaRegistry != null) {
    await amanitaRegistry.methods.setAddress(contractName, instance.options.address).send({
      from: deployerAccount.address,
      gas: 200000
    });
  }

  console.log(`\n=== –î–µ–ø–ª–æ–π ${contractName} —É—Å–ø–µ—à–µ–Ω! ===`);
  console.log(`–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${contractName}:`, instance.options.address);
  
  return instance;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
 * @param {number} action - –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
 * 0 - –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ —Ä–µ–µ—Å—Ç—Ä–∞
 * 1 - –¥–µ–ø–ª–æ–π –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤–∫–ª—é—á–∞—è —Ä–µ–µ—Å—Ç—Ä —Å –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
 * 2 - –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
 * 3 - –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –∏–Ω–≤–∞–π—Ç–æ–≤
 * 4 - –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –∫–∞—Ç–∞–ª–æ–≥–∞
 */
async function main(action) {

  action=4;
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ action
  if (action === undefined || action === null) {
    throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä action. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node deploy_full.js <action> (0-4)");
  }

  action = parseInt(action);
  if (isNaN(action) || action < 0 || action > 4) {
    throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ action. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-4");
  }

  const deployer = deployerAccount.address;
  console.log("\n=== –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ===");
  console.log("–î–µ–ø–ª–æ–µ—Ä:", deployer);
  console.log("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (action):", action);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ —Å–µ—Ç–∏
  const balance = await web3.eth.getBalance(deployer);
  const currency = network === 'polygon' ? 'MATIC' : 'ETH';
  console.log("–ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–µ—Ä–∞:", web3.utils.fromWei(balance, 'ether'), currency);
  console.log("RPC URL:", RPC_URL);

  let inviteNFT, productRegistry;

  try {
    // –î–µ–ø–ª–æ–π –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞
    if (action === 0 || action === 1) {
      console.log("\nüî∑ –î–µ–ø–ª–æ–∏–º AmanitaRegistry...");
      amanitaRegistry = await deployContract("AmanitaRegistry");
      console.log("\n‚≠êÔ∏è –í–ê–ñ–ù–û! –ê–¥—Ä–µ—Å —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è .env:");
      console.log("AMANITA_REGISTRY_CONTRACT_ADDRESS=" + amanitaRegistry.options.address);
      console.log("‚≠êÔ∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ bot/.env\n");
    } else {
      console.log("\nüî∑ –ó–∞–≥—Ä—É–∂–∞–µ–º AmanitaRegistry...");
      amanitaRegistry = await loadContract("AmanitaRegistry", AMANITA_REGISTRY_CONTRACT_ADDRESS);
      
      console.log("‚òÄÔ∏è –ê–¥—Ä–µ—Å —Ä–µ–µ—Å—Ç—Ä–∞:", amanitaRegistry.options.address);
    }

    // –î–µ–ø–ª–æ–π –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    if (action === 1 || action === 2) {
      // –î–µ–ø–ª–æ–π InviteNFT
      console.log("\nüî∑ –î–µ–ø–ª–æ–∏–º InviteNFT...");
      inviteNFT = await deployContract("InviteNFT");

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º InviteNFT –≤ —Ä–µ–µ—Å—Ç—Ä–µ
      console.log("\nüî∑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º InviteNFT –≤ —Ä–µ–µ—Å—Ç—Ä–µ...");
      await amanitaRegistry.methods.setAddress("InviteNFT", inviteNFT.options.address).send({
        from: deployerAccount.address,
        gas: 200000
      });
      console.log("‚úÖ InviteNFT —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ:", inviteNFT.options.address);

      // –î–µ–ø–ª–æ–π ProductRegistry
      console.log("\nüî∑ –î–µ–ø–ª–æ–∏–º ProductRegistry...");
      productRegistry = await deployContract("ProductRegistry", [inviteNFT.options.address]);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ProductRegistry –≤ —Ä–µ–µ—Å—Ç—Ä–µ
      console.log("\nüî∑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ProductRegistry –≤ —Ä–µ–µ—Å—Ç—Ä–µ...");
      await amanitaRegistry.methods.setAddress("ProductRegistry", productRegistry.options.address).send({
        from: deployerAccount.address,
        gas: 200000
      });
      console.log("‚úÖ ProductRegistry —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ:", productRegistry.options.address);
    
    }
    
    if (action === 3 || action === 4) {

      inviteNFT = await loadContract("InviteNFT");
      console.log("‚òÄÔ∏è –ê–¥—Ä–µ—Å InviteNFT:", inviteNFT.options.address);

      productRegistry = await loadContract("ProductRegistry");
      console.log("‚òÄÔ∏è –ê–¥—Ä–µ—Å ProductRegistry:", productRegistry.options.address);
      
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π 1, 2, 3)
    if (action === 1 || action === 2 || action === 3 || action === 4) {
      await setupSellerRole(inviteNFT);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤
    if (action === 3) {
      console.log("\nüî∑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç—ã...");
      await creatingInvites(inviteNFT);
      console.log("‚úÖ –ò–Ω–≤–∞–π—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bot/flowers/invites.txt");
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    if (action === 4) {
      console.log("\nüî∑ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...");
      await createCatalog(productRegistry);
      console.log("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
    }

    // –í—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã
    if (action <= 2) {
      console.log("\n‚≠êÔ∏è –í–ê–ñ–ù–û! –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è .env:");
      console.log("AMANITA_REGISTRY_CONTRACT_ADDRESS=" + amanitaRegistry.options.address);
      if (inviteNFT) console.log("INVITE_NFT_CONTRACT_ADDRESS=" + inviteNFT.options.address);
      if (productRegistry) console.log("PRODUCT_REGISTRY_CONTRACT_ADDRESS=" + productRegistry.options.address);
    }

  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", action + ":");
    console.error(error.message || error);
    throw error;
  }
}

SELLER_ROLE = web3.utils.keccak256("SELLER_ROLE");
// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupSellerRole, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
async function setupSellerRole(inviteNFT) {
  if (!inviteNFT) {
    throw new Error("InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
  }
  let hasSellerRole = false;
  try {
    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å SELLER_ROLE –ø—Ä–æ–¥–∞–≤—Ü—É –≤ InviteNFT
    console.log("\nüî∑ –í—ã—è—Å–Ω—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Ä–æ–ª—å SELLER_ROLE...");
    console.log("SELLER_ROLE:", SELLER_ROLE);
    console.log("sellerAccount.address:", sellerAccount.address);
    console.log("inviteNFT address:", inviteNFT.options.address);
    hasSellerRole = await inviteNFT.methods.hasRole(SELLER_ROLE, sellerAccount.address).call();
    console.log("hasSellerRole:", hasSellerRole);
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—è—Å–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ SELLER_ROLE:");
    console.error(error.message || error);
    throw error;
  }

  try {
    if (!hasSellerRole) {
      console.log("–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏ SELLER_ROLE, –Ω–∞–∑–Ω–∞—á–∞–µ–º...");
      await inviteNFT.methods.grantRole(SELLER_ROLE, sellerAccount.address).send({
        from: deployerAccount.address,
        gas: 200000
      });
      console.log("‚úÖ –†–æ–ª—å SELLER_ROLE —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞");
    } else {
      console.log("–ü—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å SELLER_ROLE");
    }
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ SELLER_ROLE:");
    console.error(error.message || error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é creatingInvites, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
async function creatingInvites(inviteNFT) {
  if (!inviteNFT) {
    throw new Error("InviteNFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
  }
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –º–∏–Ω—Ç–∏–º –∏–Ω–≤–∞–π—Ç—ã
  console.log("\nüî∑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç—ã...");
  const invites = [];
  const usedCodes = new Set();

  for (let i = 0; i < 88; i++) {
    let alpha, beta, invite;
    do {
      alpha = generateRandomAlphanumeric(4);
      beta = generateRandomAlphanumeric(4);
      invite = `AMANITA-${alpha}-${beta}`;
    } while (usedCodes.has(invite));
    usedCodes.add(invite);
    invites.push(invite);
    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω–≤–∞–π—Ç ${i + 1}/88:`, invite);
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω–≤–∞–π—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –∏ –º–∏–Ω—Ç–∏–º
  const BATCH_SIZE = 12;
  const batches = [];
  for (let i = 0; i < invites.length; i += BATCH_SIZE) {
    batches.push(invites.slice(i, i + BATCH_SIZE));
  }

  console.log(`\nüî∑ –ú–∏–Ω—Ç–∏–º ${batches.length} –±–∞—Ç—á–µ–π –ø–æ ${BATCH_SIZE} –∏–Ω–≤–∞–π—Ç–æ–≤...`);

  for (let i = 0; i < batches.length; i++) {
    console.log(`\n–ú–∏–Ω—Ç–∏–º –±–∞—Ç—á ${i + 1}/${batches.length}...`);
    const batch = batches[i];
    
    await inviteNFT.methods.mintInvites(batch, 0).send({
      from: sellerAccount.address,
      gas: 3000000,
      nonce: await web3.eth.getTransactionCount(sellerAccount.address)
    });
    console.log(`‚úÖ –ë–∞—Ç—á ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω`);
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–≤–∞–π—Ç—ã –≤ —Ñ–∞–π–ª
  const logsDir = path.join(__dirname, "..", "bot", "flowers");
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
  }
  fs.writeFileSync(path.join(logsDir, "invites.txt"), invites.join("\n"));
  console.log("\n‚úÖ –ò–Ω–≤–∞–π—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bot/flowers/invites.txt");
  return invites;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é createCatalog, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
async function createCatalog(productRegistry) {
  if (!productRegistry) {
    throw new Error("ProductRegistry –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
  }
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ê–ö–¢–ò–í–ù–´–ô –∫–∞—Ç–∞–ª–æ–≥
  // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  const productsPath = path.join(__dirname, "..", "bot", "catalog", "product_registry_upload_data.json");
  const productsData = JSON.parse(fs.readFileSync(productsPath, "utf8"));
  console.log(`\nüî∑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${productsData.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ product_registry_upload_data.json`);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ ProductRegistry
  for (const product of productsData) {
    console.log(`\n‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç: ${product.id}`);
    console.log("Product properties:");
    console.log("ipfsCID:", product.ipfsCID);
    console.log("active:", product.active);
    
    // –°–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    productRegistry.events.allEvents({
      fromBlock: 'latest'
    }, (error, event) => {
      if (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏—è:", error);
      } else {
        console.log("–°–æ–±—ã—Ç–∏–µ:", event.event);
        console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", event.returnValues);
      }
    });

    await productRegistry.methods.createProduct(
      product.ipfsCID,
      product.id
    ).send({
      from: sellerAccount.address,
      gas: 1000000  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≥–∞–∑–∞
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã...");
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ getProductsBySellerFull
  const products = await productRegistry.methods.getProductsBySellerFull().call({
    from: sellerAccount.address
  });
  console.log(`\n–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
  for (const product of products) {
    console.log(`\nüì¶ –ü—Ä–æ–¥—É–∫—Ç #${product.id}:`);
    console.log("  –ü—Ä–æ–¥–∞–≤–µ—Ü:", product.seller);
    console.log("  IPFS CID:", product.ipfsCID);
    console.log("  –ê–∫—Ç–∏–≤–µ–Ω:", product.active);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const originalProduct = productsData.find(p => p.ipfsCID === product.ipfsCID);
    if (originalProduct) {
      console.log("  ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º");
    } else {
      console.log("  ‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!");
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
  const catalogVersion = await productRegistry.methods.getMyCatalogVersion().call({
    from: sellerAccount.address
  });
  console.log(`\nüìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: ${catalogVersion}`);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ getAllActiveProductIds –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const activeIds = await productRegistry.methods.getAllActiveProductIds().call();
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ getAllActiveProductIds: –Ω–∞–π–¥–µ–Ω–æ ${activeIds.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
  
  if (activeIds.length !== products.length) {
    console.log("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞!");
  }
}

// –ü–æ–ª—É—á–∞–µ–º action –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const action = process.argv[2] || process.env.DEPLOY_ACTION || '1';
console.log("[deploy_full.js] action:", action);

main(action)
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n=== –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ ===");
    console.error(error.message || error);
    process.exit(1);
  }); 