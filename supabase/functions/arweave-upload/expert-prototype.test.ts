/**
 * –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ ArWeave
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—á–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è Deno –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

import { assertEquals } from "https://deno.land/std@0.168.0/testing/asserts.ts";
import Arweave from "https://esm.sh/arweave@1.15.7";
import { signTransaction } from "./arweave/compatible.ts";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
async function loadPrivateKey(): Promise<any> {
  const privateKeyFilePath = Deno.env.get('ARWEAVE_PRIVATE_KEY_FILE') || "arweave-wallet.json";
  const rawKey = await Deno.readTextFile(privateKeyFilePath);
  return JSON.parse(rawKey);
}

// –¢–µ—Å—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞
Deno.test("EXPERT PROTOTYPE - —Ç–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞", async () => {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø —ç–∫—Å–ø–µ—Ä—Ç–∞ ArWeave...");
  
  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const arweave = Arweave.init({
      host: "arweave.net",
      port: 443,
      protocol: "https",
    });
    
    console.log("‚úÖ ArWeave –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á JWK (RSA)
    const privateKey = await loadPrivateKey();
    console.log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω:", privateKey.kty === "RSA");
    
    // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const dataString = "Hello Arweave from Expert Prototype!";
    const dataBytes = new TextEncoder().encode(dataString);
    const dataB64 = arweave.utils.bufferTob64Url(dataBytes);
    
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:");
    console.log("   –û—Ä–∏–≥–∏–Ω–∞–ª:", dataString);
    console.log("   –†–∞–∑–º–µ—Ä:", dataBytes.length, "–±–∞–π—Ç");
    console.log("   Base64:", dataB64.substring(0, 20) + "...");
    
    // 4. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log("üì° –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
    const lastTx = await arweave.transactions.getTransactionAnchor();
    const reward = await arweave.transactions.getPrice(dataBytes.length);
    
    console.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:");
    console.log("   Last TX:", lastTx);
    console.log("   Reward:", reward);
    
    // 5. –°–æ–±–∏—Ä–∞–µ–º "—Å—ã—Ä–æ–π" –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log("üîß –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é...");
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ SDK, –Ω–æ —Å —Ä—É—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const tx = await arweave.createTransaction({
      data: dataBytes,
      target: "",
      quantity: "0",
    }, privateKey);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try {
      (tx as any).reward = reward;
      (tx as any).last_tx = lastTx;
    } catch (error) {
      console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å reward/last_tx –Ω–∞–ø—Ä—è–º—É—é");
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
    tx.addTag("Content-Type", "text/plain");
    tx.addTag("Test-Type", "expert-prototype");
    
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞:");
    console.log("   Format:", tx.format);
    console.log("   Owner:", tx.owner?.substring(0, 20) + "...");
    console.log("   Data size:", tx.data_size);
    console.log("   Tags count:", tx.tags?.length || 0);
    
    // 6. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log("üîê –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
    await signTransaction(arweave, tx, privateKey);
    
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞:");
    console.log("   ID:", tx.id);
    console.log("   Signature:", tx.signature?.substring(0, 20) + "...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'ar'
    if (tx.id && tx.id.startsWith("ar")) {
      console.log("‚úÖ Transaction ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", tx.id);
    } else {
      console.log("‚ùå Transaction ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", tx.id);
      console.log("   –û–∂–∏–¥–∞–ª–æ—Å—å: ar...");
      console.log("   –ü–æ–ª—É—á–µ–Ω–æ:", tx.id);
    }
    
    // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
    const response = await arweave.transactions.post(tx);
    
    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:");
    console.log("   Status:", response.status);
    console.log("   Status Text:", response.statusText);
    
    if (response.status === 200 || response.status === 202) {
      console.log("üéâ –£–°–ü–ï–•! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      console.log("üîó URL:", `https://arweave.net/${tx.id}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      console.log("üì• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
      try {
        const downloadedData = await arweave.transactions.getData(tx.id, { decode: true });
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∞–Ω—ã:", downloadedData);
        assertEquals(downloadedData, dataString, "–°–∫–∞—á–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏");
        console.log("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
      } catch (error: any) {
        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error.message);
      }
      
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.status, response.statusText);
      console.log("üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", response.data);
    }
    
  } catch (error: any) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–µ:", error.message);
    console.error("Stack trace:", error.stack);
    throw error;
  }
});

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞
Deno.test("EXPERT PROTOTYPE - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫", async () => {
  console.log("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞...");
  
  const arweave = Arweave.init({
    host: "arweave.net",
    port: 443,
    protocol: "https",
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
  console.log("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤...");
  
  assertEquals(typeof arweave.utils.bufferTob64Url, "function", "bufferTob64Url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
  assertEquals(typeof arweave.utils.stringToB64Url, "function", "stringToB64Url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
  assertEquals(typeof arweave.transactions.getTransactionAnchor, "function", "getTransactionAnchor –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
  assertEquals(typeof arweave.transactions.getPrice, "function", "getPrice –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
  assertEquals(typeof arweave.transactions.sign, "function", "sign –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
  assertEquals(typeof arweave.transactions.post, "function", "post –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω");
  
  console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...");
  const testString = "test";
  const testBytes = new TextEncoder().encode(testString);
  const testB64 = arweave.utils.bufferTob64Url(testBytes);
  const testB64String = arweave.utils.stringToB64Url(testString);
  
  console.log("   Test string:", testString);
  console.log("   Test bytes length:", testBytes.length);
  console.log("   Test base64:", testB64);
  console.log("   Test base64 string:", testB64String);
  
  assertEquals(testB64.length > 0, true, "Base64 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
  assertEquals(testB64String.length > 0, true, "Base64 string –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
  
  console.log("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
}); 