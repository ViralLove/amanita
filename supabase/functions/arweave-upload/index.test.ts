/**
 * TDD-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ unit-—Ç–µ—Å—Ç—ã –¥–ª—è ArWeave Edge Function
 * –ü—Ä–∏–º–µ–Ω—è–µ–º –º—ã—à–ª–µ–Ω–∏–µ @test-qualification.mdc –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */

import { assertEquals, assertThrows } from "https://deno.land/std@0.168.0/testing/asserts.ts";
import { 
  getPrivateKey, 
  validatePrivateKey, 
  validateTextUpload, 
  uploadText, 
  uploadFile,
  createSuccessResponse,
  createErrorResponse,
  createHealthResponse,
  type ArWeavePrivateKey,
  type ArWeaveClient,
  type ArWeaveTransaction,
  type Environment
} from "./utils.ts";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ArWeave SDK –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
import Arweave from "https://esm.sh/arweave@1.15.7";

// ============================================================================
// –ú–û–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

const mockTransaction: ArWeaveTransaction = {
  id: "ar_test_transaction_id_12345",
  addTag: () => {},
  get: () => "test_data"
};

const mockArweave: ArWeaveClient = {
  init: () => mockArweave,
  createTransaction: async () => mockTransaction,
  transactions: {
    sign: async () => {},
    post: async () => ({ status: 200 })
  }
};

const mockArweaveWithError: ArWeaveClient = {
  ...mockArweave,
  transactions: {
    ...mockArweave.transactions,
    post: async () => ({ status: 400, statusText: "Transaction verification failed." })
  }
};

// ============================================================================
// –†–ï–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° ARWEAVE SDK
// ============================================================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ArWeave –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const realArweave = Arweave.init({
  host: "arweave.net",
  port: 443,
  protocol: "https",
  timeout: 20000,
  logging: true,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞
async function loadRealPrivateKey(): Promise<ArWeavePrivateKey> {
  const privateKeyFilePath = Deno.env.get('ARWEAVE_PRIVATE_KEY_FILE');
  if (!privateKeyFilePath) {
    throw new Error('ARWEAVE_PRIVATE_KEY_FILE environment variable is required');
  }

  try {
    const rawKey = await Deno.readTextFile(privateKeyFilePath);
    const parsedKey = JSON.parse(rawKey);
    validatePrivateKey(parsedKey);
    return parsedKey;
  } catch (err) {
    console.error('Failed to load Arweave private key:', err);
    throw new Error('Could not load or parse Arweave private key file');
  }
}

// ============================================================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú ARWEAVE SDK
// ============================================================================

Deno.test("REAL ARWEAVE - –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", async () => {
  // Arrange
  const testData = "test content for real ArWeave integration";
  const contentType = "text/plain";
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  const realPrivateKey = await loadRealPrivateKey();
  
  console.log("üîë –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω:", realPrivateKey.kty === "RSA");
  console.log("üîë –ö–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è:", Object.keys(realPrivateKey));
  
  // Act - —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º ArWeave SDK
  console.log("üìù –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
  const transaction = await realArweave.createTransaction({
    data: new TextEncoder().encode(testData)
  }, realPrivateKey);
  
  console.log("üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, ID –¥–æ –ø–æ–¥–ø–∏—Å–∏:", transaction.id);
  console.log("üìù Owner –¥–æ –ø–æ–¥–ø–∏—Å–∏:", transaction.owner);
  
  // –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –î–û –ø–æ–¥–ø–∏—Å–∏ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
  console.log("üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏...");
  transaction.addTag('Content-Type', contentType);
  
  // –®–∞–≥ 3: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  console.log("üîê –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
  await realArweave.transactions.sign(transaction, realPrivateKey);
  
  console.log("üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∏:");
  console.log("   ID:", transaction.id);
  console.log("   Owner:", transaction.owner);
  console.log("   Signature:", transaction.signature ? transaction.signature.substring(0, 20) + "..." : "–ù–ï–¢");
  console.log("   Tags:", transaction.tags);
  
  // Assert
  assertEquals(transaction.id.startsWith("ar"), true, "Transaction ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'ar'");
  assertEquals(typeof transaction.id, "string", "Transaction ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  assertEquals(transaction.id.length > 20, true, "Transaction ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º");
  assertEquals(typeof transaction.signature, "string", "–ü–æ–¥–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
  assertEquals(transaction.signature.length > 0, true, "–ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
  
  console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∞:", transaction.id);
  console.log("üîê –ü–æ–¥–ø–∏—Å—å:", transaction.signature.substring(0, 20) + "...");
});

Deno.test("REAL ARWEAVE - –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ ArWeave", async () => {
  // Arrange
  const testData = JSON.stringify({
    test: "real_arweave_integration",
    timestamp: new Date().toISOString(),
    message: "Testing real ArWeave upload"
  });
  const contentType = "application/json";
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  const realPrivateKey = await loadRealPrivateKey();
  
  console.log("üîë –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ ArWeave...");
  
  // Act - —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const transaction = await realArweave.createTransaction({
    data: new TextEncoder().encode(testData)
  }, realPrivateKey);
  
  // –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –î–û –ø–æ–¥–ø–∏—Å–∏ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
  transaction.addTag('Content-Type', contentType);
  transaction.addTag('Test-Type', 'integration-test');
  
  // –®–∞–≥ 3: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  await realArweave.transactions.sign(transaction, realPrivateKey);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  assertEquals(transaction.id.startsWith("ar"), true, "Transaction ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'ar'");
  assertEquals(transaction.signature.length > 0, true, "–ü–æ–¥–ø–∏—Å—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
  
  // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ ArWeave
  const response = await realArweave.transactions.post(transaction);
  
  // Assert
  assertEquals(response.status === 200 || response.status === 202, true, 
    `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200 –∏–ª–∏ 202, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
  
  assertEquals(transaction.id.startsWith("ar"), true, "Transaction ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'ar'");
  
  console.log("‚úÖ –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ ArWeave —É—Å–ø–µ—à–Ω–∞:", transaction.id);
  console.log("üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–∞—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const downloadedData = await realArweave.transactions.getData(transaction.id, { decode: true });
  assertEquals(downloadedData, testData, "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏");
  
  console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã");
});

Deno.test("REAL ARWEAVE - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", async () => {
  // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
  const invalidKey = {
    kty: "RSA",
    n: "invalid_n",
    e: "AQAB",
    d: "invalid_d",
    p: "invalid_p",
    q: "invalid_q",
    dp: "invalid_dp",
    dq: "invalid_dq",
    qi: "invalid_qi"
  };
  
  const testData = "test content";
  
  // Act & Assert - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∏
  await assertThrows(
    async () => {
      const transaction = await realArweave.createTransaction({
        data: new TextEncoder().encode(testData)
      }, invalidKey);
      
      await realArweave.transactions.sign(transaction, invalidKey);
    },
    Error,
    "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º"
  );
  
  console.log("‚úÖ –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
});

// –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å–≤—è–∑–∏ —Å ArWeave
Deno.test("REAL ARWEAVE - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å–≤—è–∑—å —Å —Å–µ—Ç—å—é", async () => {
  console.log("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å ArWeave...");
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ArWeave
    const networkInfo = await realArweave.network.getInfo();
    console.log("‚úÖ –°–≤—è–∑—å —Å ArWeave —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:", networkInfo);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    const currentBlock = await realArweave.blocks.getCurrent();
    console.log("üì¶ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫:", currentBlock);
    
    assertEquals(typeof networkInfo, "object", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏");
    assertEquals(typeof currentBlock, "object", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å ArWeave:", error);
    throw error;
  }
});

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
Deno.test("REAL ARWEAVE - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞", async () => {
  console.log("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...");
  
  const realPrivateKey = await loadRealPrivateKey();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª—é—á–∞
  console.log("üîë –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª—é—á–∞:", {
    kty: realPrivateKey.kty,
    hasN: !!realPrivateKey.n,
    hasE: !!realPrivateKey.e,
    hasD: !!realPrivateKey.d,
    hasP: !!realPrivateKey.p,
    hasQ: !!realPrivateKey.q,
    nLength: realPrivateKey.n?.length,
    eLength: realPrivateKey.e?.length,
    dLength: realPrivateKey.d?.length
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ RSA –∫–ª—é—á
  assertEquals(realPrivateKey.kty, "RSA", "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å RSA");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
  const requiredFields = ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi'] as const;
  for (const field of requiredFields) {
    assertEquals(!!(realPrivateKey as any)[field], true, `–ü–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞ (RSA –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º)
  assertEquals(realPrivateKey.n.length > 100, true, "–ú–æ–¥—É–ª—å n –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º");
  assertEquals(realPrivateKey.d.length > 100, true, "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ d –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–π");
  
  console.log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ");
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  try {
    const testTransaction = await realArweave.createTransaction({
      data: new TextEncoder().encode("test")
    }, realPrivateKey);
    
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –∫–ª—é—á–æ–º");
    console.log("   ID –¥–æ –ø–æ–¥–ø–∏—Å–∏:", testTransaction.id);
    console.log("   Owner:", testTransaction.owner ? testTransaction.owner.substring(0, 20) + "..." : "–ù–ï–¢");
    
    // –ï—Å–ª–∏ ID –ø—É—Å—Ç–æ–π, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
    if (!testTransaction.id) {
      console.log("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Transaction ID –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!");
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–ª—é—á–æ–º:", error);
    throw error;
  }
});

// –¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ ArWeave SDK –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
Deno.test("REAL ARWEAVE - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é SDK –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥", async () => {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é ArWeave SDK...");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é SDK
  console.log("üì¶ ArWeave SDK –≤–µ—Ä—Å–∏—è:", (realArweave as any).version || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞");
  console.log("üîß ArWeave SDK –º–µ—Ç–æ–¥—ã:", Object.keys(realArweave));
  
  const realPrivateKey = await loadRealPrivateKey();
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
  console.log("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö...");
  try {
    const emptyTransaction = await realArweave.createTransaction({}, realPrivateKey);
    console.log("üìù –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID:", emptyTransaction.id);
    console.log("üìù –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Owner:", emptyTransaction.owner ? emptyTransaction.owner.substring(0, 20) + "..." : "–ù–ï–¢");
  } catch (error: any) {
    console.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error.message);
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  console.log("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...");
  try {
    const minimalTransaction = await realArweave.createTransaction({
      data: "test"
    }, realPrivateKey);
    console.log("üìù –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID:", minimalTransaction.id);
    console.log("üìù –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Owner:", minimalTransaction.owner ? minimalTransaction.owner.substring(0, 20) + "..." : "–ù–ï–¢");
  } catch (error: any) {
    console.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error.message);
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å Uint8Array
  console.log("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å Uint8Array...");
  try {
    const uint8Transaction = await realArweave.createTransaction({
      data: new Uint8Array([116, 101, 115, 116]) // "test" –≤ –±–∞–π—Ç–∞—Ö
    }, realPrivateKey);
    console.log("üìù Uint8Array —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID:", uint8Transaction.id);
    console.log("üìù Uint8Array —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Owner:", uint8Transaction.owner ? uint8Transaction.owner.substring(0, 20) + "..." : "–ù–ï–¢");
  } catch (error: any) {
    console.log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Uint8Array —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤—Ä—É—á–Ω—É—é
  console.log("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã transactions:", Object.keys(realArweave.transactions));
  console.log("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã crypto:", Object.keys(realArweave.crypto || {}));
  console.log("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã utils:", Object.keys(realArweave.utils || {}));
});

// –¢–µ—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Deno
Deno.test("REAL ARWEAVE - —Ç–µ—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", async () => {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  try {
    const info = await realArweave.network.getInfo();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ArWeave:", info.height);
  } catch (error: any) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
    return;
  }
  
  const realPrivateKey = await loadRealPrivateKey();
  
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
  console.log("üìù –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —à–∞–±–ª–æ–Ω—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...");
  const tx = await realArweave.createTransaction({ 
    data: new TextEncoder().encode("Hello") 
  }, realPrivateKey);
  
  console.log("üìù –î–æ –ø–æ–¥–ø–∏—Å–∏ - ID:", tx.id, "Owner:", tx.owner?.substring(0, 6));
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
  tx.addTag("Content-Type", "text/plain");
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
  console.log("üîê –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
  await realArweave.transactions.sign(tx, realPrivateKey);
  
  console.log("üìù –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∏ - ID:", tx.id, "Owner:", tx.owner?.substring(0, 6));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (tx.id) {
    console.log("‚úÖ Transaction ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:", tx.id);
    assertEquals(tx.id.startsWith("ar"), true, "Transaction ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'ar'");
  } else {
    console.log("‚ùå Transaction ID –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º - –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Deno");
    // –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Deno —Å ArWeave SDK
  }
  
  if (tx.owner) {
    console.log("‚úÖ Owner —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:", tx.owner.substring(0, 20) + "...");
  } else {
    console.log("‚ùå Owner –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
  }
});

// –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
Deno.test("REAL ARWEAVE - —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", async () => {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
  
  const realPrivateKey = await loadRealPrivateKey();
  
  // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const tx = await realArweave.createTransaction({ 
    data: new TextEncoder().encode("Test transaction for upload") 
  }, realPrivateKey);
  
  tx.addTag("Content-Type", "text/plain");
  tx.addTag("Test-Type", "upload-test");
  
  await realArweave.transactions.sign(tx, realPrivateKey);
  
  console.log("üìù Transaction ID:", tx.id);
  console.log("üìù Owner:", tx.owner?.substring(0, 20) + "...");
  console.log("üìù Signature:", tx.signature?.substring(0, 20) + "...");
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...");
  try {
    const response = await realArweave.transactions.post(tx);
    console.log("üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
    console.log("üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:", response.statusText);
    
    if (response.status === 200 || response.status === 202) {
      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.status, response.statusText);
    }
  } catch (error: any) {
    console.log("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error.message);
  }
});

// –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Transaction ID
Deno.test("REAL ARWEAVE - —Ç–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Transaction ID", async () => {
  console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Transaction ID...");
  
  const realPrivateKey = await loadRealPrivateKey();
  
  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const tx = await realArweave.createTransaction({ 
    data: new TextEncoder().encode("Test transaction for ID generation") 
  }, realPrivateKey);
  
  console.log("üìù –î–æ –ø–æ–¥–ø–∏—Å–∏:");
  console.log("   ID:", tx.id);
  console.log("   Owner:", tx.owner?.substring(0, 20) + "...");
  console.log("   Data size:", tx.data_size);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
  tx.addTag("Content-Type", "text/plain");
  tx.addTag("Test-Type", "id-generation");
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
  await realArweave.transactions.sign(tx, realPrivateKey);
  
  console.log("üìù –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∏:");
  console.log("   ID:", tx.id);
  console.log("   Owner:", tx.owner?.substring(0, 20) + "...");
  console.log("   Signature:", tx.signature?.substring(0, 20) + "...");
  console.log("   Data size:", tx.data_size);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'ar'
  if (tx.id && tx.id.startsWith("ar")) {
    console.log("‚úÖ Transaction ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", tx.id);
  } else {
    console.log("‚ùå Transaction ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", tx.id);
    console.log("   –û–∂–∏–¥–∞–ª–æ—Å—å: ar...");
    console.log("   –ü–æ–ª—É—á–µ–Ω–æ:", tx.id);
    
         // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é –≤—ã—á–∏—Å–ª–∏—Ç—å ID
     console.log("üîß –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å ID –≤—Ä—É—á–Ω—É—é...");
     try {
       // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
       const signatureData = await tx.getSignatureData();
       console.log("   Signature data length:", signatureData.length);
       
       // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
       const hash = await realArweave.crypto.hash(signatureData);
       console.log("   Hash:", hash);
       
       // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64url
       const id = realArweave.utils.bufferTob64Url(hash);
       console.log("   Computed ID:", id);
      
      if (id.startsWith("ar")) {
        console.log("‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", id);
      } else {
        console.log("‚ùå –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π ID —Ç–æ–∂–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", id);
      }
    } catch (error: any) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ ID:", error.message);
    }
  }
});

// ============================================================================
// TDD –¢–ï–°–¢–´ –î–õ–Ø getPrivateKey()
// ============================================================================

Deno.test("getPrivateKey - –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON –∫–ª—é—á", () => {
  // Arrange
  const validKey = {
    kty: "RSA",
    n: "test_n_value",
    e: "AQAB",
    d: "test_d_value",
    p: "test_p_value",
    q: "test_q_value",
    dp: "test_dp_value",
    dq: "test_dq_value",
    qi: "test_qi_value"
  };
  
  const mockEnv: Environment = {
    get: (key: string) => {
      if (key === 'ARWEAVE_PRIVATE_KEY') {
        return JSON.stringify(validKey);
      }
      return undefined;
    }
  };

  // Act
  const privateKey = getPrivateKey(mockEnv);

  // Assert
  assertEquals(privateKey.kty, "RSA");
  assertEquals(privateKey.n, "test_n_value");
  assertEquals(privateKey.e, "AQAB");
  assertEquals(privateKey.d, "test_d_value");
});

Deno.test("getPrivateKey - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞", () => {
  // Arrange
  const mockEnv: Environment = {
    get: (key: string) => undefined
  };

  // Act & Assert
  assertThrows(
    () => getPrivateKey(mockEnv),
    Error,
    "ARWEAVE_PRIVATE_KEY environment variable is required"
  );
});

Deno.test("getPrivateKey - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º JSON", () => {
  // Arrange
  const mockEnv: Environment = {
    get: (key: string) => {
      if (key === 'ARWEAVE_PRIVATE_KEY') {
        return "invalid json string";
      }
      return undefined;
    }
  };

  // Act & Assert
  assertThrows(
    () => getPrivateKey(mockEnv),
    Error,
    "Invalid JSON format for ARWEAVE_PRIVATE_KEY"
  );
});

Deno.test("getPrivateKey - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–ø–æ–ª–Ω–æ–º –∫–ª—é—á–µ", () => {
  // Arrange
  const incompleteKey = {
    kty: "RSA",
    n: "test_n_value"
    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  };
  
  const mockEnv: Environment = {
    get: (key: string) => {
      if (key === 'ARWEAVE_PRIVATE_KEY') {
        return JSON.stringify(incompleteKey);
      }
      return undefined;
    }
  };

  // Act & Assert
  assertThrows(
    () => getPrivateKey(mockEnv),
    Error,
    "Invalid private key: missing or invalid field 'e'"
  );
});

Deno.test("getPrivateKey - –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π RSA –∫–ª—é—á", () => {
  // Arrange
  const realKey = {
    "kty": "RSA",
    "e": "AQAB",
    "n": "gwSkfa7qf2dMGHEkx7WijiRvF7HDjYpO996oU5VAKzEuXRY7hyG6h7Q0ZyrL4t3-tR_wvKGxh4WxuHe8TPYfvqQWg3Cyyn3mmhKdgkEcS1WclIdZdgpTgJuNTJpvwu_egC6IwldVB8Vi-lRWzRh22833udef56Q-ZrTVgM-SHRNReVETIM7RskWOcn9b5Xxc4ZoEC1TbUK2DgXkSV5bR1B5TjlW2L7pTk8AK1lqMRhxKAwg6o-O7ssmqlBBi9Vg0ts5ui4GTiz1Fvr8_vJwjoWGbCE44QGSwqRE5rzZ4MQ_clgxPMrmADUzwDrOh7Vc9w771HegOJn1mOC2KC0T4LVLteOcYHi2eZBF_J8RAb66lWoO8LSMwMZeYuwrB7H8G7ZOk-bnfxDBwnKfm9NGrxWxw_eWsRQyqafpPipHZAEka0C5txRPZ2FSPXiDZgVqWFu2nqc7VtJ7DVN8k_ikTUaB8ZIEsFv3gnARkbdWhEvp6jajTSWAEzOcFeZpi6lpVDsJ1yEl6Z5j1Ld-_EfqPQOdaTmJhCxisEO7lRqua6SrA0ODUpX-CcJRxEeCJWzHLcr1a8FQgnZlGn8_sw9UgwDV3C12iMX1o-Uj1cYvW_2JMTKfTBqldS262weEpZLPCQILvrsOQ7r0UBieb8fPh5AfuPi-4YWmwuXq2yJ5DlLE",
    "d": "ZUA2OqbttA3JQe5WZTwaZs0DSYVoQb8MLgRVg1qJX5e_Y9LlqBXJyEvcX4o0TJwQ1jrb2Xr_7mLEqHFoBPYELFk0yNlUYqaPiqwuK1ZUHmgH_MTovw9V3sLXnMaQ7k5fXiIYMFA7dyj0x85b0l5ApLd05ZsciXBlhQvlH4nKOkwOn7mnFaifZ6zXW-bOxven8_UJgRRP9PZS9cDyCtyUReA15H6asCHHqxwzg9owI5KDI_q9DqDVEmNFPu22_DHxcwDvb0JxGp78gl_cSs9DvdjnbbC9Sg5GdDHKqXxnwEqoxxC2N9YhfqXhswrhbcEJC3hMh5MpNFeeonWXBASF4ac504vsdSPc0PKbRhTv9Nzr6f4qeVfREXhveb1mDd9BGXEDyi5drQmS3rc-zg4FpwDyiLP6i9UDPOP0IFINEmq7VYFXTR7kINtHXHLMxamP4vfecRI-EQHCnvDm8G9Ydpk-AL-3Y_LHmbCrtYvmRzFSO-Fw-GxVaU7om4db6u9cISODxvNTA4LMQuWsAuhjr1INOngV2AFwYPqk7kutrIWToCjCfOG-kojGIG66EmM7WiWrPYEiND9A8qHTECfDKE4SpY2ZMQRYrv9SG4G-DgiZNSw9udSr1qsP_vLhCPbe3rvYTr8MFge5n2V8MZh7_P-zGMs-WAgPL7XBnEoQLD0",
    "p": "45RbKtFz087-FmVtMYhf4C1kNP9gijJfp3ynLEbXKokqdjWS1gwV0D8GxldAG76GVOX7bKSvdxaKw-BLdGMAKysR_V0abhtyqkofWV3k6ZrbXPU3I2rQQmZCgH1Ka5Cc2e6uJ558V_in3L45xID8cxZJ0paHYuX-oXw9FZg9PB-RRjeXoAwSzhXTOsAhfB9uCiNEoHnwksxODkn0uPu98ZeCHVN0tp7H-gh6dhk9oYhyZZOXb6FhcYHpLUzqSqAdVUHaoAFGN3m3lx0_WAzCroog4WbpZNpCeWzvzww0kVJRPjEPvAL-0URdnoSjsOMGlNZ54K-o_MXW4DbnXYox1w",
    "q": "k2FACYUzVrtsbvX1gjSXwBwQpD-uJv-Kz-wbz3rUR-pjDUZC91adAcTwyZHSf40IOfOzwUdaoTaDmiqqGDuFgOv_DH20_kN5ylsfdcysoSdoOpW-QfFRVB8UJCn3pwDDUGjVg0cx_zU1-CjIXExTSYBFfxTsVvOPeg8MrA7_aRJ8DoIUvquqHCLmcJM7tEfIXKyE93RfvTcBp8IW0jJaP_1HR-vvbsYRTqwYMov4hFGsQ8FoPxy4EkpbgdOiWc4RNNEdy31U4t23J0CIrVMpga-7pZKyF9Nr6ZVoLC-JeEpUmXMERCO_-WZQoB8wwnl6F8-7OAZdE6mTcFKHpD8stw",
    "dp": "o6n-gmWM8ecrjbm1dGjJ4nNiXEbIC7q8VbvskYgElz97vPU8OxkH2vJokd0PaqRzAL1AOlqZIYChnMpCGVpVNbZMwrPhHQw6Q0L5FpDS3jkSxuBGnf7j9MyLyNHR4ldmpcfjkPSGIdHeDn7zFmFYq_98aaj9hl825rVtTIlmiEV_eUrjjSMBpxnFBbxEmHoV7c59PRdUro2lGNuQ1jOc3xCBb0ukZOz9jc_pGeN_EhsJgglJX-tkI3g00_I7kB1j2vt4GZexApZTNKbA9jZ_D3ygttkGwhPAuIhiUblKWLQlXx9zXFefH6oV1bk36y7pfcJcdfx-AALbS_XQH9IRkw",
    "dq": "IgtuAoT9hgSHmN5CV1CU2XDiOz7mmOWhCETPa89A6Ffxh6h6Ya5lWHpI8Rc5W_OVOeXc2UIFYoY4Qk2muzBMt6pMYXNMcwvdP2xrSQf9vMBgqF_c8livY9JGEdCL_80CUTnWUJwKpZyCGhA5sHCFMM5rv15y9ecPdq-xSrGwOHJnq-ZKqnz3L8a0Gr84JH4Mf7Puh0cfspLZVApWwTmWdX-pjqimx50DdHv2nv6Maux-8avky-dzce4xUz0zHLGocd34lwAdssZqv6t9pyQ1y1pv62CGuVBCdlPoG4TjqaDqCAR0sNTdTNxgtYxe9B2hoYyAAAIgUCF1CJZX9Q4O4w",
    "qi": "rtGKTxE7uN-f-_Vp6IhEAatOwm2FI128oqRGXSa_UrCHoIOVuFStDs-ZXxPrpjBItdQQ3hkIs97f_hVbtC6t69TLlgcuTpR0GCnKRY1VzIKUsCxh51i-P2dE72YWyynRYYPrwoOJ4R_EU_MYkQqm_ec9ZDat07AKXg9vMTv5sBXWLGKi1A5bufTga3UrjHT9MkYVNj8PS11xoPPJDQzQ-EmC5lfT8L0wGNcA1ZC_3MP49eDbMedGQ0VVaMLG8evL8FHhbgGfr7e0Vlxgh7sTGtFz945CKA4HN2LVwxDh9f3bIKm8m3b4PbPPkawmHHmVeEqiZX0zUK0UdsUJY0DSIQ"
  };
  
  const mockEnv: Environment = {
    get: (key: string) => {
      if (key === 'ARWEAVE_PRIVATE_KEY') {
        return JSON.stringify(realKey);
      }
      return undefined;
    }
  };

  // Act
  const privateKey = getPrivateKey(mockEnv);

  // Assert
  assertEquals(privateKey.kty, "RSA");
  assertEquals(privateKey.e, "AQAB");
  assertEquals(privateKey.n, realKey.n);
  assertEquals(privateKey.d, realKey.d);
  assertEquals(privateKey.p, realKey.p);
  assertEquals(privateKey.q, realKey.q);
  assertEquals(privateKey.dp, realKey.dp);
  assertEquals(privateKey.dq, realKey.dq);
  assertEquals(privateKey.qi, realKey.qi);
});

// ============================================================================
// TDD –¢–ï–°–¢–´ –î–õ–Ø validatePrivateKey()
// ============================================================================

Deno.test("validatePrivateKey - –¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á", () => {
  // Arrange
  const validKey: ArWeavePrivateKey = {
    kty: "RSA",
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act & Assert (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É)
  validatePrivateKey(validKey);
});

Deno.test("validatePrivateKey - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ", () => {
  // Arrange
  const invalidKey = {
    kty: "EC", // –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act & Assert
  assertThrows(
    () => validatePrivateKey(invalidKey),
    Error,
    "Invalid private key: must be RSA type"
  );
});

// ============================================================================
// TDD –¢–ï–°–¢–´ –î–õ–Ø validateTextUpload()
// ============================================================================

Deno.test("validateTextUpload - –¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", () => {
  // Arrange
  const validData = {
    data: "test content",
    contentType: "text/plain"
  };

  // Act
  const result = validateTextUpload(validData);

  // Assert
  assertEquals(result.data, "test content");
  assertEquals(result.contentType, "text/plain");
});

Deno.test("validateTextUpload - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π content-type", () => {
  // Arrange
  const dataWithoutContentType = {
    data: "test content"
  };

  // Act
  const result = validateTextUpload(dataWithoutContentType);

  // Assert
  assertEquals(result.data, "test content");
  assertEquals(result.contentType, "text/plain");
});

Deno.test("validateTextUpload - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ data", () => {
  // Arrange
  const invalidData = {
    contentType: "text/plain"
  };

  // Act & Assert
  assertThrows(
    () => validateTextUpload(invalidData),
    Error,
    'Request body must contain "data" field as string'
  );
});

Deno.test("validateTextUpload - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤–æ–º data", () => {
  // Arrange
  const invalidData = {
    data: 123,
    contentType: "text/plain"
  };

  // Act & Assert
  assertThrows(
    () => validateTextUpload(invalidData),
    Error,
    'Request body must contain "data" field as string'
  );
});

// ============================================================================
// TDD –¢–ï–°–¢–´ –î–õ–Ø uploadText()
// ============================================================================

Deno.test("uploadText - –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–µ–∫—Å—Ç", async () => {
  // Arrange
  const testData = "test content";
  const contentType = "text/plain";
  const mockPrivateKey: ArWeavePrivateKey = {
    kty: "RSA",
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act
  const transactionId = await uploadText(testData, contentType, mockPrivateKey, mockArweave);

  // Assert
  assertEquals(transactionId, "ar_test_transaction_id_12345");
});

Deno.test("uploadText - –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ", async () => {
  // Arrange
  const testData = "test content";
  const contentType = "text/plain";
  const mockPrivateKey: ArWeavePrivateKey = {
    kty: "RSA",
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act & Assert
  await assertThrows(
    async () => {
      await uploadText(testData, contentType, mockPrivateKey, mockArweaveWithError);
    },
    Error,
    "ArWeave upload failed: 400 Transaction verification failed."
  );
});

// ============================================================================
// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –û–®–ò–ë–ö–ò
// ============================================================================

Deno.test("uploadText - –¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É 'Transaction verification failed'", async () => {
  // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const testData = JSON.stringify({
    test: "data",
    number: 42,
    boolean: true,
    array: [1, 2, 3],
    object: { nested: "value" }
  });
  const contentType = "application/json";
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  const realPrivateKey = getPrivateKey();
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫ ArWeave, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
  const mockArweaveWithRealError: ArWeaveClient = {
    ...mockArweave,
    transactions: {
      ...mockArweave.transactions,
      post: async () => ({ 
        status: 400, 
        statusText: "Transaction verification failed." 
      })
    }
  };

  // Act & Assert
  await assertThrows(
    async () => await uploadText(testData, contentType, realPrivateKey, mockArweaveWithRealError),
    Error,
    "ArWeave upload failed: 400 Transaction verification failed."
  );
});

Deno.test("uploadText - –¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", async () => {
  // Arrange - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –≤ Python —Ç–µ—Å—Ç–µ
  const testData = JSON.stringify({
    test: "data",
    number: 42,
    boolean: true,
    array: [1, 2, 3],
    object: { nested: "value" }
  });
  const contentType = "application/json";
  
  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  const realPrivateKey = getPrivateKey();
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫ ArWeave, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
  const mockArweaveWithRealError: ArWeaveClient = {
    ...mockArweave,
    transactions: {
      ...mockArweave.transactions,
      post: async () => ({ 
        status: 400, 
        statusText: "Transaction verification failed." 
      })
    }
  };

  // Act & Assert
  const error = await assertThrows(
    async () => await uploadText(testData, contentType, realPrivateKey, mockArweaveWithRealError),
    Error
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  assertEquals(error.message, "ArWeave upload failed: 400 Transaction verification failed.");
});

// ============================================================================
// TDD –¢–ï–°–¢–´ –î–õ–Ø uploadFile()
// ============================================================================

Deno.test("uploadFile - –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª", async () => {
  // Arrange
  const fileData = new Uint8Array([1, 2, 3, 4, 5]);
  const contentType = "application/octet-stream";
  const mockPrivateKey: ArWeavePrivateKey = {
    kty: "RSA",
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act
  const transactionId = await uploadFile(fileData, contentType, mockPrivateKey, mockArweave);

  // Assert
  assertEquals(transactionId, "ar_test_transaction_id_12345");
});

// ============================================================================
// TDD –¢–ï–°–¢–´ –î–õ–Ø HTTP –£–¢–ò–õ–ò–¢
// ============================================================================

Deno.test("createSuccessResponse - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", () => {
  // Arrange
  const testData = { success: true, transaction_id: "ar_test" };

  // Act
  const response = createSuccessResponse(testData);

  // Assert
  assertEquals(response.status, 200);
  assertEquals(response.headers.get("Access-Control-Allow-Origin"), "*");
  assertEquals(response.headers.get("Content-Type"), "application/json");
});

Deno.test("createErrorResponse - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π", () => {
  // Arrange
  const errorMessage = "Test error";
  const statusCode = 400;

  // Act
  const response = createErrorResponse(errorMessage, statusCode);

  // Assert
  assertEquals(response.status, 400);
  assertEquals(response.headers.get("Access-Control-Allow-Origin"), "*");
  assertEquals(response.headers.get("Content-Type"), "application/json");
});

Deno.test("createHealthResponse - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π health check", () => {
  // Act
  const response = createHealthResponse();

  // Assert
  assertEquals(response.status, 200);
  assertEquals(response.headers.get("Access-Control-Allow-Origin"), "*");
  assertEquals(response.headers.get("Content-Type"), "application/json");
});

// ============================================================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´
// ============================================================================

Deno.test("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª uploadText - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å end-to-end", async () => {
  // Arrange
  const testData = "integration test content";
  const contentType = "text/plain";
  const mockPrivateKey: ArWeavePrivateKey = {
    kty: "RSA",
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act
  const transactionId = await uploadText(testData, contentType, mockPrivateKey, mockArweave);

  // Assert
  assertEquals(transactionId, "ar_test_transaction_id_12345");
  assertEquals(transactionId.startsWith("ar"), true);
});

Deno.test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è", async () => {
  // Arrange
  const mockArweaveWithException: ArWeaveClient = {
    ...mockArweave,
    createTransaction: async () => {
      throw new Error("Network error");
    }
  };
  
  const testData = "test content";
  const contentType = "text/plain";
  const mockPrivateKey: ArWeavePrivateKey = {
    kty: "RSA",
    n: "test_n",
    e: "AQAB",
    d: "test_d",
    p: "test_p",
    q: "test_q",
    dp: "test_dp",
    dq: "test_dq",
    qi: "test_qi"
  };

  // Act & Assert
  await assertThrows(
    async () => await uploadText(testData, contentType, mockPrivateKey, mockArweaveWithException),
    Error,
    "Network error"
  );
}); 