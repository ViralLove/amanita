/**
 * –¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º arweave-deno –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è Deno
 */

import { assertEquals } from "https://deno.land/std@0.168.0/testing/asserts.ts";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
async function loadPrivateKey(): Promise<any> {
  const privateKeyFilePath = Deno.env.get('ARWEAVE_PRIVATE_KEY_FILE') || "arweave-wallet.json";
  const rawKey = await Deno.readTextFile(privateKeyFilePath);
  return JSON.parse(rawKey);
}

// –¢–µ—Å—Ç —Å arweave-deno
Deno.test("ARWEAVE-DENO - —Ç–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", async () => {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º arweave-deno –±–∏–±–ª–∏–æ—Ç–µ–∫—É...");
  
  try {
    // –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å arweave-deno
    console.log("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º arweave-deno...");
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
    let Arweave: any;
    try {
      Arweave = await import("https://deno.land/x/arweave@1.14.0/mod.ts");
      console.log("‚úÖ arweave-deno –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      console.log("‚ùå arweave-deno –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...");
      
      try {
        Arweave = await import("https://esm.sh/arweave-deno@latest");
        console.log("‚úÖ arweave-deno —á–µ—Ä–µ–∑ esm.sh –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω");
      } catch (error2) {
        console.log("‚ùå arweave-deno –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏...");
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        const response = await fetch("https://deno.land/x/arweave");
        if (response.ok) {
          const text = await response.text();
          console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ arweave:", text.substring(0, 200));
        }
        
        throw new Error("arweave-deno –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const arweave = Arweave.default.init({
      host: "arweave.net",
      port: 443,
      protocol: "https",
    });
    
    console.log("‚úÖ Arweave –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privateKey = await loadPrivateKey();
    console.log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω:", privateKey.kty === "RSA");
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const dataString = "Hello Arweave from Deno!";
    const dataBytes = new TextEncoder().encode(dataString);
    
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:", dataString);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await arweave.createTransaction({
      data: dataBytes
    }, privateKey);
    
    transaction.addTag("Content-Type", "text/plain");
    transaction.addTag("Test-Type", "arweave-deno");
    
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞");
    console.log("   Owner:", transaction.owner?.substring(0, 20) + "...");
    console.log("   Data size:", transaction.data_size);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
    await arweave.transactions.sign(transaction, privateKey);
    
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞");
    console.log("   ID:", transaction.id);
    console.log("   Signature:", transaction.signature?.substring(0, 20) + "...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID
    if (transaction.id && transaction.id.startsWith("ar")) {
      console.log("üéâ Transaction ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", transaction.id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
      const response = await arweave.transactions.post(transaction);
      console.log("üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.status);
      
      if (response.status === 200 || response.status === 202) {
        console.log("üéâ –£–°–ü–ï–•! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        console.log("üîó URL:", `https://arweave.net/${transaction.id}`);
      } else {
        console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.status, response.statusText);
      }
    } else {
      console.log("‚ùå Transaction ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π:", transaction.id);
    }
    
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ arweave-deno —Ç–µ—Å—Ç–µ:", error.message);
    console.error("Stack trace:", error.stack);
    throw error;
  }
}); 