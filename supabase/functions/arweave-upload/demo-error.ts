/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏ "Transaction verification failed"
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –º—ã –≤–∏–¥–∏–º –≤ Python —Ç–µ—Å—Ç–∞—Ö
 */

import { getPrivateKey, uploadText } from "./utils.ts";

// –ú–æ–∫ ArWeave –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
const mockArweaveWithRealError = {
  init: () => mockArweaveWithRealError,
  createTransaction: async () => ({
    id: "ar_test_transaction_id_12345",
    addTag: () => {},
    get: () => "test_data"
  }),
  transactions: {
    sign: async () => {},
    post: async () => ({ 
      status: 400, 
      statusText: "Transaction verification failed." 
    })
  }
};

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏
async function demonstrateRealError() {
  try {
    console.log("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏...");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –≤ Python —Ç–µ—Å—Ç–µ
    const testData = JSON.stringify({
      test: "data",
      number: 42,
      boolean: true,
      array: [1, 2, 3],
      object: { nested: "value" }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const realPrivateKey = getPrivateKey();
    
    console.log("üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:", testData.substring(0, 100) + "...");
    console.log("üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω:", realPrivateKey.kty === "RSA");
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É)
    const transactionId = await uploadText(
      testData, 
      "application/json", 
      realPrivateKey, 
      mockArweaveWithRealError
    );
    
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:", transactionId);
    
  } catch (error) {
    console.log("‚ùå –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê:");
    console.log("   –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    console.log("   –¢–∏–ø –æ—à–∏–±–∫–∏:", error.constructor.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –≤–∏–¥–∏–º –≤ Python —Ç–µ—Å—Ç–∞—Ö
    if (error.message.includes("Transaction verification failed")) {
      console.log("‚úÖ –û—à–∏–±–∫–∞ 'Transaction verification failed' —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!");
    } else {
      console.log("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (import.meta.main) {
  await demonstrateRealError();
}

export { demonstrateRealError }; 