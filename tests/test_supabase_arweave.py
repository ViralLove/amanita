"""
–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Supabase Edge Function —Å ArWeave –∑–∞–≥—Ä—É–∑–∫–æ–π.
"""

import pytest
import os
import json
import logging
import time
import tempfile
import requests
from pathlib import Path
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
from bot.config import SUPABASE_URL, SUPABASE_ANON_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TRANSFORMATION = "88888888"
EDGE_FUNCTION_BASE_URL = f"{SUPABASE_URL}/functions/v1/arweave-upload"


class PerformanceMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.metrics = {}
    
    def start_timer(self, test_name: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞"""
        self.metrics[test_name] = {
            'start_time': time.time(),
            'end_time': None,
            'duration': None
        }
    
    def end_timer(self, test_name: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞"""
        if test_name in self.metrics:
            self.metrics[test_name]['end_time'] = time.time()
            self.metrics[test_name]['duration'] = (
                self.metrics[test_name]['end_time'] - 
                self.metrics[test_name]['start_time']
            )
    
    def get_duration(self, test_name: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞"""
        return self.metrics.get(test_name, {}).get('duration', 0)
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üìä –°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        for test_name, metric in self.metrics.items():
            duration = metric.get('duration', 0)
            logger.info(f"   {test_name}: {duration:.3f}s")


class BalanceTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ArWeave –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.operations = []
        self.start_time = time.time()
        self.initial_balance = None
        self.final_balance = None
    
    def get_arweave_balance(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ArWeave –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ArWeave API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            import requests
            from bot.config import ARWEAVE_PRIVATE_KEY
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            wallet_address = self._extract_wallet_address(ARWEAVE_PRIVATE_KEY)
            if not wallet_address:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
                return None
            
            # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ ArWeave API
            url = f"https://arweave.net/wallet/{wallet_address}/balance"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                balance_ar = float(response.text) / 1e12  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ winston –≤ AR
                logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ArWeave: {balance_ar:.6f} AR")
                return balance_ar
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {response.status_code}")
                return None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    def _extract_wallet_address(self, private_key_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            import json
            import base64
            import hashlib
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            if private_key_path.startswith('{'):
                key_data = json.loads(private_key_path)
            else:
                with open(private_key_path, 'r') as f:
                    key_data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (n) –∏–∑ RSA –∫–ª—é—á–∞
            n = key_data.get('n')
            if not n:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä 'n' –≤ RSA –∫–ª—é—á–µ")
                return None
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64url
            n_bytes = base64.urlsafe_b64decode(n + '=' * (4 - len(n) % 4))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à SHA256
            sha256_hash = hashlib.sha256(n_bytes).digest()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64url (—ç—Ç–æ –∏ –µ—Å—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞)
            wallet_address = base64.urlsafe_b64encode(sha256_hash).decode('utf-8').rstrip('=')
            
            logger.info(f"üí∞ –ò–∑–≤–ª–µ—á–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
            return wallet_address
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return None
    
    def start_balance_tracking(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        self.initial_balance = self.get_arweave_balance()
        logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.initial_balance:.6f} AR" if self.initial_balance else "üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    
    def end_balance_tracking(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        self.final_balance = self.get_arweave_balance()
        logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.final_balance:.6f} AR" if self.final_balance else "üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        
        if self.initial_balance is not None and self.final_balance is not None:
            balance_change = self.final_balance - self.initial_balance
            logger.info(f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {balance_change:+.6f} AR")
            return balance_change
        return None
    
    def track_operation(self, operation_type: str, transaction_id: str = None, cost_estimate: str = "unknown"):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é"""
        operation = {
            "type": operation_type,
            "timestamp": time.time(),
            "transaction_id": transaction_id,
            "cost_estimate": cost_estimate
        }
        self.operations.append(operation)
        logger.info(f"üí∞ –û–ø–µ—Ä–∞—Ü–∏—è: {operation_type}, TX: {transaction_id}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_estimate}")
    
    def get_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return {
            "total_operations": len(self.operations),
            "operations": self.operations,
            "total_time": time.time() - self.start_time,
            "initial_balance": self.initial_balance,
            "final_balance": self.final_balance,
            "balance_change": self.final_balance - self.initial_balance if (self.initial_balance is not None and self.final_balance is not None) else None
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫
performance_metrics = PerformanceMetrics()
balance_tracker = BalanceTracker()

@pytest.fixture
def arweave_balance_tracker():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ AR —Ç–æ–∫–µ–Ω–æ–≤
    """
    tracker = BalanceTracker()
    tracker.start_balance_tracking()
    
    yield tracker
    
    # –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    balance_change = tracker.end_balance_tracking()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    summary = tracker.get_summary()
    logger.info("üí∞ –¢–û–ß–ù–û–ï –ò–ó–ú–ï–†–ï–ù–ò–ï –†–ê–°–•–û–î–ê AR:")
    logger.info(f"   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['initial_balance']:.6f} AR" if summary['initial_balance'] else "   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    logger.info(f"   üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['final_balance']:.6f} AR" if summary['final_balance'] else "   üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    if summary['balance_change'] is not None:
        logger.info(f"   üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {summary['balance_change']:+.6f} AR")
        if summary['balance_change'] < 0:
            logger.info(f"   üí∏ –†–∞—Å—Ö–æ–¥ AR: {abs(summary['balance_change']):.6f} AR")
        else:
            logger.info(f"   üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ AR: {summary['balance_change']:.6f} AR")
    logger.info(f"   üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {summary['total_operations']}")


def measure_performance(test_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤"""
    def decorator(func):
        def wrapper(self, *args, **kwargs):
            performance_metrics.start_timer(test_name)
            try:
                result = func(self, *args, **kwargs)
                return result
            finally:
                performance_metrics.end_timer(test_name)
        return wrapper
    return decorator


@pytest.fixture(scope="module")
def edge_function_client():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ edge function
    """
    class EdgeFunctionClient:
        def __init__(self):
            self.base_url = EDGE_FUNCTION_BASE_URL
            self.headers = {
                'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
                'Content-Type': 'application/json'
            }
            self.timeout = 30
        
        def health_check(self):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è edge function"""
            url = f"{self.base_url}/health"
            response = requests.get(url, headers=self.headers, timeout=self.timeout)
            return response
        
        def upload_text(self, data: str, content_type: str = "text/plain"):
            """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ edge function"""
            url = f"{self.base_url}/upload-text"
            payload = {
                "data": data,
                "contentType": content_type
            }
            response = requests.post(url, json=payload, headers=self.headers, timeout=self.timeout)
            return response
        
        def upload_file(self, file_path: str):
            """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ edge function"""
            url = f"{self.base_url}/upload-file"
            with open(file_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f, 'application/octet-stream')}
                headers = {'Authorization': f'Bearer {SUPABASE_ANON_KEY}'}
                response = requests.post(url, files=files, headers=headers, timeout=self.timeout)
            return response
    
    return EdgeFunctionClient()


@pytest.fixture(scope="module")
def arweave_uploader():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è ArWeaveUploader —Å edge function –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Edge Function, –∞ –Ω–µ Python –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    """
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Edge Function –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω Python ArWeaveUploader
    # –ú—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º Edge Function –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
    return None


@pytest.fixture
def temp_test_file():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
        f.write("Test file content for ArWeave upload")
        temp_file_path = f.name
    
    yield temp_file_path
    
    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.unlink(temp_file_path)
    except OSError:
        pass


@pytest.fixture
def test_json_data():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö
    """
    return {
        "test": "data",
        "number": 42,
        "boolean": True,
        "array": [1, 2, 3],
        "object": {"nested": "value"}
    }


# ============================================================================
# –¢–ï–°–¢–´ EDGE FUNCTION
# ============================================================================

class TestEdgeFunctionAvailability:
    """–¢–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ edge function"""
    
    def test_health_check(self, edge_function_client):
        """–¢–µ—Å—Ç health check endpoint"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check endpoint")
        
        response = edge_function_client.health_check()
        
        assert response.status_code == 200, f"Health check failed: {response.status_code}"
        
        data = response.json()
        assert data.get('status') == 'healthy', f"Invalid status: {data.get('status')}"
        assert 'timestamp' in data, "Missing timestamp in response"
        assert data.get('arweave') == 'connected', f"ArWeave not connected: {data.get('arweave')}"
        
        logger.info(f"‚úÖ Health check passed: {data}")
        balance_tracker.track_operation("health_check")
    
    def test_balance_tracking_demo(self, arweave_balance_tracker):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ AR —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ AR —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        arweave_balance_tracker.track_operation("balance_check_demo", cost_estimate="0 AR")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        summary = arweave_balance_tracker.get_summary()
        assert summary['total_operations'] >= 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è"
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def test_upload_text_with_balance_tracking(self, edge_function_client, test_json_data, arweave_balance_tracker):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —Ç–æ—á–Ω—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º —Ä–∞—Å—Ö–æ–¥–∞ AR —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ upload text —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º —Ä–∞—Å—Ö–æ–¥–∞ AR")
        
        test_data = json.dumps(test_json_data)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        arweave_balance_tracker.track_operation("upload_text_start", cost_estimate="~0.002 AR")
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
        response = edge_function_client.upload_text(test_data, "application/json")
        assert response.status_code == 200, f"HTTP error: {response.status_code} - {response.text}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—Ö–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        data = response.json()
        assert data.get('success') is True, f"Upload failed: {data}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ transaction_id
        transaction_id = data.get('transaction_id')
        assert transaction_id and transaction_id.startswith('ar'), f"Invalid transaction ID: {transaction_id}"
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        arweave_balance_tracker.track_operation("upload_text_success", transaction_id, "actual_cost")
        logger.info(f"‚úÖ Text upload successful: {transaction_id}")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        downloaded_data = self.verify_arweave_upload(transaction_id, test_data)
        assert downloaded_data == test_data, f"Uploaded data doesn't match: {downloaded_data[:100]}..."
        
        logger.info(f"‚úÖ Text upload verified in ArWeave: {transaction_id}")
        return transaction_id
    
    def verify_arweave_upload(self, transaction_id: str, expected_data: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ ArWeave"""
        url = f"https://arweave.net/{transaction_id}"
        response = requests.get(url, timeout=30)
        assert response.status_code == 200, f"Failed to download from ArWeave: {response.status_code}"
        return response.text
    
    def test_upload_file(self, edge_function_client, temp_test_file):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ edge function"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ upload file endpoint")
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
        response = edge_function_client.upload_file(temp_test_file)
        assert response.status_code == 200, f"HTTP error: {response.status_code} - {response.text}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—Ö–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        data = response.json()
        assert data.get('success') is True, f"Upload failed: {data}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ transaction_id
        transaction_id = data.get('transaction_id')
        assert transaction_id and transaction_id.startswith('ar'), f"Invalid transaction ID: {transaction_id}"
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        balance_tracker.track_operation("upload_file", transaction_id)
        logger.info(f"‚úÖ File upload successful: {transaction_id}")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        downloaded_file = self.verify_arweave_file_upload(transaction_id, temp_test_file)
        assert downloaded_file, "Failed to download uploaded file from ArWeave"
        
        logger.info(f"‚úÖ File upload verified in ArWeave: {transaction_id}")
        return transaction_id
    
    def verify_arweave_file_upload(self, transaction_id: str, original_file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ ArWeave"""
        url = f"https://arweave.net/{transaction_id}"
        response = requests.get(url, timeout=30)
        assert response.status_code == 200, f"Failed to download file from ArWeave: {response.status_code}"
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
        with open(original_file_path, 'rb') as f:
            original_content = f.read()
        
        return response.content == original_content


class TestEdgeFunctionErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ edge function"""
    
    def test_invalid_auth(self, edge_function_client):
        """–¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–ª—é—á–æ–º
        invalid_headers = {'Authorization': 'Bearer invalid_key'}
        url = f"{EDGE_FUNCTION_BASE_URL}/upload-text"
        payload = {"data": "test", "contentType": "text/plain"}
        
        response = requests.post(url, json=payload, headers=invalid_headers, timeout=30)
        
        # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        assert response.status_code in [401, 403], f"Expected auth error, got: {response.status_code}"
        
        logger.info(f"‚úÖ Invalid auth handled correctly: {response.status_code}")
    
    def test_invalid_data_format(self, edge_function_client):
        """–¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        url = f"{EDGE_FUNCTION_BASE_URL}/upload-text"
        payload = {"wrong_field": "test"}  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ "data"
        
        response = requests.post(url, json=payload, headers=edge_function_client.headers, timeout=30)
        
        # –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        assert response.status_code in [400, 422], f"Expected validation error, got: {response.status_code}"
        
        logger.info(f"‚úÖ Invalid data format handled correctly: {response.status_code}")
    
    def test_server_error_handling(self, edge_function_client):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫ (500)"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é –æ—à–∏–±–∫—É
        url = f"{EDGE_FUNCTION_BASE_URL}/upload-text"
        payload = {"data": "x" * 1000000}  # –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
        
        response = requests.post(url, json=payload, headers=edge_function_client.headers, timeout=30)
        
        # 500 –æ—à–∏–±–∫–∞ - —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if response.status_code == 500:
            logger.warning(f"‚ö†Ô∏è Server error detected: {response.status_code}")
            # –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        else:
            logger.info(f"‚úÖ Request handled without server error: {response.status_code}")
    
    def test_missing_file(self, edge_function_client):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
        
        url = f"{EDGE_FUNCTION_BASE_URL}/upload-file"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∞–π–ª–∞
        response = requests.post(url, headers=edge_function_client.headers, timeout=30)
        
        # –û–∂–∏–¥–∞–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        assert response.status_code in [400, 422], f"Expected file error, got: {response.status_code}"
        
        logger.info(f"‚úÖ Missing file handled correctly: {response.status_code}")


# ============================================================================
# –¢–ï–°–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ============================================================================

class TestConfiguration:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Edge Function"""
    
    def test_configuration_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        assert SUPABASE_URL, "SUPABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert SUPABASE_URL.startswith("http"), f"Invalid SUPABASE_URL: {SUPABASE_URL}"
        
        if SUPABASE_ANON_KEY:
            assert len(SUPABASE_ANON_KEY) > 10, f"SUPABASE_ANON_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(SUPABASE_ANON_KEY)}"
            logger.info("‚úÖ SUPABASE_ANON_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è SUPABASE_ANON_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - Edge Functions –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        logger.info(f"‚úÖ Configuration validation passed: {SUPABASE_URL}")


# ============================================================================
# END-TO-END –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EDGE FUNCTION
# ============================================================================

class TestEndToEndEdgeFunction:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Edge Function"""
    
    def test_upload_and_verify_cycle(self, edge_function_client, test_json_data):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Edge Function"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ upload —á–µ—Ä–µ–∑ Edge Function")
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
        test_data = json.dumps(test_json_data)
        response = edge_function_client.upload_text(test_data, "application/json")
        assert response.status_code == 200, f"HTTP error: {response.status_code} - {response.text}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—Ö–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        data = response.json()
        assert data.get('success') is True, f"Upload failed: {data}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ transaction_id
        transaction_id = data.get('transaction_id')
        assert transaction_id and transaction_id.startswith('ar'), f"Invalid transaction ID: {transaction_id}"
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        balance_tracker.track_operation("full_cycle", transaction_id)
        logger.info(f"‚úÖ Full cycle successful: {transaction_id}")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        downloaded_data = self.verify_arweave_upload(transaction_id, test_data)
        assert downloaded_data == test_data, f"Uploaded data doesn't match: {downloaded_data[:100]}..."
        
        logger.info(f"‚úÖ Full cycle verified in ArWeave: {transaction_id}")
        return transaction_id


# ============================================================================
# –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ EDGE FUNCTION
# ============================================================================

class TestPerformanceAndLoad:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Edge Function"""
    
    def test_multiple_uploads(self, edge_function_client):
        """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ Edge Function"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ —á–µ—Ä–µ–∑ Edge Function")
        
        transaction_ids = []
        successful_uploads = 0
        
        for i in range(3):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º 3 –∑–∞–≥—Ä—É–∑–∫–∏
            test_data = json.dumps({"test_number": i, "timestamp": time.time()})
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
            response = edge_function_client.upload_text(test_data, "application/json")
            assert response.status_code == 200, f"Upload {i} HTTP error: {response.status_code} - {response.text}"
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—Ö–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            data = response.json()
            assert data.get('success') is True, f"Upload {i} failed: {data}"
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ transaction_id
            transaction_id = data.get('transaction_id')
            assert transaction_id and transaction_id.startswith('ar'), f"Upload {i} invalid transaction ID: {transaction_id}"
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            transaction_ids.append(transaction_id)
            balance_tracker.track_operation(f"multiple_upload_{i}", transaction_id)
            successful_uploads += 1
            logger.info(f"‚úÖ Upload {i} successful: {transaction_id}")
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            downloaded_data = self.verify_arweave_upload(transaction_id, test_data)
            assert downloaded_data == test_data, f"Upload {i} data doesn't match: {downloaded_data[:100]}..."
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        assert successful_uploads == 3, f"Expected 3 successful uploads, got {successful_uploads}"
        
        logger.info(f"‚úÖ Multiple uploads completed: {successful_uploads}/{3} successful")
        return transaction_ids
    
    def test_performance_metrics(self, edge_function_client, test_json_data):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Edge Function"""
        logger.info("üîç –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Edge Function")
        
        test_data = json.dumps(test_json_data)
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
        start_time = time.time()
        response = edge_function_client.upload_text(test_data, "application/json")
        upload_time = time.time() - start_time
        
        assert response.status_code == 200, f"Upload failed: {response.status_code} - {response.text}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—Ö–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        data = response.json()
        assert data.get('success') is True, f"Upload failed: {data}"
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ transaction_id
        transaction_id = data.get('transaction_id')
        assert transaction_id and transaction_id.startswith('ar'), f"Invalid transaction ID: {transaction_id}"
        
        # –ò–∑–º–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info(f"‚úÖ Upload successful: {transaction_id}")
        logger.info(f"Edge Function upload time: {upload_time:.3f}s")
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        downloaded_data = self.verify_arweave_upload(transaction_id, test_data)
        assert downloaded_data == test_data, f"Uploaded data doesn't match: {downloaded_data[:100]}..."
        
        logger.info("‚úÖ Performance metrics completed for successful upload")


# ============================================================================
# –§–ò–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ò –û–¢–ß–ï–¢–´
# ============================================================================

class TestFinalSummary:
    """–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –æ—Ç—á–µ—Ç—ã"""
    
    def test_final_summary(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏")
        
        # –°–≤–æ–¥–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        operations_summary = balance_tracker.get_summary()
        logger.info("üí∞ –°–í–û–î–ö–ê ARWEAVE –û–ü–ï–†–ê–¶–ò–ô:")
        logger.info(f"   üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {operations_summary['total_operations']}")
        logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {operations_summary['total_time']:.3f}s")
        
        for op in operations_summary['operations']:
            logger.info(f"   - {op['type']}: {op['transaction_id'] or 'N/A'}")
        
        # –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_metrics.print_summary()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if SUPABASE_ANON_KEY:
            logger.info("   ‚úÖ Edge Function –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            logger.info("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Edge Function –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            logger.info("   ‚ö†Ô∏è SUPABASE_ANON_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info("   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Edge Function –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        logger.info("‚úÖ Final summary completed")


# ============================================================================
# –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í
# ============================================================================

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    pytest.main([
        __file__,
        "-v",
        "--tb=short",
        "--capture=no"
    ])
